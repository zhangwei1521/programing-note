Scoop文档
    概述
        啥？
            你为什么应该了解Scoop？
            如果你符合以下条件，那么Scoop就是为你设计的：
                你是一个开发者；
                你想要初始化你的计算机开发环境，但是不想再去各个站点下载安装程序并一个接一个的点击安装；
                你喜欢命令行工具，比如Git；
                你熟悉Unix工具，并且希望Windows有更多这类工具；
                你阅读黑客头条，并且觉得Windows困住了你，使你错过了很多很酷的东西；
                你希望以一种简单的方式告诉别人怎么安装软件（可能是你写的软件）；
                你使用Homebrew/apt-get，而且觉得它们很棒。
            Scoop能带给我什么？
                让你可以编写脚本实现开发环境的搭建（脚本可复用）；
                像在其他平台上安装工具一样方便，而且它们可以很好地工作；
                让你停留在命令行中，始终高速地工作；
                扩展powershell使你可以使用支持更好地文本处理程序和交互工具；
                使你装备源于Linux的工具
            我正在使用其他工具，为什么要转向Scoop？
                台面上存在其他一些和Scoop类似的工具，如Chocolatey, Ninite和CoApp.后面有一个地方会深入介绍Scoop和
                Chocolatey的不同，下面是一些让你可能更喜欢Scoop的理由：
                    Scoop总是尽可能地避免图形界面，使你专注于命令行；
                    Scoop默认安装在你的home目录下，从而可以避免其他人弄乱你的Scoop和安装的程序；
                    Scoop以独立、自包容的方式安装程序，这样可以减少冲突，而且程序卸载后不会影响其他程序；
                    Scoop安装程序不会污染你的path环境变量；
                    Scoop使用类似于Git的命令行界面；
                    Scoop提供便利的命令使用说明，帮助你快速学会新命令和复习忘记的命令；
                    Scoop让你可以以简洁的方式告诉别人怎么安装你写的程序；
                    Scoop提供一个精心策划的应用集合；
                    Scoop让你更轻松地创建你的应用和应用集合；
                    Scoop不会浪费你的时间和精力；
                    Scoop提供README文档....
                还有一些更不客观的理由让你试一试Scoop，或许你想不使用管理员权限安装程序，获取你喜欢Chocolatey但是不喜欢
                这个名字，或者你觉得输入cinst很怪异，又或者你不是Chocolatey顶呱呱这种说法的粉丝。
        Scoop和Chocolatey有什么不同？
            Scoop默认安装目录是~/scoop/，你可以安装你自己的程序而不需要担心干扰到其他人或者被其他人的程序干扰，如果你有
            管理员权限，你也可以选择全局安装；
            Scoop安装程序不会出现UAC弹窗，也不需要管理员权限，因为程序仅是为你的个人账号安装，你讲不会被UAC弹窗打扰；
            Scoop不会污染你的path变量，scoop尽可能地把你的程序放在单独的目录中，再把这个目录加入path变量；
            Scoop并不适用NuGet，NuGet是一个很棒的处理软件库依赖的解决方案，但是Scoop是完全相反的思路，你使用Scoop安装的
            每个程序都是独立的；
            Scoop比包管理工具简单，Scoop不是包管理工具，但是它也使用一个JSON格式的Manifests摘录文件记录安装程序的安装说明和
            依赖；
            Scoop使用简单的应用仓库，Scoop使用Git管理应用仓库，你可以创建自己的仓库，或者使用一个简单的文件描述要安装的程序；
            Scoop不保证总能安装老版本的应用，对于一些程序，Scoop可以安装老版本，命令：scoop install app@version，比如：
            scoop install curl@7.56.1，这个功能只在那些老版本的应用仍然在仓库中时才可用，一些老版本软件必须指定版本号，如
             Python 2.7 and Ruby 1.9，这可以通过版本仓库安装，命令：scoop install python27和scoop install ruby19
             提示：尽管使用Scoop安装Skype很容易，但是这种应用永远不会出现在Scoop的主仓库中，Scoop专注于开源的命令行开发工具，
             scoop extra仓库则保存那些非开发工具。
        Scoop和Cygwin以及MSYS有什么不同?
            对于Cygwin和MSYS的最简介的描述来自于 Mike Zick曾经的一个回答：
                Cygwin是一个操作系统外壳，Cygwin的目标是提供Windows环境下的Linux编程API；MSYS是一个shell替代品，其目标是提供
                一个POSIX脚本执行环境
            这种说法可能不是完全准确，但是容易把握。
            也可以以上面的方式定义Scoop，Scoop是一个安装工具，目标是让你可以在Windows环境下使用Unix风格的程序。
            Scoop可以让你实现通过Cygwin或MSYS可以做到的事，但是不需要去学习其他操作系统环境，你只需要做你在做的事，scoop安装的
            跨平台的工具总是容易使用。
            其实，很多Scoop安装的程序都是直接来自于 MinGW/MSYS 项目，亦或是使用其他工具构建，Scoop只希望在MinGW/MSYS的优秀工作
            的基础上实现自己的目标，scoop自己就是基于cygwin实现的。
    上手
        马上开始
            先决条件
                进入powershell：
                    "Start" --> (Search) "cmd"
                    Windows终端窗口输入：powershell
                你应该安装powershell5.0或更新的版本，如果你使用Windows 10 或者 Windows Server 2012，那么默认已经安装好了，但是
                你的Windows7和Windows Server 2008可能安装的老版本的powershell。
                使用如下命令查看powershell版本：
                    $psversiontable.psversion.major
                使用如下命令设置允许powershell执行本地脚本：（Windows默认不允许任何脚本运行）
                    set-executionpolicy remotesigned -scope currentuser
                使用Unrestricted也行，但是不那么安全，如果你不确定，最好还是使用remotesigned。
            安装Scoop
                在powershell控制台中执行命令：
                    iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
            自定义scoop安装目录
                如果要在C:\scoop目录下安装scoop，在命令行中执行：
                $env:SCOOP='C:\scoop'
                [environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')
                iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
                如果没有报错提示的话，scoop就安装好了
            设置安装全局共享应用的目录：
                如果要在C:\apps安装全局共享的应用，需要在具有管理员权限的powershell控制台执行：
                    $env:SCOOP_GLOBAL='c:\apps'
                    [environment]::setEnvironmentVariable('SCOOP_GLOBAL',$env:SCOOP_GLOBAL,'Machine')
                    scoop install -g <app>
            使用scoop
                虽然scoop是用powershell编写的，但是它的接口更接近git和Mercurial，而不像其他大多数的powershell应用。
                使用scoop help可以获取scoop的接口的概览，你将会看到一组带有简短描述的命令，使用scoop help <command>
                可以查看每个命令的详细信息，例如scoop help install
                既然你已经大概了解了scoop命令怎么使用了，让我们来试着安装一些东西。
                    scoop install curl
                你可能会看到一个丢失hash的警告，但是你会在最后看到一条消息说curl已经安装成功啦。尝试执行：
                    curl -L https://get.scoop.sh
                你应该会看到一段HTML，或许是一段文档已转移的消息。注意，你在安装了scoop后，并不需要重新打开新的控制台就
                可以运行程序。如果你以前手动安装过curl,你可能发现你不会获得一个关于SSL的错误，这是因为scoop已经为你绑定
                下载了一个证书。
                查找应用：
                    假设你想要安装ssh命令，但是不知道在哪里可以找到它，请尝试执行：
                        scoop search ssh
                    你应该会看到一个关于openssh的结果，因为应用名字中包含'ssh'，所以这个例子很容易。
                    你也可以通过安装后的命令文件的名称查找应用。例如：scoop search hg
                    你将会发现mercurial应用，它包含了hg.exe
            更新scoop
                要更新到scoop的最新版本，你需要运行命令：scoop update
                这个命令会下载scoop的最新版本然后更新本部的应简录文件。
                在你更新scoop后，你可以运行 scoop update curl来更新你自己安装的应用。
                如果你想要更新所有通过scoop安装的应用，你可以运行： scoop update *
        命令帮助
            scoop的命令相关信息是内置的，如果你使用过git，你就会发现scoop的帮助界面非常熟悉。
            查看scoop的所有命令列表，请执行：scoop help
            查看某个具体的命令的详细说明，请执行：scoop help <command>
            scoop目前提供的命令有（来源于scoop help）：
                alias   管理scoop别名
                bucket  管理scoop仓库
                cache   显示或清除下载缓存
                checkup 检查潜在的问题
                clearup 清除应用的老版本
                config  查看或设置配置变量的值
                create  创建一个自定义的应用简介文档
                depends 列出某个应用的依赖
                export  导出或导入已安装应用
                help    显示命令说明信息
                home    打开应用主页
                install 安装应用
                list    列出已安装的应用
                prefix  返回指定命令的安装路径
                reset   重置应用以解决冲突
                search  搜索可用的应用
                status  显示应用状态并检查新版本
                uninstall 卸载应用
                update  更新应用或者更新scoop
                virustotal 查找应用在virustotal.com上的哈希值
                which   定位应用或其他文件（类似于Linux中的which命令）
        FAQ
            如果你在这里没有找到你的问题的答案，请发起一个issue。
            我要怎么更新我的应用？
                首先更新scoop以获取最新的仓库应用信息：scoop update
                然后更新应用，比如更新git：scoop update git
                如果你想一次更新你的所有应用，你可以使用通配符*：scoop update *
            我要怎么卸载一个应用？
                使用命令：scoop uninstall [app]，比如卸载git：scoop uninstall git
            scoop安装应用时非常慢，CPU占用被锁定，或提示访问被拒绝错误
                这有可能是你的杀毒软件或反恶意软件程序正在实时扫描被提取的文件，请查看"杀毒软件或反恶意应用相关问题"
                页面获取更多信息和可用的解决方法。
        卸载Scoop
            如果你厌倦了scoop或者觉得它不适合你，你可以卸载scoop以及所有通过scoop安装的应用，使用命令：scoop uninstall scoop
            这个命令将会告知你将会发生什么，并询问是否确定卸载，你只需要输入y以确认卸载。
            这个命令将会删除目录：~/scoop/persist
            重装scoop之前，你应该先删除旧的scoop主目录，你需要在powershell中执行：
                del .\scoop -Force
    概念
        应用（Apps）
            scoop使用术语"应用"表示可以安装的应用程序，你可能还会看到有时这个词表示的意思是描述怎么安装应用的应简录文档。
            一个应用是一个自包容的、独立的单元，它包含一个或多个可执行文件或脚本，作为说明来说这可能太啰嗦了，通常在你看到
            某个运行中的应用时你就知道它是什么了。
            使用这个术语的主要原因可能是它只有两个字母和三次输入。
        仓库（Buckets）
            仓库是什么？
                在scoop中，仓库是一组应用的集合，更具体的说，一个仓库是一个Git仓库，保存了JSON格式的描述怎么安装应用的应用简录文件。
                scoop有一个捆绑的主仓库，主仓库包含了大部分你所需要安装的应用，并且将保证始终可用。
                使用scoop install <app>默认就是在主仓库中搜索查找应用，当然你也可以在其他仓库中查找应用和安装。
                另外一个可用的仓库是外部仓库，它收录了那些不满足主仓库收录条件的应用，但是这些应用仍然值得使用。版本仓库是另一个保存部分
                广为人知的应用包的历史版本的仓库。
                scoop支持添加其他仓库。任何人都可以建立包含他喜欢的应用的仓库，其他人也可以使用这个仓库，他们只需要知道这个仓库地址就行。
            知名仓库
                社区维护了一批仓库，名单保存在buckets.json文件中，可以使用scoop命令查看这些仓库名单：scoop bucket know
            从其他仓库安装应用
                如果你想要从主仓库之外的其他仓库安装应用，你需要配置scoop让scoop知道这些仓库，例如配置extras仓库：
                    scoop bucket add extras
                extras仓库很特殊，它很知名，scoop已经知道它的地址所以你不需要去配置它的地址。
                让我们看一下那些不那么知名的仓库，你应该像下面这样添加它到scoop：
                    scoop bucket add extras https://github.com/lukesampson/scoop-extras.git
                即：
                    scoop bucket add <name-of-bucket> <location-of-bucket>
                你可以执行命令scoop help bucket获得与仓库有关的更多信息。
            创建你自己的仓库
                下面是一个你可以使用去创建你自己的仓库的方法，请使用GitHub托管你的仓库。当然你也可以不使用GitHub，任何源码控制仓库都是支持的，甚至
            本地仓库和网盘都行。
                1、创建一个GitHub仓库并取名，比如叫my-bucket；
                2、添加一个应用到你的仓库中。
                在powershell控制台中执行：
                    git clone https://github.com/<your-username>/my-bucket
                    cd my-bucket
                    '{ version: "1.0", url: "https://gist.github.com/lukesampson/6446238/raw/hello.ps1", bin: "hello.ps1" }' > hello.json
                    git add .
                    git commit -m "add hello app"
                    git push
                3、配置scoop使用你的仓库：
                    scoop bucket add my-bucket https://github.com/<your-username>/my-bucket
                4、检查是否成功：
                    scoop bucket list # -> 应该可以在输出中找到'my-bucket'
                    scoop search hello # -> 应该可以看到应用 hello 出现在'my-bucket bucket:'下
                    scoop install hello
                    hello # -> 应该输出：'Hello, <windows-username>!'
                5、如果要分享你的仓库，你应该告诉别人怎么添加你的仓库，就是第三步的操作，如果你想要让scoop收录你的仓库，请到scoop的GitHub主页添加一个
                    scoop-bucket添加申请。
        应用简录
            创建应用简录
            自动更新
            持久化数据
            安装前置及安装后置脚本
        依赖
        当前版本别名
    指南
        定制powershell主题
        SSH
        使用SSH连接GitHub
        自定义PHP配置
        使用PHP的Apache
        java
        docker以及docker组件
    杂项
        全局安装
        切换ruby和Python的版本
        为什么使用powershell
        启动脚本实例
        为scoop配置代理服务器
        在bash中使用scoop？
        powershell模块
