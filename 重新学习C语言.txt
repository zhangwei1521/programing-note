											重新学习C语言
										      （C99版）
	第一章
	预处理指令：预处理器读入源码文件后，根据预处理指令修改源码，然后将修改后的源码传递给编译器。
		#include <stdio.h>          //编译前预处理器用名为stdio.h的库函数头文件的内容替换已加载的源码文件中的这一条语句。
		#define MAX_INPUT 1000		//预处理器将替换已加载的源码文件中的MAX_INPUT为1000.
	使用函数前需要先声明函数，函数声明一般被称为函数原型。函数原型中的参数列表只需要写出参数的类型，不必须写出参数名。
	main函数的声明：int main(){...}
	数组声明：char input[100];	
	几个库函数：
		gets(char input[]) 读取一行文本到传入的参数数组中，识别换行符作为一行文本的结束，并且丢弃结尾的换行符然后添加
			NUL('\0')字符。返回一个非NULL值表示成功。(读取一个空文件应该就会返回NULL)
		puts("sdfsdf") 输出字符串，末尾将添加换行符
		printf("str%d",a)  格式化输出	%d --10进制整数  %o --8进制整数  %x --16进制整数  %g --浮点数  %c --字符  %s --字符串  \n --换行符
		scanf("%d",&a) 格式化输入		%d --int  %ld --long   %f --float   %lf --double   %c --char   %s --char数组
		int c = getchar(); 读取单个字符（EOF是一个整形值）
		strncpy(...) 三个参数分别是目标字符串起始地址、源字符串起始地址和需要复制的字符数。
		int strlen(char input[]) 返回字符数组的长度
	声明方法：void mymethod(char *input, int const nums[]);
	使用上述方法： char input[100];	int nums[20];	mymethod(input, nums);
	由于C语言传递数组给函数调用，使用引用传递，即将数组地址传递给调用函数，所以声明参数时使用指针是合理的。如果函数中
不会修改传入的数组，那么可以声明成 int const nums[]这种形式，编译器将检查函数中是否修改了该数组。
	标量（普通数据类型变量）和常量是按值传递给调用函数。
	
	第二章
	编译过程：
		预处理器处理已加载的源代码->解析（生成错误或警告信息）->（优化器优化目标代码）->链接器链接各个目标文件和库函数产生可执行文件
	词法规则：
		C语言不关心源文件使用的字符集，只是规定了所用的字符集必须包含英文大小写字母、数字和一些其他必需字符(部分可以使用三字母词替换)。
		三字母词：使用三个字母代替一些字符（用于某些字符集缺乏某些字符）：如??(表示[；??<表示{ （通常不会使用）
		转义字符:\? 、\" 、\a、\b、\n、\b等
	注释：
		多行注释：/* ... */
		单行注释：//  似乎没有在ANSIC中定义，可能是C99新增的
	标识符：
		变量或函数等的名字，只能是大小写字母、数字、下划线的组合，且不能以数字开头。
		C语言保留字，不能用作标识符，如auto、register、struc、union等
	程序的形成：
		一个C程序由声明和函数组成，函数定义需要执行的工作，声明描述了函数和函数将要操作的数据类型或数据。
		函数和函数的声明通常应该（需要）放在同一个源文件中。
	程序风格：
		C源文件的格式要求并不严格，在可以使用一个空格的地方通常可以使用多个空格，但是相邻的不同标记间必须使用至少一个空格。
	变量声明、初始化、赋值：
		int a,b; 
		int c=3,d=4;  
		a=b=1;
	
	