										npm基础
	npm 是一个包管理器，它让 JavaScript 开发者分享、复用代码更方便，类似maven，引用别人的代码通常是框架或者库，npm称为包，npm管理的包都需要提供了一个package.json文件。
	npm的三类含义：
		1、一个网站，就是前面提到用于搜索 JS 模块的网站：https://www.npmjs.com/
		2、一个仓库，保存着人们分享的 JS 模块的大数据库
		3、命令行里的客户端，开发者使用它来管理、安装、发布模块
	npm依附于node，安装node后就安装了npm。升级npm使用：npm install npm@latest -g
	一个npm包的 package.json 文件有以下几点作用：
		1、作为一个描述文件，描述了项目依赖哪些包
		2、允许我们使用 “语义化版本规则”指明项目依赖包的版本
		3、让你的构建更好地与其他开发者分享，便于重复使用
	使用 npm init 即可在当前目录创建一个 package.json 文件，但是这个命令执行时需要手动输入包的信息，可以一直enter，使用默认值，也直接输入 npm init --yes 跳过回答问题步骤，
直接生成默认值的 package.json 文件
	package.json包含的信息包括：name、version、description、main、scripts、keywords、author、license、bugs、dependencies、devDependencies；说明：
		main：入口文件，一般都是 index.js
		scripts：支持的脚本，默认是一个空的 test
		keywords：关键字，有助于在人们使用 npm search 搜索时发现你的项目
		dependencies：在生产环境中需要用到的依赖
		devDependencies：在开发、测试环境中用到的依赖
	可以使用npm set init.xxx(.yyy) "ssss"为 init 命令设置一些默认值
	npm 管理的包的版本号规范：
		从 1.0.0 版本开始。升级版本应该遵循以下标准：
		补丁版本：解决了 Bug 或者一些较小的更改，增加最后一位数字，比如 1.0.1
		小版本：增加了新特性，同时不会影响之前的版本，增加中间一位数字，比如 1.1.0
		大版本：大改版，无法兼容之前的，增加第一位数字，比如 2.0.0
	语义化版本规则：package.json中dependencies、devDependencies声明的依赖使用 语义化版本规则 声明更新对应包时的版本规则：
		如果只打算接受补丁版本的更新（也就是最后一位的改变），就可以这么写：1.0 或 1.0.x 或	~1.0.4
		如果接受小版本的更新（第二位的改变），就可以这么写：1 或 1.x 或	^1.0.4
		如果可以接受大版本的更新（自然接受小版本和补丁版本的改变），就可以这么写： * 或 x
	npm 安装 package 有两种方式：当前项目路径安装 或者 全局安装。
	npm install 会查找项目package.json文件中列出的依赖包，然后下载符合语义化版本规则的版本，默认会安装 package.json 中 dependencies 和 devDependencies 里的所有模块，
如果想只安装 dependencies 中的内容，可以使用 --production 字段：npm install --production
	安装指定包：npm install <package_name> 默认安装最新版本，如果当前项目有 package.json 文件，下载包时会下载这个文件中指定的版本；如果想要安装指定版本，
可以在库名称后加 @版本号：如 npm install antd@2.13.11
	npm install <package_name> --save 将安装这个包最新的版本并添加包名和版本号到 package.json的 dependencies中
	npm install <package_name> --save-dev 将安装这个包最新的版本并添加包名和版本号到 package.json的 devDependencies中
	npm outdated 查看项目依赖包的当前版本号、声明版本号和最新版本号
	npm update <package-name> 更新指定包到最新版本（如果package.json提供了版本规则，则在规则内更新）； npm update 更新项目所有依赖包
	npm uninstall <package-name> 卸载指定包（npm uninstall --save lodash 删除依赖包的同时移除 package.json 中对它的依赖）
	npm install -g <package-name> 全局安装指定包
	npm ls -g --depth=0 查看安装在全局第一层的包
	全局安装权限不足解决方案：
		1、sudo npm install -g <package-name> 
		2、sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share} //修改npm安装目录权限为当前用户
	npm outdated -g --depth=0 查看全局安装的包的版本信息，npm update -g <package>更新指定的包；npm update -g更新全局所有包
	npm uninstall -g <package> 卸载全局安装的指定包
	npm run 是 npm run-script 的缩写，npm run 会创建一个Shell，执行指定的命令，并临时将node_modules/.bin加入PATH 变量，这意味着本地模块可以直接运行。
	npm 可以直接运行 package.json 中 scripts 指定的脚本（命令）：npm run build
	直接运行 npm run 会列出当前项目的 package.json 中 scripts 属性下的所有脚本命令
	npm info <package-name> 可以查看指定包的信息
	npm adduser 用于在npmjs.com注册一个用户
	npm home <package-name>命令可以打开指定模块的主页； 
	npm repo <package-name>命令则是打开指定模块的代码仓库。
	npm prune 可以检查出当前项目的 node_modules目录中，没有在 package.json里提到的模块;prune:修剪
	npm publish 发布当前项目  npm publish --tag beta 发布beta版
	npm init --scope=<yourscope> 只有npm的付费用户才能发布私有模块
	安装babel：npm install --save-dev babel-cli@6 babel-preset-es2015@6
	cnpm 支持 npm 除了 publish 之外的所有命令
	修改下载仓库为淘宝镜像：npm config set registry http://registry.npm.taobao.org/
	换回原来官方的仓库地址：npm config set registry https://registry.npmjs.org/
	安装cnpm：npm install -g cnpm --registry=https://registry.npm.taobao.org
	npm config ls 查看 npm 配置
	修改本地全局安装位置：npm config set prefix "E:\\zhangweei\\js-repo\\npm-repo" 	默认位置是C:\Users\Administrator\AppData\Roaming\npm
还需要修改环境变量path（用户环境变量path）：path ：E:\zhangweei\js-repo\npm-repo\
全局安装的包会被下载到d:\js-repo\npm-repo\node_modules\下。
	执行npm config set prefix "D:\Program Files(×86)\nodejs\node_global" 后npm命令失效，需要删除用户主目录下的.npmrc文件
	




























	
	