														CSS参考
	CSS：层叠样式表 (Cascading Style Sheets)
	样式定义如何显示 HTML 元素，样式通常存储在样式表中，样式表可以在html文件中编写，也可以在单独的样式表文件中编写后引入html文件，
外部样式表可以方便的复用和替换，修改一个样式表文件就可以改变站点中所有的页面的外观。外部样式表通常存储在 CSS 文件中，多个样式定义可层叠为一。
	HTML 3.2 时代使用字体标签和颜色属性表现标签的外观，W3C在HTML 4.0中引入了CSS，主要目的是实现内容与表现的分离。


	CSS基础语法：
	通常所说的层叠样式表指的是一组CSS规则构成的集合。
	一条CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:
		p {color:red;text-align:center;}
	选择器可以是需要改变样式的 HTML 元素，也可以是元素的某些属性如id、class等。
	每条声明由一个属性和一个值组成。属性是需要设置的样式属性，如color。每个属性有一个值。属性和值被冒号分开。声明之间使用分号分割。
	在声明中每行只描述一个属性，可以让CSS可读性更强：
		p {
			color:red;
			text-align:center;
		}
	CSS注释以 "/*" 开始, 以 "*/" 结束：
		/*这是个注释*/
		p {
			text-align:center;
			/*这是另一个注释*/
			color:black;
			font-family:arial;
		}


	id 和 class 选择器：
	id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。通常情况下页面(站点所有页面)内部某个特定id只应该属于一个HTML元素，CSS 中 id 选择器以
"#" 来定义。注：id属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。
		#para1 {color:red;text-align:center;}
	class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。class 选择器在HTML中以class属性表示, 在 CSS 中，
类选择器以一个点"."号显示。注：class属性的第一个字符不能使用数字，它无法在 Mozilla 或 Firefox 中起作用。
		.center {color:red;text-align:center;}


	插入样式表的三种方式:
	外部样式表
	页面使用 <link> 标签引用外部css文件：
		<head>
			<link rel="stylesheet" type="text/css" href="mystyle.css">
		</head>
	外部css文件中直接书写CSS 规则，不要在属性值与单位之间留有空格
		hr {color:sienna;}
		p {margin-left:20px;}
		body {background-image:url("/images/back40.gif");}

	内部样式表
	使用 <style> 标签在文档头部定义内部样式表：
		<head>
			<style>
				hr {color:sienna;}
				p {margin-left:20px;}
				body {background-image:url("images/back40.gif");}
			</style>
		</head>

	内联样式，元素使用style属性。style 属性可以包含任何 CSS 属性：
		<p style="color:sienna;margin-left:20px">这是一个段落。</p>

	多重样式：如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来，不同样式表中重复定义的属性的优先级：
		内联样式 > 内部样式 >外部样式 > 浏览器默认样式
	实际上，如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式，可见样式表中样式的应用是根据声明顺序（加载顺序）来的。更准确地说，
选择器具有优先级，浏览器根据选择器的优先级决定元素的样式：
		通用选择器（*）< 元素(类型)选择器 < 类选择器 < 属性选择器 < 伪类 < ID 选择器 < 内联样式

	选择器具体权重：
	内联样式表的权值最高 1000； ID 选择器的权值为 100； Class 类选择器的权值为 10； HTML 标签选择器的权值为 1
	当 !important 规则被应用在一个样式声明中时,该样式声明会覆盖CSS中任何其他的声明, 无论它处在声明列表中的哪里,使用 !important 不是一个好习惯，
因为它改变了样式表本来的级联规则，从而使其难以调试。只在需要覆盖全站或外部 css（例如引用的 ExtJs 或者 YUI ）的特定页面中使用 !important:
		p {color:red !important;}

	CSS 优先级法则总结：
		A 选择器都有一个权值，权值越大越优先；
		B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置；
		C 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；
		D 继承的CSS 样式不如后来指定的CSS 样式；
		E 在同一组属性设置中标有“!important”规则的优先级最大


	CSS 背景属性
	CSS 背景属性用于定义HTML元素的背景,属性包括：background-color; background-image; background-repeat; background-attachment; background-position
		body {background-color:#b0c4de;}
	CSS中，颜色值通常以以下方式定义: ① 十六进制 - 如："#ff0000"；② RGB - 如："rgb(255,0,0)"；③ 颜色名称 - 如："red"
		body {background-image:url('paper.gif');}
	默认情况下 background-image 属性会在页面的水平或者垂直方向平铺。指定平铺方向：
		body{
			background-image:url('gradient2.png');
			background-repeat:repeat-x/repeat-y/no-repeat;
		}
	使用background-position 属性改变图像在背景中的位置:
		body{
			background-image:url('img_tree.png');
			background-repeat:no-repeat;
			background-position:right top;
		}
	固定/随页面滚动背景图片位置：(inherit 指定background-attachment的设置应该从父元素继承)
		body{
			background-image:url('smiley.gif');
			background-repeat:no-repeat;
			background-attachment:fixed/scroll;
		}
	使用简写属性 "background"代替上面的属性：
		body {background:#ffffff url('img_tree.png') no-repeat right top;}
	当使用简写属性时，属性值需要按以下顺序书写:background-color、background-image、background-repeat、background-attachment、background-position
以上属性无需全部使用，可以按照页面的实际需要使用。
	浅墨蓝色：#5d9ab2		浅亮蓝色：#d0f0f6


	CSS文本样式：
	设置颜色：
		<style>
			body {color:red;} /*body及子元素内的文本的文本颜色*/
			h1 {color:#00ff00;} /*将覆盖body中设置的文本颜色*/
			p.ex {color:rgb(0,0,255);}
		</style>
	设置文本的水平对齐方式：
		<style>
			h1 {text-align:center;}
			p.date {text-align:right;}
			p.main {text-align:justify;}
		</style>
	text-align设置为"justify"，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。
	设置或删除文本的装饰：(不建议强调指出不是链接的文本(使用underline装饰文本)，因为这常常混淆用户)
		<style>
			h1 {text-decoration:overline;}
			h2 {text-decoration:line-through;}
			h3 {text-decoration:underline;}
			h4 {text-decoration:none}
		</style>
	指定文本的第一行的缩进：
		p {text-indent:50px;}
	增加或减少字符之间的空间：(字母之间和中文的字之间的距离)
		<style>
			h1 {letter-spacing:10px;}
			h2 {letter-spacing:-3px;}
		</style>
	指定段落内行之间的空间：
		<style>
			p.small {line-height:70%;}
			p.big {line-height:200%;}
		</style>
	改变元素的文本方向：
		div.ex1 {direction:rtl;} /*文本的字符将从右向左显示，无文本水平对齐样式设置时会从页面右侧开始(符号如*等不会遵循这个规则，
所以可能出现奇怪的文本展示)*/
		<div class="ex1">一些文本。从右到左的书写方向菜鸟1*。</div>
		页面显示					。*一些文本。从右到左的书写方向菜鸟1
		这里如果进行复制，复制的文本还是原来的文本顺序。
	文本镜像显示：
		div{
			direction:rtl;
			unicode-bidi:bidi-override;
		}
		文本：Override text direction.		显示：.noitcerid txet edirrevO
	改变单词之间的空白空间：
		p{word-spacing:30px;}
	禁用一个元素内的文字环绕，浏览器默认会忽略(不渲染)文本间的空白，使用pre可以显示空白，使用nowrap去掉自动换行，
pre-wrap用于保留空白符序列，但是正常地进行换行。pre-line会合并空白符序列为一个空白符，同时保留换行符。
		p{white-space:nowrap/pre/pre-wrap/pre-line;}
	设置一个元素的垂直对齐方式:
		img.top {vertical-align:text-top/top/middle/bottom/text-bottom/-12px/-120%;}
		top表示 把元素的顶端与行中最高元素的顶端对齐；text-top表示把元素的顶端与父元素字体的顶端对齐
		bottom表示 把元素的底端与行中最低的元素的底端对齐。
	设置文本阴影效果：
		h1 {text-shadow:2px 2px #FF0000;} /*先左右后上下*/
	设置单词大小写转换：
		<style>
			p.uppercase {text-transform:uppercase;}
			p.lowercase {text-transform:lowercase;}
			p.capitalize {text-transform:capitalize;} /*单词首字母大写*/
		</style>


	CSS字体：
	几种字体类型：
		Serif：衬线体，衬线(serif)指的是笔画边缘的装饰部分。网页设计中常用的衬线体有Times New Roman和Georgia。中文中的宋体也是衬线体。
		Sans-serif：无衬线体，网页设计中常用的非衬线体有Arial、Verdana、Tahoma、Helivetica、Calibri等。
		Monospace：等宽字体，事实上只针对西文字体，Monospace字体中i和m具有相同宽带。
		此外还有手写体、符号体等非主流字体。
	font-family 属性设置文本的字体系列：
		p{font-family:"Times New Roman", Times, serif;}
		如果浏览器不支持第一种字体，他将尝试下一种字体
	font-style设置字体样式：
		<style>
			p.normal {font-style:normal;}
			p.italic {font-style:italic;} /*以斜体字显示的文字*/
			p.oblique {font-style:oblique;} /*文字向一边倾斜（和斜体非常类似，但不太支持）*/
		</style>
	font-size 属性设置文本的大小:字体大小的值可以是绝对或相对的大小。如果不指定一个字体的大小，默认大小和普通文本段落一样，是16像素（16px=1em）。
		h1 {font-size:40px;} /*使用像素*/ 
		h1 {font-size:2.5em;} /* 使用em：2.5em*16=40px */ 
		<style> /*使用这种设置可以保证所有浏览器显示的字体大小一样*/
			body {font-size:100%;}
			h1 {font-size:2.5em;}
			h2 {font-size:1.875em;}
			p {font-size:0.875em;}
		</style>
	font-weight 设置字体的加粗：
		p.light {font-weight:lighter/bold/900;}
	font-variant 显示小型大写字母的字体:所有小写字母转换为大写，单词首字母将放大显示
		p.small{font-variant:small-caps/normal;}
	使用font属性代替上面的属性：(font-size和font-family的值是必需的)
		p{font:italic bold 12px/30px Georgia,serif;}


	CSS链接样式
	链接的样式，可以用任何CSS属性（如颜色，字体，背景等）
	四个链接状态：a:link - 正常，未访问过的链接; a:visited - 用户已访问过的链接; a:hover - 当用户鼠标放在链接上时; a:active - 链接被点击的那一刻
		<style>
			a:link {color:#000000;}      /* 未访问链接*/
			a:visited {color:#00FF00;}  /* 已访问链接 */
			a:hover {color:#FF00FF;}  /* 鼠标移动到链接上 */
			a:active {color:#0000FF;}  /* 鼠标点击时 */
		</style>
	注：a:hover 必须跟在 a:link 和 a:visited后面,a:active 必须跟在 a:hover后面


	CSS列表属性
	对于无序列表，浏览器默认添加标记是实心圆，有序列表默认标记是数字1、2、3...
		ul.a {list-style-type:circle/square/upper-roman/lower-alpha/cjk-ideographic;} /*circle:空心圆; cjk-ideographic:一、二...*/
		ul.b {list-style-image:url('sqpurple.gif');} /*使用图片作为列表标记，这在所有浏览器中显示并不相同，IE和Opera显示图像标记比火狐，
Chrome和Safari更高一点点，可以使用下来的样式解决这个问题：*/
			ul.b{
				list-style-type:none;
				padding:0px;
				margin:0px;
			}
			ul.b li{
				background-image:url(sqpurple.gif);
				background-repeat:no-repeat;
				background-position:0px 5px; 
				padding-left:14px;
			}
	简写模式：
		ul.c {list-style:circle url("sqpurple.gif");}	
	设置标记的位置：
		ul {list-style-position: inside/outside}


	CSS表格样式属性：
	为表格添加边框：(这里需要写出table的子元素，说明table的边框不会被子元素继承)
		table,th,td {border:1px solid black;}
	设置表格的边框被折叠成一个单一的边框或隔开：(这里只需要在table上设置border-collapse属性)
		table {border-collapse:collapse;}
		注： 如果没有指定 !DOCTYPE border-collapse 属性在 IE8 及更早 IE 版本中是不起作用的。
	设置表格宽、行高、文本对齐：
		table {width:100%;text-align:right;}
		tr {height:50px;}
		th {text-align:center;}
		td {vertical-align:bottom;}
	设置表格内部元素的边距等：
		th,td {padding:15px;}
	表格名称<caption>的位置：
		caption {caption-side:bottom;}


	CSS 盒子模型
	盒子模型将元素及周围空间分为：边距，边框，填充，和实际内容 四个部分
	指定一个CSS元素的宽度和高度属性时，只是设置了内容区域的宽度和高度。
	设置盒子模型四个部分的像素：盒子模型总宽带为450px.
		div {
			background-color: lightgrey;
			width: 300px;
			border: 25px solid green;
			padding: 25px;
			margin: 25px;
		}
	注： IE5和IE6的呈现不遵循这个模式，不过现在不用再考虑这样古老的浏览器了。


	CSS 边框属性
	设置边框的样式：
		p {
			border-style:none/dotted/dashed/solid/double/inset;/* inset: 嵌入边框*/
			border-width:5px;
			border-color:red;
		} 
	单独设置各边：
		p{
			border-top-style:dotted;
			border-right-style:solid;
			border-bottom-style:dotted;
			border-left-style:solid;
		}
	使用border-style设置各个边：(border-width、border-color也可以这样用)
		p{ border-style: dotted solid dashed double; } /*这里可以设置4个值，按顺序分别是上右下左，如果设置3个值，顺序就是上(右左)下，也可以是2个值和一个值*/
	使用border实现简写：(border-bottom、border-left、border-right、border-top也可以这样用)
		p {border:5px solid red;}
	border-spacing 属性设置相邻单元格的边框间的距离（仅用于"边框分离"模式）。

	CSS 轮廓：
	轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。CSS outline 属性规定元素轮廓的样式、颜色和宽度。
		p{
			border:3px solid red;
			outline:green solid thick;
		}
	也可以单独使用outline-color、outline-style、outline-width属性
	outline不会增加元素的width和height，但是会占据元素边框外的空间

	外边距 margin：
		p {	margin-top:100px; margin-bottom:2cm; margin-right:50px; margin-left:50px;} /*这里可以使用厘米cm作为单位*/
	简写：
		p {margin: 100px 50px}
	使用%： 
		p {margin: 5%} /*这里取到的是body的width的5%*/

	填充 padding：(也称为 内边距)
		p {	padding-top:100px; padding-bottom:2cm; padding-right:50px; padding-left:50px;} /*这里可以使用厘米cm作为单位*/
	简写：
		p {padding: 100px 50px}
	使用%： 
		p {padding: 5%} /*这里取到的是body的width的5%*/

	分组选择器，每个选择器用逗号分隔：
		h1,h2,p {color:green;}
	嵌套选择器，包括选择器指向的元素内部元素的选择器的复合选择器 和 具有class、id或其他属性的元素复合选择器
		.marked p{ }: 为所有 class="marked" 元素内的 p 元素指定一个样式。
		p.marked{ }: 为所有 class="marked" 的 p 元素指定一个样式。


	CSS 尺寸 (Dimension)
	设置元素的宽和高可以使用元素的width和height属性，但是如果使用了样式属性：height:auto; 设置的元素的height属性就不会生效了。
	设置元素高：img.big{height:120px/50%;} /* 这里的50%是指body的height的50%*/
	使用百分比高度，层级关系：浏览器窗口->HTML->body->子元素，后面的元素的高度是相对于前面的元素，所以通常需要把html和body的height设为100%。
	设置最大高度：p {max-height:50px; background-color:yellow;} /* 如果最大高度不能容纳内容，内容将溢出到下方的元素，但是不会挤压下方
的元素，而是出现在下方元素的背景中 */
	设置最小高度：p {min-height:50px; background-color:yellow;}
	行高：line-height:50%; 这里的50%指的是当前元素的字体的大小的50%，行高的增加或减少对应元素的content部分的高度，与填充padding无关。

	display属性设置一个元素应如何显示，visibility属性指定一个元素应可见还是隐藏。
	隐藏一个元素可以通过把display属性设置为"none"，或把visibility属性设置为"hidden"。但是请注意，这两种方法会产生不同的结果。
visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。
	display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。浏览器中查看页面源码还是可以看到这个元素的
	块元素是一个元素，占用了全部宽度，在前后都是换行符。块元素的例子：<p>、<div>
	内联元素只需要必要的宽度，不强制换行。<span>、<a> 内联元素无法修改width、height(修改不会产生效果)
	可以更改内联元素和块元素，反之亦然，可以使页面看起来是以一种特定的方式组合，并仍然遵循web标准。
	列表项水平显示：li {display:inline/inline-block;}
		inline-block -- 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性
	span作为块级元素：span {display:block;}
	visibility 属性，通常其值被设置成 visible 或 hidden。另外一个不常用的值是collapse，Chrome下普通元素的表现和display:none一样，
table相关元素的表现比较独特，元素在页面上隐藏不显示，不占据table内空间（不影响表格布局），但也不像display:none那样无法使用调试
工具查看其盒子模型。新版本Firefox和Chrome表现类似。
		tr.collapse {visibility:collapse;}


	CSS定位
	CSS使用position 属性指定元素的定位类型。position 属性有五个值：static、relative、fixed、absolute、sticky
	HTML元素默认使用static定位，即没有定位，遵循正常的文档流。
	使用fixed 定位：元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动
		p.pos_fixed{
			position:fixed;
			top:30px;
			right:5px;
		}
		Fixed 定位在 IE7 和 IE8 下需要描述 !DOCTYPE 才能支持。Fixed定位使元素的位置与文档流无关，因此不占据空间。所以Fixed定位的元素
可以和其他元素重叠。
	使用relative 定位：相对元素在文档流中的正常位置定位
		h2.rel_pos{
			position:relative;
			left:-20px;
			top:-50px;
		}
	relative定位移动元素后，元素原来占用的空间还是会保留给该元素，即后面的元素不会流到这个位置。
	元素移动后的位置不在文档流内部，所以可以和其他元素重合。
	使用absolute 定位：绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>
		h2{
			position:absolute;
			left:100px;
			top:150px;
		}
		absolute 定位使元素的位置与文档流无关，因此不占据空间。所以absolute 定位的元素可以和其他元素重叠。absolute 定位的元素的
正常位置将会被后面的元素占据。
		使用relative定位的元素作为使用absolute定位的元素的父元素时，父元素不感知absolute定位子元素的定位信息，也就是说盒子模型中
父元素的数据不包含该子元素。如果相对定位元素的子元素全是绝对定位，那么父元素的height就为0，这样后面的元素就会流到父元素的位置。
		绝对定位的元素可以在css中使用clip属性裁剪元素的形状：
		div{
			width:100px;
			height:100px;
			position:absolute;
			clip:rect(0px,50px,50px,0px); /**rect(...)是唯一合法语法*/
			background-color:red;
		}
	使用sticky 定位：粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。它的行为就像 
position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。
		div.sticky {
			position: -webkit-sticky; /* Safari */
			position: sticky;
			top: 5px; /* 阈值为距窗口top边5px*/
			background-color: green;
			border: 2px solid #4CAF50;
		}
	可以理解成：sticky定位是一种fixed定位的变形，它的固定定位坐标和元素的当前坐标一致，但是它的固定定位坐标有一个阈值，超过这个
值就把定位坐标固定为这个阈值。
	注：Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix。
	使用z-index:
		img{
			position:absolute;
			left:0px;
			top:0px;
			z-index:-1;
		}
		这里img元素使用绝对定位流到了文档的开始，正常情况下它会挡住文档开始部分的内容，使用z-index:-1;将它移到了该位置内容的后一层。
	
	使用overflow属性创建一个滚动条，适应一个元素的内容超出指定的区域的容量。
		div.ex1 {
			background-color: lightblue;
			width: 110px;
			hei?ght: 110px;
			overflow: scroll/hidden/auto/visible;
		}
	使用scroll总是显示滚动条框；hidden不显示滚动条框，超出的内容将被隐藏；auto只有内容超出区域才显示滚动条；visible不显示滚动条框，
超出部分将显示，但不会挤占后面的元素位置。
	设置光标样式：
		<span style="cursor:auto/crosshair/default/help/move/n-resize/e-resize/ne-resize/nw-resize/pointer/progress/text/wait">xxxxxxx</span><br>


	CSS浮动
	浮动会使元素向左或向右移动，其周围的元素也会重新排列。
		img{float:right/left/none/inherit;}
	浮动只能是水平方向上向左或向右，当浮动元素的边缘碰到容器的边缘或其他浮动元素的外边缘时就停止浮动。
	如果浮动元素的前面的元素是行级元素，前面的行级元素依然会被浮动元素取代位置，但是块级元素因为后面自带一个换行符，所以不会受后面的
浮动元素影响。
	浮动元素后面的元素总是会随着浮动元素的移动调整位置。浮动非常灵活，多个元素浮动时，其中的某个元素无法占据它应该流到的位置时，后面
合适的元素(可以不是浮动元素)会流到这个位置。
	使用clear 属性指定元素两侧不能出现浮动元素。这个属性对行级元素没有作用。
		p {clear:both/left/right;}
	如果浮动的元素外层元素没有设置换行样式或不包含其他元素，则浮动会传递给外层元素。


	元素的水平对齐
	元素类型：
		文本/行内元素/行内块级元素：在父元素上添加：text-align: center; 可以让子元素（后代元素）实现水平居中。
		单个块级元素：在元素上添加：margin: auto;可以实现当前元素水平居中（上下margin设为auto等效于设为0，起作用的是左右margin为auto）。
这种方法还需要设置子元素的width小于父元素的width。
		多个块级元素：在每个块级元素上添加：display: inline-block;然后在公共父元素上添加：text-align: center，可以实现水平居中。
	为某个元素使用 text-align: center; 会导致其所有的后代行级元素受到影响。
		<div class="d1">
			<div class="d11">
				<div class="d11n">d111</div>
				<div class="d11n">d112</div>
			</div>
		</div>
		<style>
			.d1{
				border:20px solid #4CAF50;
				height: 400px;
				width: 80%;
			}
			.d11{
				border:16px solid #CCAF50;
				width: 50%;
				margin: auto;
				text-align: center;
			}
			.d11n{
				border:12px solid #CCA0F0;
				width: 60%;
				display: inline-block;
				margin-top: 2px;
			}
			
		</style>
	绝对定位也可以实现水平对齐，在父元素上添加：position: relative; 在子元素上添加：position: absolute; left: 50%; 
transform: translateX(-50%); width: 50%; 实现子元素的水平居中。但是绝对定位元素会被从正常流中删除，并且能够交叠元素，
所以对多个子元素应用绝对定位实现水平居中就需要单独设置每个元素的top。
		<div class="d2">
			<div class="d2n">
				d21
			</div>
			<div class="d2n">
				d22
			</div>
		</div>
		<style>
			.d2{
				border:20px solid #9c4646;
				height: 400px;
				width: 80%;
				position: relative;
			}
			.d2n{
				border:16px solid #CCAF50;
				position: absolute;
				left: 50%;
				transform: translateX(-50%);
				width: 50%;
				margin-top: 2px;			
			}
		</style
	使用flex：在父元素上添加：display: flex; justify-content: center; 父元素设置display为flex后，父元素的子级div将表现为行级元素，
justify-content: center 使子级div 水平居中。
		<div class="d12">
			<div class="d12n">d121</div>
			<div class="d12n">d122</div>
		</div>
		<style>
			.d12{
				margin-top: 2px;
				border:16px solid #CCA0F0;
				width: 50%;
				display: flex;
				justify-content: center;
			}
			.d12n{
				border:12px solid #15dada;
				margin-right: 2px;
			}
		</style>
	注：justify-content属性需要ie11才支持。
	
	当使用 position或float 属性时，请始终设置 !DOCTYPE 声明，这是因为IE9之前的IE使用position，float时总是表现很奇怪（会在右侧增加
17px 的外边距）。
	还可以使用 float 属性来对齐元素：
		.right {
			float: right;
			width: 300px;
			border: 3px solid #73AD21;
			padding: 10px;
		}
	如果子元素的高度大于父元素，且子元素设置了浮动，那么子元素将溢出，可以在父元素上添加 overflow: auto; 来解决子元素溢出的问题
	
	
	元素的垂直居中对齐
	对于文本节点或行内元素(display: inline)，在其父元素上设置line-height等于height的值（需要知道具体的height的数值）可以实现垂直居中
对齐。
		<div class="d3">
			d31
			<span>d31x</span>
			<div class="d31">
				d31z
				d31z
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				line-height: 400px;
			}
			.d31{
				border:16px solid #CCA0F0;
				display: inline;
			}
		</style>
	具有多行文本并且知道具体的行数，可以设置父元素的 line-height 等于 height/行数：
		<div class="d31">
			d31z
			d31z
		</div>
		<style>
			.d31{
				border:16px solid #CCA0F0;
				heigth:50%;//这里实际值为父元素 height 的 50% 即 200px
				width: 30px;
				line-height: 100px;//这里 100px 由 height(200px)/行数(2)得到
			}
		</style>
	图片的垂直对齐：
		<div class="d3">
			<img class="d31" src="../media/venglobe.gif">
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				line-height: 400px;
				font-size: 0;
			}
			.d31{
				border:16px solid #CCA0F0;
				vertical-align: middle;
			}
		</style>
	单个块级元素垂直对齐：
	使用tabel-cell实现:
		<div class="d3">
			<div class="d31">
				d31
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;	
				display: table-cell;//table-cell模式下，width、height设置百分比值不起作用
				vertical-align: middle;
			}
			.d31{
				border:16px solid #CCA0F0;
			}
		</style>
	使用绝对定位实现：
		<div class="d3">
			<div class="d31">
				d31
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				position: relative;
			}
			.d31{
				border:16px solid #CCA0F0;
				position: absolute;
				height: 50%;
				top:50%;
				transform: translateY(-50%);
			}
		</style>
	使用 flex 实现：
		<div class="d3">
			<div class="d31">
				d31
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				display: flex;
				align-items: center;
			}
			.d31{
				border:16px solid #CCA0F0;
				height: 50%;
			}
		</style>
	多个块级元素垂直对齐，使用 flex 实现：
		<div class="d3">
			<div class="d31">
				d31
			</div>
			<div class="d31">
				d31z
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				display: flex;
				align-items: center;
			}
			.d31{
				border:16px solid #CCA0F0;
				height: 50%;
			}
		</style>
	组合使用绝对定位和 line-height：
		<div class="d3">
			<div>
				<div class="d31">
					d31
				</div>
				<div class="d31">
					d31z
				</div>
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				position:relative;
			}
			.d3 > div{
				position: absolute;
				top: 50%;
				transform: translateY(-50%);
				width: 50%;
			}
			.d31{
				border:16px solid #CCA0F0;
				height: 25%;
				line-height: 100px;
			}
		</style>

	水平垂直居中：
	使用绝对定位：
		<div class="d3">
			<div>
				<div class="d31">
					d31
				</div>
				<div class="d31">
					d31z
				</div>
			</div>
		</div>
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				position:relative;
			}
			.d3 > div{
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%,-50%);
				width: 50%;
			}
			.d31{
				border:16px solid #CCA0F0;
				height: 25%;
				line-height: 100px;
				text-align: center;
			}
		</style>
		另一种绝对定位实现：(当top和bottom都为0，margin-top&bottom为auto时，上下的margin会自动适应垂直居中后的高度。)
			.d3 > div{
				position: absolute;
				margin: auto;
				top: 0;
				bottom: 0;
				left: 0;
				right: 0;
				width: 50%;
				height: 50%;
			}
	行内元素可以设置父元素 height 等于 line-height，设置父元素 text-align 为 center，如果是行内块元素(display: inline-block)，需要设置子元素的
vertical-align 为 middle.
		<style>
			.d3{
				border:20px solid #ff8f46;
				height: 400px;
				width: 80%;
				line-height: 400px;
				text-align: center;
			}
			.d31{
				border:16px solid #CCA0F0;
				height: 50%;
				display: inline-block;
				vertical-align: middle;
			}
		</style>
	使用table-cell实现：
		<div class="d4">
			<div class="d41">
				<div class="d411">
					d411
				</div>
			</div>
		</div>
		<style>
			.d4{
				display: table;
				border:20px solid #558ffc;
				width: 80%;
				height: 400px;
			}
			.d41{			
				height: 400px;
				width: 80%;
				display: table-cell;
				vertical-align: middle;
				text-align: center;
			}
			.d411{
				border:16px solid #aa5070;
				height: 50%;
				width: 50%;
				margin: 0 auto;
				line-height: 168px;
			}
		</style>
	设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效。此时其 width 不是相对于其父元素。
	使用 button 元素作为父元素，可以利用其默认样式实现垂直水平居中：(ie下点击会有凹陷的效果)
		<div class="d5">
			<button class="b1">
				<div class="d51">
					d51
				</div>
			</button>
		</div>
		<style>
			.d5{			
				border:20px solid #aa8f0c;
				width: 80%;
				height: 400px;
			}
			.d5 .b1{
				outline: none;
				border: none;
				background-color: #fff;
				height: 400px;
				width: 100%;
			}
			.d51{
				border: 16px solid #8546a1;
				display: inline-block;
			}
		</style>


	组合选择器：
	在 CSS3 中包含了四种组合方式:
		后代选择器(以空格分隔)		div p {background-color:yellow;}	/*p可以不是div的子元素*/
		子元素选择器(以大于号分隔） div>p {background-color:yellow;}	/*p是div的子元素*/
		相邻兄弟选择器（以加号分隔）div+p {background-color:yellow;}	/*p是div的后一个元素，p和div有相同的父元素，p只有一个*/
		普通兄弟选择器（以破折号分隔） div~p {background-color:yellow;}	/*p是div的同级元素，p和div有相同的父元素，p可以有多个*/


	CSS伪类用来添加一些选择器的特殊效果。
	伪类的语法：selector:pseudo-class {property:value;}
	伪类选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。
	伪元素是对元素中的特定内容进行修饰，它并不是根据元素的状态来决定样式，而是和存在的元素类似，比如选择指定元素的第一个字母，它
本身只是基于元素的抽象，并不存在于文档中，所以叫伪元素。
	链接的不同状态使用的就是伪类，称为 anchor伪类
		a:hover {color:#FF00FF;} 如果a上设置了id或class，也可以使用id或class选择器：#id1/.class1 : hover {...}
		a:link
		a:visited 
		a:active
	:first-child 伪元素：选择父元素的第一个子元素，在IE8的之前版本必须声明<!DOCTYPE> ，这样 :first-child 才能生效。
		p:first-child{color:blue;}			/* 选择器匹配作为任何元素的第一个子元素的 <p> 元素。p必须是父元素的第一个子元素 */
		p > i:first-child {color:blue;}  	/* 选择器匹配所有<p>元素的第一个 <i> 元素。i元素必须是p元素的第一个子元素 */
		p:first-child i {color:blue;}   	/* 选择器匹配所有作为父元素的第一个子元素的 <p> 元素中的所有 后代<i> 元素 */
	:first-of-type伪元素：选择特定类型的第一个元素。
		p:first-of-type {background:#ff0000;} /*所有容器内第一个p元素*/
		div > p:first-of-type {background:#ff0000;} /*所有div元素的第一个p元素*/
	:lang 伪类：为不同的语言定义特殊的规则， 仅当 !DOCTYPE 已经声明时 IE8 支持 :lang.
		<p>Some text <q lang="no">A quote in a paragraph</q> Some text.</p>
		q:lang(no) {quotes: "~" "~";}
		页面：Some text ~A quote in a paragraph~ Some text.  /*这里的~是不存在文本中的，无法用鼠标选中*/
	:checked 伪类：选择所有选中的表单元素
		input:checked {
			height: 50px;
			width: 50px;
		}
		form元素内type为radio的input，具有相同的name的input为一组，只能选中其中的一个。
	:disabled 伪类：选择所有禁用/启用的表单元素
		input[type="text"]:disabled/enabled {
			background:#dddddd/#ffff00;
		}
	:empty伪类：选择每个没有任何子级的元素（包括文本节点）。
		p:empty {background:#ff0000;}
	:in-range伪类：用于标签的值在指定区间值时显示的样式。
		<input type="number" min="5" max="10" value="7" />
		input:in-range {border:2px solid yellow;}
		注意： :in-range 选择器只作用于能指定区间值的元素，例如 input 元素中的 min 和 max 属性。ie不支持这个伪类
	:invalid伪类：用于在表单元素中的值是非法时设置指定样式。
		<input type="email" value="supportEmail" />
		input:invalid {border:2px solid red;}
	:valid伪类： 选择在表单元素的值符合指定条件的元素。
		:valid 选择器只作用于能指定区间值的元素，例如 input 元素中的 min 和 max 属性，及正确的 email 字段, 合法的数字字段等。
	:last-child伪元素： 选择最后一个子元素
		p:last-child {background:#ff0000;}	/* 选择作为任何元素的最后一个子元素的p元素 */
	:last-of-type伪元素：选择特定类型的最后一个元素。
		p:last-of-type {background:#ff0000;}	/* 选择所有容器内最后一个p元素 */
		div > p:last-of-type {background:#ff0000;}	/* 选择父元素是div的最后一个p元素 */
		last-child选择的是 作为父元素的最后一个子元素的x元素，而last-of-type选择的是父元素的最后一个x子元素
	:not(selector)伪元素： 匹配每个元素不是指定的元素/选择器
		:not(p/#id1) {background:#ff0000;}
	:nth-child(n)伪元素： 匹配父元素中的第 n 个子元素，子元素是选择器中的类型，n的计数与类型无关。
		p:nth-child(2) {background:#ff0000;} /* 如果p元素前面有一个非p元素，这里2指的就是第一个p元素*/
	:nth-last-of-child(n)伪元素： nth-child(n)的倒数版本。
	:nth-of-type(n)伪元素：类似于nth-child(n)伪元素，不同的是它的n的计数是从选择器中的类型开始的。
	:nth-last-of-type(n)伪元素： :nth-of-type(n)伪元素的倒数版本
	:only-of-type伪元素：匹配容器中选择器类型只有一个同级元素的元素。
		<div>
			<p>This is a paragraph.</p>
			<article>
				<p>This is a paragraph.</p>
			</article>
		</div>
		p:only-of-type {background:#ff0000;} /*两个p都符合条件*/
	:only-child伪元素：匹配属于父元素中唯一子元素的元素。
		p:only-child {background:#ff0000;}
	:optional伪类：在表单元素是可选项时设置指定样式。
		input:optional {background-color: yellow;}
		表单元素中如果没有特别设置 required 属性即为 optional 属性。optional 选择器只适用于表单元素: input, select 和 textarea。
	:required伪类：选择有"required"属性指定的元素
	:out-of-range伪类：用于标签的值在指定区间之外时显示的样式。
		input:out-of-range {border:2px solid red;}
		:out-of-range 选择器只作用于能指定区间之外值的元素，例如 input 元素中的 min 和 max 属性。
	:read-only伪类： 用于选取设置了 "readonly" 属性的元素。
		input:read-only {background-color: yellow;}
		目前，大多数浏览器, :read-only 选择器适用于 input 和 textarea 元素，如果其他元素设置 "readonly" 属性这个伪类不能起作用。
	:read-write伪类：选择没有只读属性的元素
	:root伪元素：匹配文档的根元素。HTML中就是<html>
	:target伪类：选择当前活动的target元素。
		<p><a href="#news1">Jump to New content 1</a></p>
		<p><a href="#news2">Jump to New content 2</a></p>

		<p>Click on the links above and the :target selector highlight the current active HTML anchor.</p>

		<p id="news1"><b>New content 1...</b></p>
		<p id="news2"><b>New content 2...</b></p>
		
		:target {
			border: 2px solid #D4D4D4;
			background-color: #e5eecc;
		}
		这种链接到某个元素的链接称为锚，使用目标元素的id选择器作为href的值。
	:focus伪类：选择具有焦点的元素。 :focus选择器接受键盘事件或其他用户输入的元素。
		input:focus{background-color:yellow;}
		:focus 选择器选择器在IE8中必须声明<!DOCTYPE> .
	:first-letter伪元素：用来指定元素第一个字母的样式。注: "first-letter" 选择器仅适用于在块级元素中.
		p:first-letter { 
			font-size:200%;
			color:#8A2BE2;
		}
	:first-line伪元素：用来指定选择器第一行的样式。
		p:first-line { background-color:yellow;}
	:before伪元素： 用于向选定的元素前插入内容，可以看成选择了指定元素前的空白。使用content 属性来指定要插入的内容。
		<p>My name is Donald</p>
		<p>I live in Ducksburg</p>
		p:before{content:"Read this -";}
		添加的内容不能使用鼠标选中，before在IE8中运行，必须声明 <!DOCTYPE> 。
	:after伪元素： 用于向选定的元素之后插入内容。使用content 属性来指定要插入的内容。
		p:after{content:"- 注意我";}
	
	
	css实例
	对导航栏应用CSS样式：查看CSS实例文档相关部分。
	设置悬停下拉效果：查看CSS实例文档相关部分。
	设置这种效果的典型用法：容器使用relative定位，需要悬停显示的部分使用absolute定位。
	设置提示工具(Tooltip)：查看CSS实例文档相关部分。
	设置透明效果：opacity越大，越不透明
		img{
			opacity:0.4;
			filter:alpha(opacity=40); /* 适用 IE8 及其更早版本 */
		}
		img:hover{
			opacity:1.0;
			filter:alpha(opacity=100); /* 适用 IE8 及其更早版本 */
		}


	使用图像拼合
	将页面需要用到的多个图片保存在一个大图片文件中，下载这个图片后使用拼合
技术显示需要的部分：
		img.home{
			width:46px;
			height:44px;
			background:url(img_navsprites.gif) 0 0;
		}
		img.next {
			width: 43px;
			height: 44px;
			background: url(img_navsprites.gif) -91px 0;
		}


	media属性
	@media 规则允许在相同样式表为不同媒体设置不同的样式。
		@media screen
		{
			p.test {font-family:verdana,sans-serif;font-size:20px;}
		}
		@media print
		{
			p.test {font-family:times,serif;font-size:40px;}
		}
		@media screen,print
		{
			p.test {font-weight:bold;}
		}
	@media的其他值包括：all、handheld、braille、tty、tv等
	
	
	属性选择器
	HTML元素的属性不只是id和class，其他属性也可以用作选择器：
		[title] {color:blue;}  //选择所有具有title属性的元素
		[title=runoob] {color:blue;}  //选择所有title属性值为runoob的元素
		[title~=hello] { color:blue; }  //选择title属性值包含hello(空格作为分隔符)的元素
		[title|=hello]{	color:blue;}    //选择title属性值包含hello(-作为分隔符且hello是第一个单词)的元素
		[title*=flower] {...}			//选择title属性值包含flower的元素(只要title值中具有flower这个字符串就匹配)
		a[src$=".pdf"] {...}			//选择src属性值以.pdf结尾的a元素
		[lang^=en]{...}					//选择lang属性值以en开始的元素
		input[type="text"] {background-color:yellow;}

	去掉input默认样式
		<input type="search" style="outline:none;">
		兼容：
		input{  
			background:none;  
			outline:none;  
			border:0px;
		}























