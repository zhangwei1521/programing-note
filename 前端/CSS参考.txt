														CSS参考
	CSS：层叠样式表 (Cascading Style Sheets)
	样式定义如何显示 HTML 元素，样式通常存储在样式表中，样式表可以在html文件中编写，也可以在单独的样式表文件中编写后引入html文件，
外部样式表可以方便的复用和替换，修改一个样式表文件就可以改变站点中所有的页面的外观。外部样式表通常存储在 CSS 文件中，多个样式定义可层叠为一。
	HTML 3.2 时代使用字体标签和颜色属性表现标签的外观，W3C在HTML 4.0中引入了CSS，主要目的是实现内容与表现的分离。
	
	CSS基础语法：
	通常所说的层叠样式表指的是一组CSS规则构成的集合。
	一条CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:
		p {color:red;text-align:center;}
	选择器可以是需要改变样式的 HTML 元素，也可以是元素的某些属性如id、class等。
	每条声明由一个属性和一个值组成。属性是需要设置的样式属性，如color。每个属性有一个值。属性和值被冒号分开。声明之间使用分号分割。
	在声明中每行只描述一个属性，可以让CSS可读性更强：
		p {
			color:red;
			text-align:center;
		}
	CSS注释以 "/*" 开始, 以 "*/" 结束：
		/*这是个注释*/
		p {
			text-align:center;
			/*这是另一个注释*/
			color:black;
			font-family:arial;
		}
		
	id 和 class 选择器：
	id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。通常情况下页面(站点所有页面)内部某个特定id只应该属于一个HTML元素，CSS 中 id 选择器以
"#" 来定义。注：id属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。
		#para1 {color:red;text-align:center;}
	class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。class 选择器在HTML中以class属性表示, 在 CSS 中，
类选择器以一个点"."号显示。注：class属性的第一个字符不能使用数字，它无法在 Mozilla 或 Firefox 中起作用。
		.center {color:red;text-align:center;}
	
	插入样式表的三种方式:
	外部样式表,页面使用 <link> 标签引用外部css文件：
			<head>
				<link rel="stylesheet" type="text/css" href="mystyle.css">
			</head>
		外部css文件中直接书写CSS 规则，不要在属性值与单位之间留有空格
			hr {color:sienna;}
			p {margin-left:20px;}
			body {background-image:url("/images/back40.gif");}
	内部样式表，使用 <style> 标签在文档头部定义内部样式表：
		<head>
			<style>
				hr {color:sienna;}
				p {margin-left:20px;}
				body {background-image:url("images/back40.gif");}
			</style>
		</head>
	内联样式，元素使用style属性。style 属性可以包含任何 CSS 属性：
		<p style="color:sienna;margin-left:20px">这是一个段落。</p>
	多重样式：如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来，不同样式表中重复定义的属性的优先级：
内联样式 > 内部样式 >外部样式 > 浏览器默认样式
实际上，如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式，可见样式表中样式的应用是根据声明顺序（加载顺序）来的。
更准确地说，选择器具有优先级，浏览器根据选择器的优先级决定元素的样式：
	通用选择器（*）< 元素(类型)选择器 < 类选择器 < 属性选择器 < 伪类 < ID 选择器 < 内联样式
选择器具体权重：
内联样式表的权值最高 1000； ID 选择器的权值为 100； Class 类选择器的权值为 10； HTML 标签选择器的权值为 1
	当 !important 规则被应用在一个样式声明中时,该样式声明会覆盖CSS中任何其他的声明, 无论它处在声明列表中的哪里,使用 !important 不是一个好习惯，
因为它改变了样式表本来的级联规则，从而使其难以调试。只在需要覆盖全站或外部 css（例如引用的 ExtJs 或者 YUI ）的特定页面中使用 !important

CSS 优先级法则总结：
 A 选择器都有一个权值，权值越大越优先；
 B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置；
 C 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；
 D 继承的CSS 样式不如后来指定的CSS 样式；
 E 在同一组属性设置中标有“!important”规则的优先级最大

	CSS 背景属性
	CSS 背景属性用于定义HTML元素的背景,属性包括：background-color; background-image; background-repeat; background-attachment; background-position
		body {background-color:#b0c4de;}
	CSS中，颜色值通常以以下方式定义: ① 十六进制 - 如："#ff0000"；② RGB - 如："rgb(255,0,0)"；③ 颜色名称 - 如："red"
		body {background-image:url('paper.gif');}
	默认情况下 background-image 属性会在页面的水平或者垂直方向平铺。指定平铺方向：
		body{
			background-image:url('gradient2.png');
			background-repeat:repeat-x/repeat-y/no-repeat;
		}
	使用background-position 属性改变图像在背景中的位置:
		body{
			background-image:url('img_tree.png');
			background-repeat:no-repeat;
			background-position:right top;
		}
	固定/随页面滚动背景图片位置：(inherit 指定background-attachment的设置应该从父元素继承)
		body{
			background-image:url('smiley.gif');
			background-repeat:no-repeat;
			background-attachment:fixed/scroll;
		}
	使用简写属性 "background"代替上面的属性：
		body {background:#ffffff url('img_tree.png') no-repeat right top;}
	当使用简写属性时，属性值需要按以下顺序书写:background-color、background-image、background-repeat、background-attachment、background-position
以上属性无需全部使用，可以按照页面的实际需要使用。
	浅墨蓝色：#5d9ab2		浅亮蓝色：#d0f0f6
	
	CSS文本样式：
	设置颜色：
		<style>
			body {color:red;} /*body及子元素内的文本的文本颜色*/
			h1 {color:#00ff00;} /*将覆盖body中设置的文本颜色*/
			p.ex {color:rgb(0,0,255);}
		</style>
	设置文本的水平对齐方式：
		<style>
			h1 {text-align:center;}
			p.date {text-align:right;}
			p.main {text-align:justify;}
		</style>
	text-align设置为"justify"，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。
	设置或删除文本的装饰：(不建议强调指出不是链接的文本(使用underline装饰文本)，因为这常常混淆用户)
		<style>
			h1 {text-decoration:overline;}
			h2 {text-decoration:line-through;}
			h3 {text-decoration:underline;}
			h4 {text-decoration:none}
		</style>
	指定文本的第一行的缩进：
		p {text-indent:50px;}
	增加或减少字符之间的空间：(字母之间和中文的字之间的距离)
		<style>
			h1 {letter-spacing:10px;}
			h2 {letter-spacing:-3px;}
		</style>
	指定段落内行之间的空间：
		<style>
			p.small {line-height:70%;}
			p.big {line-height:200%;}
		</style>
	改变元素的文本方向：
		div.ex1 {direction:rtl;} /*文本的字符将从右向左显示，无文本水平对齐样式设置时会从页面右侧开始(符号如*等不会遵循这个规则，
所以可能出现奇怪的文本展示)*/
		<div class="ex1">一些文本。从右到左的书写方向菜鸟1*。</div>
		页面显示					。*一些文本。从右到左的书写方向菜鸟1
		这里如果进行复制，复制的文本还是原来的文本顺序。
	文本镜像显示：
		div{
			direction:rtl;
			unicode-bidi:bidi-override;
		}
		文本：Override text direction.		显示：.noitcerid txet edirrevO
	改变单词之间的空白空间：
		p{word-spacing:30px;}
	禁用一个元素内的文字环绕，浏览器默认会忽略(不渲染)文本间的空白，使用pre可以显示空白，使用nowrap去掉自动换行，
pre-wrap用于保留空白符序列，但是正常地进行换行。pre-line会合并空白符序列为一个空白符，同时保留换行符。
		p{white-space:nowrap/pre/pre-wrap/pre-line;}
	设置一个元素的垂直对齐方式:
		img.top {vertical-align:text-top/top/middle/bottom/text-bottom/-12px/-120%;}
		top表示 把元素的顶端与行中最高元素的顶端对齐；text-top表示把元素的顶端与父元素字体的顶端对齐
		bottom表示 把元素的底端与行中最低的元素的底端对齐。
	设置文本阴影效果：
		h1 {text-shadow:2px 2px #FF0000;} /*先左右后上下*/
	设置单词大小写转换：
		<style>
			p.uppercase {text-transform:uppercase;}
			p.lowercase {text-transform:lowercase;}
			p.capitalize {text-transform:capitalize;} /*单词首字母大写*/
		</style>
	
	CSS字体：
	几种字体类型：
		Serif：衬线体，衬线(serif)指的是笔画边缘的装饰部分。网页设计中常用的衬线体有Times New Roman和Georgia。中文中的宋体也是衬线体。
		Sans-serif：无衬线体，网页设计中常用的非衬线体有Arial、Verdana、Tahoma、Helivetica、Calibri等。
		Monospace：等宽字体，事实上只针对西文字体，Monospace字体中i和m具有相同宽带。
		此外还有手写体、符号体等非主流字体。
	font-family 属性设置文本的字体系列：
		p{font-family:"Times New Roman", Times, serif;}
		如果浏览器不支持第一种字体，他将尝试下一种字体
	font-style设置字体样式：
		<style>
			p.normal {font-style:normal;}
			p.italic {font-style:italic;} /*以斜体字显示的文字*/
			p.oblique {font-style:oblique;} /*文字向一边倾斜（和斜体非常类似，但不太支持）*/
		</style>
	font-size 属性设置文本的大小:字体大小的值可以是绝对或相对的大小。如果不指定一个字体的大小，默认大小和普通文本段落一样，是16像素（16px=1em）。
		h1 {font-size:40px;} /*使用像素*/ 
		h1 {font-size:2.5em;} /* 使用em：2.5em*16=40px */ 
		<style> /*使用这种设置可以保证所有浏览器显示的字体大小一样*/
			body {font-size:100%;}
			h1 {font-size:2.5em;}
			h2 {font-size:1.875em;}
			p {font-size:0.875em;}
		</style>
	font-weight 设置字体的加粗：
		p.light {font-weight:lighter/bold/900;}
	font-variant 显示小型大写字母的字体:所有小写字母转换为大写，单词首字母将放大显示
		p.small{font-variant:small-caps/normal;}
	使用font属性代替上面的属性：(font-size和font-family的值是必需的)
		p{font:italic bold 12px/30px Georgia,serif;}
		
	CSS链接样式
	链接的样式，可以用任何CSS属性（如颜色，字体，背景等）
	四个链接状态：a:link - 正常，未访问过的链接; a:visited - 用户已访问过的链接; a:hover - 当用户鼠标放在链接上时; a:active - 链接被点击的那一刻
		<style>
			a:link {color:#000000;}      /* 未访问链接*/
			a:visited {color:#00FF00;}  /* 已访问链接 */
			a:hover {color:#FF00FF;}  /* 鼠标移动到链接上 */
			a:active {color:#0000FF;}  /* 鼠标点击时 */
		</style>
	注：a:hover 必须跟在 a:link 和 a:visited后面,a:active 必须跟在 a:hover后面

	CSS列表属性
	对于无序列表，浏览器默认添加标记是实心圆，有序列表默认标记是数字1、2、3...
		ul.a {list-style-type:circle/square/upper-roman/lower-alpha/cjk-ideographic;} /*circle:空心圆; cjk-ideographic:一、二...*/
		ul.b {list-style-image:url('sqpurple.gif');} /*使用图片作为列表标记，这在所有浏览器中显示并不相同，IE和Opera显示图像标记比火狐，
Chrome和Safari更高一点点，可以使用下来的样式解决这个问题：*/
			ul.b{
				list-style-type:none;
				padding:0px;
				margin:0px;
			}
			ul.b li{
				background-image:url(sqpurple.gif);
				background-repeat:no-repeat;
				background-position:0px 5px; 
				padding-left:14px;
			}
	简写模式：ul.c {list-style:circle url("sqpurple.gif");}	
	设置标记的位置：ul {list-style-position: inside/outside}
	
	CSS表格样式属性：
	为表格添加边框：(这里需要写出table的子元素，说明table的边框不会被子元素继承)
		table,th,td {border:1px solid black;}
	设置表格的边框被折叠成一个单一的边框或隔开：(这里只需要在table上设置border-collapse属性)
		table {border-collapse:collapse;}
		注： 如果没有指定 !DOCTYPE border-collapse 属性在 IE8 及更早 IE 版本中是不起作用的。
	设置表格宽、行高、文本对齐：
		table {width:100%;text-align:right;}
		tr {height:50px;}
		th {text-align:center;}
		td {vertical-align:bottom;}
	设置表格内部元素的边距等：
		th,td {padding:15px;}
	表格名称<caption>的位置：
		caption {caption-side:bottom;}
	
	CSS 盒子模型
	盒子模型将元素及周围空间分为：边距，边框，填充，和实际内容 四个部分
	指定一个CSS元素的宽度和高度属性时，只是设置了内容区域的宽度和高度。
	设置盒子模型四个部分的像素：盒子模型总宽带为450px.
		div {
			background-color: lightgrey;
			width: 300px;
			border: 25px solid green;
			padding: 25px;
			margin: 25px;
		}
	注： IE5和IE6的呈现不遵循这个模式，不过现在不用再考虑这样古老的浏览器了。
	
	CSS 边框属性
	设置边框的样式：
		p {
			border-style:none/dotted/dashed/solid/double/inset;/* inset: 嵌入边框*/
			border-width:5px;
			border-color:red;
		} 
	单独设置各边：
		p{
			border-top-style:dotted;
			border-right-style:solid;
			border-bottom-style:dotted;
			border-left-style:solid;
		}
	使用border-style设置各个边：(border-width、border-color也可以这样用)
		p{ border-style: dotted solid dashed double; } /*这里可以设置4个值，按顺序分别是上右下左，如果设置3个值，顺序就是上(右左)下，
也可以是2个值和一个值*/
	使用border实现简写：(border-bottom、border-left、border-right、border-top也可以这样用)
		p {border:5px solid red;}
	
	CSS 轮廓：
	轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。CSS outline 属性规定元素轮廓的样式、颜色和宽度。
		p{
			border:3px solid red;
			outline:green solid thick;
		}
	也可以单独使用outline-color、outline-style、outline-width属性
	outline不会增加元素的width和height，但是会占据元素边框外的空间
	
	外边距 margin：
		p {	margin-top:100px; margin-bottom:2cm; margin-right:50px; margin-left:50px;} /*这里可以使用厘米cm作为单位*/
	简写：p {margin: 100px, 50px}
	使用%： p {margin: 5%} /*这里取到的是body的width的5%*/
	
	填充 padding：(也称为 内边距)
		p {	padding-top:100px; padding-bottom:2cm; padding-right:50px; padding-left:50px;} /*这里可以使用厘米cm作为单位*/
	简写：p {padding: 100px, 50px}
	使用%： p {padding: 5%} /*这里取到的是body的width的5%*/
	
	分组选择器，每个选择器用逗号分隔：
		h1,h2,p {color:green;}
	嵌套选择器，包括选择器指向的元素内部元素的选择器的复合选择器 和 具有class、id或其他属性的元素复合选择器
		.marked p{ }: 为所有 class="marked" 元素内的 p 元素指定一个样式。
		p.marked{ }: 为所有 class="marked" 的 p 元素指定一个样式。
	
	CSS 尺寸 (Dimension)
	设置元素的宽和高可以使用元素的width和height属性，但是如果使用了样式属性：height:auto; 设置的元素的height属性就不会生效了。
	设置元素高：img.big{height:120px/50%;} /* 这里的50%是指body的height的50% */
	设置最大高度：p {max-height:50px; background-color:yellow;} /* 如果最大高度不能容纳内容，内容将溢出到下方的元素，但是不会挤压下方
的元素，而是出现在下方元素的背景中 */
	设置最小高度：p {min-height:50px; background-color:yellow;}
	行高：line-height:50%; 这里的50%指的是当前元素的字体的大小的50%，行高的增加或减少对应元素的content部分的高度，与填充padding无关。
	
	display属性设置一个元素应如何显示，visibility属性指定一个元素应可见还是隐藏。
	隐藏一个元素可以通过把display属性设置为"none"，或把visibility属性设置为"hidden"。但是请注意，这两种方法会产生不同的结果。
visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。
	display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。浏览器中查看页面源码还是可以看到这个元素的
	块元素是一个元素，占用了全部宽度，在前后都是换行符。块元素的例子：<p>、<div>
	内联元素只需要必要的宽度，不强制换行。<span>、<a> 内联元素无法修改width、height(修改不会产生效果)
	可以更改内联元素和块元素，反之亦然，可以使页面看起来是以一种特定的方式组合，并仍然遵循web标准。
	列表项水平显示：li {display:inline/inline-block;}
		inline-block -- 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性
	span作为块级元素：span {display:block;}
	visibility 属性，通常其值被设置成 visible 或 hidden。另外一个不常用的值是collapse，Chrome下普通元素的表现和display:none一样，
table相关元素的表现比较独特，元素在页面上隐藏不显示，不占据table内空间（不影响表格布局），但也不像display:none那样无法使用调试
工具查看其盒子模型。新版本Firefox和Chrome表现类似。
		tr.collapse {visibility:collapse;}
	
	CSS定位
	CSS使用position 属性指定元素的定位类型。position 属性有五个值：static、relative、fixed、absolute、sticky
	HTML元素默认使用static定位，即没有定位，遵循正常的文档流。
	使用fixed 定位：元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动
		p.pos_fixed{
			position:fixed;
			top:30px;
			right:5px;
		}
		Fixed 定位在 IE7 和 IE8 下需要描述 !DOCTYPE 才能支持。Fixed定位使元素的位置与文档流无关，因此不占据空间。所以Fixed定位的元素
可以和其他元素重叠。
	使用relative 定位：相对元素在文档流中的正常位置定位
		h2.rel_pos{
			position:relative;
			left:-20px;
			top:-50px;
		}
	relative定位移动元素后，元素原来占用的空间还是会保留给该元素，即后面的元素不会流到这个位置。
	元素移动后的位置不在文档流内部，所以可以和其他元素重合。
	使用absolute 定位：绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>
		h2{
			position:absolute;
			left:100px;
			top:150px;
		}
		absolute 定位使元素的位置与文档流无关，因此不占据空间。所以absolute 定位的元素可以和其他元素重叠。absolute 定位的元素的
正常位置将会被后面的元素占据。
		使用relative定位的元素作为使用absolute定位的元素的父元素时，父元素不感知absolute定位子元素的定位信息，也就是说盒子模型中
父元素的数据不包含该子元素。如果绝对定位父元素的子元素全是相对定位，那么父元素的height就为0，这是后面的元素就会流到父元素的位置。
		绝对定位的元素可以在css中使用clip属性裁剪元素的形状：
		div{
			width:100px;
			height:100px;
			position:absolute;
			clip:rect(0px,50px,50px,0px); /**rect(...)是唯一合法语法*/
			background-color:red;
		}
	使用sticky 定位：粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。它的行为就像 
position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。
		div.sticky {
			position: -webkit-sticky; /* Safari */
			position: sticky;
			top: 5px; /* 阈值为距窗口top边5px*/
			background-color: green;
			border: 2px solid #4CAF50;
		}
		可以理解成：sticky定位是一种fixed定位的变形，它的固定定位坐标和元素的当前坐标一致，但是它的固定定位坐标有一个阈值，超过这个
值就把定位坐标固定为这个阈值。
		Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix。
	使用z-index:
		img{
			position:absolute;
			left:0px;
			top:0px;
			z-index:-1;
		}
		这里img元素使用绝对定位流到了文档的开始，正常情况下它会挡住文档开始部分的内容，使用z-index:-1;将它移到了该位置内容的后一层。
	
	使用overflow属性创建一个滚动条，适应一个元素的内容超出指定的区域的容量。
		div.ex1 {
			background-color: lightblue;
			width: 110px;
			hei?ght: 110px;
			overflow: scroll/hidden/auto/visible;
		}
		使用scroll总是显示滚动条框；hidden不显示滚动条框，超出的内容将被隐藏；auto只有内容超出区域才显示滚动条；visible不显示滚动条框，
超出部分将显示，但不会挤占后面的元素位置。
	设置光标样式：
<span style="cursor:auto/crosshair/default/help/move/n-resize/e-resize/ne-resize/nw-resize/pointer/progress/text/wait">xxxxxxx</span><br>












































