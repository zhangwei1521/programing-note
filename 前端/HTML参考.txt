										HTML参考
	HTML是一种用于创建网页的标准标记语言。它的全称是 HyperText Markup Languag。标记语言不同于编程
语言，它由一套标签组成，标签通常用来描述文档。标签可能只有标签符号和属性，也可能包含其他标签或文本。
HTML 使用标记标签来描述网页。
	HTML元素和HTML标签基本上是同义词。但是有时候HTML标签可能表达的只是标签符号，而不包括内部的内容。
	浏览器根据HTML文档使用的标签来决定如何展现HTML页面的内容给用户。
	HTML最早发布于1991年，几个重要版本时间线如下：
		HTML1.0		1991
		HTML+		1993
		HTML2.0		1995
		HTML3.2		1997
		HTML4.01	1999
		XHTML 1.0	2000
		HTML5		2014
	HTML文档由于历史原因有两种后缀名：htm和html。两种后缀名没有区别，都可以使用。
	一个标准的HTML文档模板：
		<!DOCTYPE html>
		<html>
			<head>
				<meta charset="utf-8">
				<title>菜鸟教程(runoob.com)</title>
			</head>
			<body>
				<h1>我的第一个标题</h1>
				<p>我的第一个段落。</p>
			</body>
		</html>
	<!DOCTYPE html> 声明 HTML 版本为HTML5。
	<html> 元素是 HTML 页面的根元素，head> 元素包含了文档的元（meta）数据，如 <meta charset="utf-8">
定义网页编码格式为 utf-8。目前在大部分浏览器中，直接出现中文会出现中文乱码的情况，这时候就需要在头部将
字符声明为 UTF-8。
	<title> 元素描述了文档的标题，<body> 元素包含了可见的页面内容，<h1> 元素定义一个大标题，<p> 元素
定义一个段落。
	HTML 元素通常以开始标签起始，以结束标签终止。某些 HTML 元素具有空内容，称为空元素。空元素在开始标
签中进行关闭。
	在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。即使 <br> 在所有浏览器中都是有效的，
但使用 <br /> 其实是更长远的保障。HTML 标签对大小写不敏感：<P> 等同于 <p>。
	HTML元素使用属性保存附加信息。属性总是以名称/值对的形式出现，比如：name="value"，属性值应该始终被
包括在引号内。属性和属性值对大小写不敏感，但是新版本的 (X)HTML 要求使用小写属性。class 属性可以设置多个：
<p class="c1 c2">xxx</p>
	HTML标题标签只用于标题。不要仅仅是为了生成粗体或大号的文本而使用标题。
	<h1> 定义最大的标题。 <h6> 定义最小的标题。应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），
再其次是 h3，以此类推。
	<hr/> 标签在 HTML 页面中创建水平线。
	HTML注释：<!-- 这是一个注释 -->
	其实<h1>到<h6>字体大小与<font size="1">到<font size="6">字体大小逆序对应，比如1号字体对应6号标题，
2号字体对应5号标题。
	浏览器会自动地在</p> 段落元素的前后添加空行。（</p> 是块级元素）
	在HTML中，无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。所有连续的空格或空行都会被算
作一个空格。
	早期的HTML使用格式化标签对文本的显示进行修饰，如<b>用于文本加粗，现在通常不建议再使用了，修饰文本应
该使用CSS来实现。但是另外一些具有语义的标签还是需要保留使用的，如<em>用于定义着重文字，<strong>用于加重
语气。<sub>用于下标，<sup>用于上标。<del>定义删除字，<ins>定义插入字。<code>用于定义计算机代码,<pre>用于
定义预格式文本，<val>用于定义变量。<abbr>定义缩写,<q>定义短的引用语,<cite>定义引用、引证。
	
	HTML5标准文档实例：HTML5-std-demo1.html
	HTML元素/标签 说明：
	文档声明：
		<!DOCTYPE> 位于文档中的最前面的位置，处于 <html> 标签之前。实际上，它不是一个 HTML 标签，只是用
				来告知 Web 浏览器页面使用了哪种 HTML 版本。在 HTML 4.01 中，<!DOCTYPE> 声明需引用 DTD （文档类型声明），
				因为HTML 4.01 是基于 SGML，HTML5 不是基于 SGML，因此不要求引用 DTD。在HTML5文档中不应该再使用已经废弃的
				标签，但是如果使用了，浏览器还是可以识别出它们。
	根元素：
		<html> 元素 表示一个HTML文档的根（顶级元素）,所有其他元素必须是此元素的后代。
	文档元数据：
		<base> 元素 指定用于一个文档中包含的所有相对URL的基本URL。一份文档中只能有一个<base>元素。
				<base href="file:///E:/zhangweei/es5-demo/media/" target="_self">
		<head> 元素 规定文档相关的配置信息（元数据），包括文档的标题，引用的文档样式和脚本等。
		<link> 元素规定了外部资源与当前文档的关系。这个元素可用来为导航定义一个关系框架。这个元素最常于链
			   接样式表。
		<meta> 元素表示那些不能由其它HTML元相关元素(<base>,<link>,<script>,<style>或<title>)之一表示的任何
			   元数据信息.
		<style>元素包含文档的样式信息或者文档的部分内容。默认情况下，该标签的样式信息通常是CSS的格式。
		<title> 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包
			   含的任何标签都不会被解释。
	分区根元素：
		<body> 元素表示文档的内容。
	内容分区:
		<address> 元素可以让作者为它最近的<article>或者<body>祖先元素提供联系信息。在后一种情况下，它应用于整
				  个文档。
		<article> 元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构.
		<aside>   元素表示一个和其余页面内容几乎无关的部分，被认为是独立于文档内容的一部分并且可以被单独的拆分
				  出来而不会使整体受影响。其通常表现为侧边栏或者嵌入内容。可以用于文档相关的其他文档，广告等。
		<footer>  元素表示最近一个章节内容或者根节点（sectioning root ）元素的页脚。一个页脚通常包含该章节作者、
				  版权数据或者与文档相关的链接等信息。
		<header>  元素用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。
		<h1>–<h6> 标题(Heading)元素呈现了六个不同的级别的标题，<h1> 级别最高，而 <h6> 级别最低。一个标题元素能
				  简要描述该节的主题。
		<main>	  元素呈现了文档<body>或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的
				  主要功能部分的内容组成。这部分内容在文档中应当是独一无二的。
		<nav>	  描绘一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表.适合用来
				  将一些热门的链接放入导航栏。
		<section> 表示文档中的一个区域（或节），比如，内容中的一个专题组，一般来说会有包含一个标题（heading）。
				  一般通过是否包含一个标题 (<h1>-<h6> element) 作为子节点 来 辨识每一个<section>。
		<hgroup>  代表一个段的标题，这个元素可能还不太成熟(浏览器支持还需要完善)。
				  <hgroup>
					  <h1>Main title</h1>
					  <h2>Secondary title</h2>
				  </hgroup>
	文本内容：
		<blockquote> 元素，代表其中的文字是引用内容。若引文来源于网络，则可以将原内容的出处 URL地址设置到 cite属性上。
					 可以通过 <cite> 元素以文本的形式给出引文的出处。
		<dl> 		 标签定义一个定义/描述列表。<dl> 标签与 <dt>(定义项目/名字)和 <dd>(描述每一个项目/名字)一起使用。
					 用于一些术语的定义等。
						<dl>
							<dt>Beast of Bodmin</dt>
							<dd>A large feline inhabiting Bodmin Moor.</dd>

							<dt>Morgawr</dt>
							<dd>A sea serpent.</dd>

							<dt>Owlman</dt>
							<dd>A giant owl-like creature.</dd>
						</dl>
		<dir> 	 表示一个目录，也就是文件名称的集合。HTML5不再支持。 HTML 4.01 已废弃。
		<div> 	 一个通用型的流内容容器，它在语义上不代表任何特定类型的内容
		<figure> 规定独立的流内容（图像、图表、照片、代码等等）。<figure> 元素的内容应该与主内容相关，同时元素的位置
				 相对于主内容是独立的。如果被删除，则不应对文档流产生影响。用于页面美化添加图片。
		<figcaption> 标签为 <figure>元素定义标题。<figcaption> 元素应该被置于 <figure>元素的第一个或最后一个子元素的位置。
		<hr> 	 表示段落级元素之间的主题转换，在早期HTML中，它是一个水平线。现在它在可视化浏览器中仍然表现为水平线，
				 但目前被定义为语义上的，而不是表现层面上。
		<li>	 用于表示列表里的条目。它必须被包含在一个父元素里：一个有顺序的列表(<ol>)，一个无顺序的列表(<ul>)，或者一
				 个菜单 (<menu>)。在菜单或者无顺序的列表里，列表条目通常用点排列显示。在有顺序的列表里，列表条目通常是在左
				 边有按升序排列计数的显示，例如数字或者字母。
		<p>		 表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本
		<pre>    表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如
				 空格和换行符）都会显示出来。(紧跟在 <pre> 开始标签后的换行符会被省略)
	内联语义文本：
		<a> 	 元素(或锚元素)可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。
		<abbr>	 元素代表缩写，并可选择提供一个完整的描述。
		<b>		 用于吸引读者的注意到该元素的内容上，原称：提醒注意（Bring Attention To）元素，但是后来被称为粗体（Boldface）元素，
				 现在通常不建议使用这个元素。
		<bdi>    (双向隔离元素) 隔离可能以不同方向进行格式化的外部文本。用于不知道是从什么方向嵌入的文本，如来自于数据库的文本
				（有起数据库的文本方向），一般不设置dir属性，由浏览器决定嵌入的文本的方向。
		<bdo>    (HTML双向覆盖元素)用于覆盖当前文本的朝向，它使得字符按给定的方向(dir属性指定)排列。
		<br> 	 在文本中生成一个换行（回车）符号。
		<cite>   表示一个作品的引用
		<data>   将一个指定内容和机器可读的翻译联系在一起。value属性指定元素内容对应的机器可读的翻译。
		<dfn>    用来定义一个定义项目。作为一个短语标签使用：
					<p><dfn id="def-internet">The Internet</dfn> is a global ....</p>
				 与dl、dt配合使用：
				 <dl>
					<dt>
						<dfn>
						  <abbr title="World-Wide Web">WWW</abbr>
						</dfn>
					</dt>
				    <dd>The World-Wide Web (WWW) xxx ...</dd>
				 </dl>
		<em>	 标记出需要用户着重阅读的内容， <em> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。
		<i> 	 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语等。它的内容通常以斜体显示。
		<kbd>	 用于表示用户输入，它将产生一个行内元素，以浏览器的默认monospace字体显示。
		<mark> 	 标签代表突出显示的文字,例如可以为了标记特定上下文中的文本而使用这个标签.它可以用来显示搜索引擎搜索后关键词。
		<q>		 表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本,长引用使用<blockquote>
		<ruby>   用来展示东亚文字注音或字符注释。
		<rp> 	 用于为那些不能使用 <ruby> 元素展示 ruby 注解的浏览器，提供随后的圆括号。浏览器支持ruby元素就不会显示括号
					<ruby>
					  漢 <rp>(</rp><rt>Kan</rt><rp>)</rp>
					  字 <rp>(</rp><rt>ji</rt><rp>)</rp>
					</ruby>
		<rt>     用于包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 <ruby> 元素中使用。
		<s>      使用删除线来渲染文本。使用 <s> 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 <s> ；
				 为此，提倡使用 <del> 和 <ins> 元素。
		<samp>   用于标识计算机程序输出，通常使用浏览器缺省的 monotype 字体
		<small>  使文本的字体变小一号,在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。
		<span>   短语内容的通用行内容器，并没有任何特殊语义。
		<strong> 表示文本十分重要，一般用粗体显示。
		<sub>    定义一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。
		<sup>    定义一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。
		<time>   用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。
					<p>The concert took place on <time datetime="2001-05-15 19:00">May 15</time>.</p>
		<tt>     定义打字机文本。HTML5 不支持 <tt> 标签。可以使用<code>代替或用css来实现等宽字体样式。
		<u>      使文本在其内容的基线下的一行呈现下划线。在HTML5中, 此元素表示具有未标注的文本跨度，显示渲染，非文本注释，例如将
				 文本标记为中文文本中的专有名称, 或 将文本标记为拼写错误。 <u> 在 HTML 4 和 XHTML 1 中废弃，但是在 HTML 5 中使用
				 其它语义引入。
		<var>    表示变量的名称，或者由用户提供的值。
		<wbr>	 表示在浏览器窗口或父级窗口宽度足够的情况下，不换行；在宽度不足的情况下，在加了<wbr>处主动换行。可以看出<wbr>其实
				 没有宽度。
	媒体元素：
		<map>    与<img>、<area> 一起使用来定义一个图像映射(一个可点击的链接区域).<map>元素必需提供name属性，值必须不能为空并且不
				 能带空格。name属性不准与同文档中其他map元素的值相同，如果id属性也被添加，name属性和id属性的值必须相同。<img>使用
				 usemap属性引用<map>的name属性实现关联。
		<area>   定义图像映射内部的区域，<area> 元素始终嵌套在 <map> 标签内部。<area>使用shape属性定义链接区域形状，值可以是default,
				 rect,circle和poly,使用coords定义链接区域位置，shape为rect，coords的值为左上角和右下角坐标，shape为circle，coords
				 值为圆心坐标和半径。
				 <img src="../images/planets.gif" usemap="example-map-1" width="145" height="126" />
				 <map name="example-map-1">
					<area shape="circle" coords="124,58,8" href="another.html" />
					<area shape="default" />
				 </map>
		<audio>  用于在文档中表示音频内容。 <audio> 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者<source> 元素来进行描述；
				 浏览器将会选择最合适的一个来使用。对于不支持<audio>元素的浏览器，<audio>元素也可以作为浏览器不识别的内容加入到文档中。
				 目前，<audio> 元素支持的3种文件格式：MP3、Wav、Ogg。IE9支持audio元素，但是只支持mp3格式，Safari不支持Ogg格式。
					 <audio controls>
						<source src="horse.ogg" type="audio/ogg">
						<source src="horse.mp3" type="audio/mpeg">
						您的浏览器不支持 audio 元素。
					 </audio>
				  autoplay指定是否自动播放，controls属性表示是否显示控制组件
		<img> 	 代表文档中的一个图像。
		<video>  用于在HTML或者XHTML文档中嵌入视频内容。
					<video width="320" height="240" controls>
						<source src="movie.mp4" type="video/mp4">
						<source src="movie.ogg" type="video/ogg">
						您的浏览器不支持 video 标签。
					</video>
				 autoplay指定是否自动播放，controls属性表示是否显示控制组件。目前，<video> 元素支持三种视频格式：MP4、WebM、Ogg。
				 IE9开始支持video元素，但是只支持mp4格式。Safari不支持Ogg格式。poster属性设置一个海报帧的URL。preload属性指定用户
				 操作前的默认处理，可以是以下值：none--不缓存视频，metadata--下载元数据，auto--缓存视频，空字符串--同auto
		<source> <audio>和<video>使用<source>来指定音频/视频地址和媒体类型。
		<track>  被当作媒体元素—<audio> 和 <video>的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕。
				 属性default指定默认track，kind指定文本轨道的文本类型，如subtitles(辅助文字)、captions(音频文字)
	内嵌内容：
		<applet> 包含Java的applet。HTML5中已废弃。
		embed>   将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。
					<embed src="../media/helloworld.swf"/> <!-- 这是一段flash动画 -->
		<iframe> 表示嵌套的浏览上下文，用于将另一个HTML页面嵌入到当前页面中。HTML5、4.01可以使用name属性，XHTML中使用id属性代替name属性。
					<body>
						zzzz<br/>
						<iframe height="500" sandbox="" width="800" src="http://www.runoob.com">
						  <p>您的浏览器不支持  iframe 标签。</p>
						</iframe>
					<div>xxxx</div>
					sandbox属性对呈现在iframe框架中的内容启用一些额外的限制条件。如果是一个空字符串，将会启用所有的限制。其他
					值包括：allow-scripts、allow-forms、allow-same-origin、allow-top-navigation，也可以设置多个值用空格分开
		<object> 表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。data属性规定对象使用的资源的 URL。
					<object width="400" height="400" data="helloworld.swf" ></object>
		<param>  为<object>元素定义参数
					<object data="horse.wav">
					  <param name="autoplay" value="true">
					</object>
		<picture> 表示一个容器，用来为其内部特定的 <img> 元素提供多样的 <source> 元素。浏览器会根据当前页面（即图片所在的盒子的容器）
				  的布局以及当前浏览的设备（比如普通的屏幕和高清屏幕）去从中选择最合适的资源。此功能某些浏览器尚在开发中
					<picture>
					 <source srcset="mdn-logo.svg" type="image/svg+xml">
					 <img src="mdn-logo.png" alt="MDN">
					</picture>
	脚本标签：
		<canvas>  可被用来通过脚本（通常是JavaScript）绘制图形。
					<canvas id="test-canvas" width="200" heigth="100">
					    <p>浏览器不支持Canvas</p>
					</canvas>
					'use strict';
					var canvas = document.getElementById("test-canvas");
					if (canvas.getContext) {
						var ctx = canvas.getContext('2d');
						ctx.fillStyle='#dddddd';
						ctx.fillRect(0,0,500,300);						
					} else {
						console.log('你的浏览器不支持Canvas!');
					}
		<noscript> 如果页面上的脚本类型不受支持或者当前在浏览器中关闭了脚本，则在HTML <noscript> 元素中定义脚本未被执行时的替代内容。
		<script>  元素用于嵌入或引用可执行脚本。
	编辑标识：
		<del>	 表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。
		<ins>    定义已经被插入文档中的文本。
	表格内容:
		<table>	 元素表示表格数据 — 即通过二维数据表表示的信息。在 CSS 创建之前， HTML <table> 元素常常被用于布局页面。 
				 这种用法在 HTML 4之后不被推荐使用，并且 <table>元素 不应该 被用于此目的。
		<caption> 展示一个表格的标题，它常常作为 <table> 的第一个子元素出现，同时显示在表格内容的最前面，但是，它可以被CSS样式化，
				 所以，它可以出现在任何相对于表格的任意位置，它也不必须作为<table>的第一个子元素。
		<colgroup> 用来定义表中的列的分组。作为table的子元素，它是可选的。
				<table border="1">
				  <colgroup>
					<col span="2" style="background-color:red">  <!--前两列背景色为red，第3列背景色为yellow-->
					<col style="background-color:yellow">
				  </colgroup>
				  <tr>
					<th>ISBN</th>
					<th>Title</th>
					<th>Price</th>
				  </tr>
				  <tr>
					<td>3476896</td>
					<td>My first HTML</td>
					<td>$53</td>
				  </tr>
				  <tr>
					<td>5869207</td>
					<td>My first CSS</td>
					<td>$49</td>
				  </tr>
				</table>
		<thead> 定义一组定义表格的列头的行。<thead> 元素应该与 <tbody> 和 <tfoot> 元素结合起来使用，用来规定表格的各个部分
				（表头、主体、页脚）。通过使用这些元素，使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。当包含多
				个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。一般来说，<table>作为 <table> 
				元素的子元素，应该出现在 <caption>、<colgroup> 元素之后，<tbody>、 <tfoot> 和 <tr> 元素之前。
				<thead> 元素内部必须包含一个或者多个 <tr> 标签。在 HTML 5 中，不再支持 HTML 4.01 中 <thead> 标签的任何属性。
		<tbody> 用于组合 HTML 表格的主体内容。作为 <table> 元素的子元素，它应该出现在 <caption>、<colgroup> 和 <thead> 元素之后。
				<tbody> 元素内部必须包含一个或者多个 <tr> 标签。
		<tfoot> 用于组合 HTML 表格的页脚内容。作为 <table> 元素的子元素，它应该出现在 <caption>、<colgroup> 和 <thead> 元素之后，
				<tbody> 和 <tr> 元素之前(HTML4.01)，在HTML5中它可以出现在<tbody> 和 <tr> 之后。
		<tr>	定义表格中的一行，通常应该放在<thead>、<tbody>、<tfoot>内部，这样语义更清晰，但是也可以独立出现在<table>内部。
		<th>    定义 HTML 表格中的表头单元格。使用 colspan 和 rowspan 属性将内容横跨多个行或列。<th>中的文本默认呈现为粗体并且居中。
				<thead>
					<tr>
					  <th >Month</th>
					  <th rowspan="2">savings</th>
					</tr>
					 <tr>
					  <th>月</th>
					</tr>
				 </thead>
		<td>  	定义 HTML 表格中的标准单元格。<td>中的文本默认是普通的左对齐文本。使用 colspan 和 rowspan 属性将内容横跨多个行或列。
	表单元素：
		HTML 提供了许多可一起使用的元素，这些元素能用来创建一个用户可以填写并提交到网站或应用程序的表单。
		<form> 	用于创建供用户输入的 HTML 表单。<form> 元素包含一个或多个如下的表单元素：<input>、<textarea>、<button>、<select>、
				<option>、<optgroup>、<fieldset>、<label>
				accept-charset属性用于规定服务器可处理的表单数据字符集。通常浏览器输入表单的内容采用的编码应该是<meta charset="utf-8">
				指定的，所以accept-charset应该和这个值保持一致。
				action属性规定当提交表单时向何处发送表单数据。路径是基于当前项目根路径，也可以指定完全路径。
				enctype属性规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method="post" 的情况）
				novalidate(HTML5)属性规定提交表单时不进行验证。target属性规定在何处打开 action URL。
		<input> 用于规定用户可以在其中输入数据的输入字段。在<form> 元素中使用时，用来声明允许用户输入数据的 input 控件。可以使用 <label> 
				元素来定义 <input> 元素的标注。
				属性：accept--规定通过文件上传来提交的文件的类型(只针对type="file")。
					  alt   --定义图像输入的替代文本。 (只针对type="image")
					  autofocus--规定当页面加载时 <input> 元素应该自动获得焦点。
					  checked  --规定在页面加载时应该被预先选定的 <input> 元素。(只针对 type="checkbox" 或者 type="radio")
					  form     --规定 <input> 元素所属的一个或多个表单。
					  formaction--规定当表单提交时处理输入控件的文件的 URL。(只针对 type="submit" 和 type="image")(form没有设置action)
					  formenctype、formmethod等都是对应于form的相关属性。
					  maxlength--规定 <input> 元素中允许的最大字符数。
					  name --规定 <input> 元素的名称。
					  placeholder --规定可描述输入 <input> 字段预期值的简短的提示信息 
					  required--规定必需在提交表单之前填写输入字段。
					  src --规定显示为提交按钮的图像的 URL。 (只针对 type="image")
					  type --规定要显示的 <input> 元素的类型：button、checkbox、radio、date、datetime、email、file、image、number、password、
							 submit、tel、url、text 
					  value--指定 <input> 元素 value 的值。
		<textarea> 定义一个多行的文本输入控件。属性：
					readonly--规定文本区域为只读。
					rows--规定文本区域内可见的行数。
					cols--规定文本区域内可见的宽度。（更好的办法是使用 CSS 的 height 和 width 属性。）
		<button>   定义一个按钮。在 <button> 元素内部，可以放置内容，比如文本或图像。<input> 元素创建的按钮使用value设置显示文本
					type属性规定按钮的类型。值：button、reset、submit。请始终为 <button> 元素规定 type 属性，不同的浏览器对 <button> 
					元素的 type 属性使用不同的默认值。
		<select>   用于创建下拉列表，<select> 元素中的 <option> 标签定义了列表中的可用选项。multiple属性为 true 时，可选择多个选项。
		<option>   用于定义列表中的可用选项，通常需要使用value属性定义选择项的保存值
		<optgroup> 定义选项组：
						<label>国籍:</label>
						<select>
							<optgroup label="亚洲">
								<option value="cn">中国</option>
								<option value="jap">日本</option>
								<option value="a_oth">其他</option>
							</optgroup>
							<optgroup label="欧洲">
								<option value="en">英国</option>
								<option value="ger">德国</option>
								<option value="e_oth">其他</option>
							</optgroup>
						</select>
		<fieldset> 	用于将表单内的相关元素分组，会在相关表单元素周围绘制边框。<legend> 标签为 <fieldset> 元素定义标题。
						<fieldset>
						    <legend>connection methods:</legend>
						    telephone: <input type="tel"><br>
						    Email: <input type="email"><br>
						    Address: <input type="text">
						</fieldset>
		<label> 	用于为 input 元素定义标注（标记），它为鼠标用户改进了可用性。如果在 label 元素内点击文本，就会触发此控件。
					"for" 属性可把 label 绑定到另外一个元素。请把 "for" 属性的值设置为相关元素的 id 属性的值。
		<datalist>  定义<input>元素可能的选项列表(input可以输入非此列表中的数据)。<input> 元素使用 list属性来绑定<datalist>元素。
					IE9和Safari都不支持这个元素。
					<form action="demo-form.php" method="get" target="_self">
						<input list="browsers" name="browser">
						<datalist id="browsers">
						  <option value="Internet Explorer">
						  <option value="Firefox">
						  <option value="Chrome">
						  <option value="Opera">
						  <option value="Safari">
						</datalist>
						<input type="submit">
					</form>
		<meter> 	定义度量衡。仅用于已知最大和最小值的度量。 <meter> 不能作为一个进度条来使用， 进度条 <progress> 标签。
					<meter value="2" min="0" max="10">2 out of 10</meter><br>
					<meter value="0.6">60%</meter>
					IE 浏览器完全不支持 meter 标签。<meter> 是 HTML5 的新标签。
		<progress>  定义运行中的任务进度（进程），是 HTML5 中的新标签。IE 9 或者更早版本的 IE 浏览器不支持 <progress> 标签。
					规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式.
						<progress value="22" max="100"></progress>
		<output> 	作为计算结果输出显示(比如执行脚本的输出)，是 HTML 5 中的新标签。Internet Explorer 浏览器不支持 <output> 标签。
					<form oninput="x.value=parseInt(a.value)+parseInt(b.value)">0
					  <input type="range" id="a" value="50">100
					  +<input type="number" id="b" value="50">
					  =<output name="x" for="a b"></output>
					</form>
	交互元素：
		<details> 	描述用户可见的或者隐藏的需求的补充细节，用来供用户开启关闭的交互式控件，任何形式的内容都能被放在 <details> 里边。
					<details> 标签是 HTML5 中的新标签，目前，只有 Chrome 和 Safari 6 支持 <details> 标签。
					与 <summary> 标签配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。设置open属性可以默认打开
					隐藏的内容
					<details>
						<summary>Copyright 1999-2011.</summary>
						<p> - by Refsnes Data. All Rights Reserved.</p>
						<p>All content and graphics on this web site are the property of the company Refsnes Data.</p>
					</details>
		<summary> 	为 <details> 元素定义一个可见的标题。当用户点击标题时会显示出详细信息。它也是HTML5的新标签，现在也只有Chrome和Safari6支持
		<dialog> 	定义一个对话框、确认框或窗口，是 HTML5 中的新标签。目前，只有 Chrome 和 Safari 6 支持 <dialog> 标签。
		<menu> 		设计为定义一个命令列表或菜单，用于文本菜单，工具条和命令列表选项(设计时的想法应该是提供类似桌面应用的菜单)。HTML4.01之前引入，
					但是HTML4.01又删除了这个元素，HTML5又重新引入。但是现在所有主流浏览器都不支持这个元素。
		
















	