Unicode码指的是字符到数字的映射，0~127与ASCII码相同。
Unicode码没有定义如何存储字符；也没有限定所能映射的字符的数量上限，所以Unicod码可以扩展新增的字符。

UTF-8以及UTF-16是两种常用的根据Unicode码点编码存储的编码方式。
UTF-8的编码规则：
	1.一个字节的编码完全用于ascii码（从0-127）
	2.大于127的码点都用多字节来编码，多字节包含开头字节和后续字节
	3.开头字节以若干个1开头（长度为几就有几个1，因此只要读完开头字节就可以知道本字符共有多少个字节），后接1个0。后续字节都以10开头。
	4.从右到左，后续字节每个字节占用原码点6个位，剩余的放在开头字节。
	5.开头字节和后续字节不共享任何数据，因此utf8是自同步的。举例来说我们看到一个字节以110…开头时，我们就知道这是一个2字节的字符的开头字节。
	字符	unicode码点								UTF-8编码
$ 	U+0024	0100100							00100100	
¢	U+00A2	000 10100010					11000010 10100010	
€	U+20AC	00100000 10101100				11100010 10000010 10101100	
𤭢	U+24B62	00010 01001011 01100010			11110000 10100100 10101101 10100010	

UTF-16使用2个或者4个字节来存储字符
unicode码点小于等于65535的字符都采用2个字节存储，Unicode码点大于65535的字符需要4个字节存储。
低字节序和高字节序只是一个关于在内存中存储和读取一段字节（被称作words）的约定。
这意味着当你让计算机用UTF-16把字母A（占两个字节）存在内存中时，使用哪种字节序方案决定了你把第一个字节放在第二个字节的前面还是后面。

BOM是一个设计得很巧妙的字符，用来放在文档的开头告诉阅读器该文档的字节序。
在UTF-16中，它是通过在第一个字节放置FE FF来实现的。在不同字节序的文档中，它会被显示成FF FE或者FE FF，清楚的把这篇文档的字节序告诉了解释器。