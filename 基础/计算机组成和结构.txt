										计算机组成和结构
											第一章
	计算机是信息技术产业的产物，信息技术是操作和应用各种信息的技术。计算机引发了人类第三层文明革命：信息革命。计算机不仅
直接方便了我们的生活，也改变了我们探索新知识的方式，其它学科使用计算机技术辅助它们的研究。
	各种不同类型的计算机使用了相同的硬件技术，不同的使用硬件技术的方式。简单的分类是按照用途将计算机划分为台式机、服务器
和嵌入式计算机。
	软硬件部件对程序性能影响的分析：
		算法 						决定源程序级语句的数量以及执行I/O操作的数量
		程序设计语言和编译系统 		决定每一条源程序级的语句对应的机器指令
		I/O系统(硬件和操作系统)		决定I/O操作的执行速度
		处理器和存储器系统			决定指令的执行速度
	从应用软件到硬件是一种层次化组织的结构，计算机硬件(处理器)只能执行简单的指令，应用软件需要经过系统软件的翻译才能被
处理器执行。现在的系统软件主要是两类：操作系统和编译系统。
	操作系统是用户程序(应用程序)和硬件的接口，提供多种服务和管理功能，包括输入输出处理、内存和外存的分配管理、多个应用
程序同时执行的支持等。
	编译系统负责将高级语言编写的源程序翻译为机器指令。
	指令是计算机能识别理解的二进制位的集合，同时计算机也使用二进制位表示数据。
	汇编语言需要为每一条机器要执行的指令编写一条语句，这实际上是在强迫程序员按照机器的方式去思考。将高级语言程序翻译成
机器指令集合的可行性研究是计算机发展早期的最重要突破。
	计算机的五个经典组成部分：输入、输出、存储器(内存)、数据通路、控制器(数据通路和控制器合称为处理器)
	鼠标演进：机电式->光电式
	屏幕：早期使用光栅阴极射线管显示器，图片使用位图表示，每个像素可以只用一位二进制数表示黑白，也可以用八位表示不同的
灰度，彩色显示器可能为每一种原色使用8位，则一个像素使用24位表示。现代显示技术主要使用LED(液晶显示器)，通过活动矩阵为每
一个像素配置三个晶体管开关，调整液晶液体中棒状分子的形态，使得进入显示器的光弯曲产生不同颜色。
	计算机硬件使用光栅刷新缓冲区(帧缓冲区)保存位图。
	数据通路执行算术运算，控制器根据指令告诉数据通路、内存、输入输出执行什么操作。
	内存使用DRAM，动态随机存储器，高速缓存使用SRAM，静态随机存储器
	指令系统结构：也称系统结构，硬件和底层软件的抽象接口，包含了编写能够正常运行的机器语言程序的所有必需信息，包括：
指令、寄存器、存储器访问、I/O等。
	应用程序二进制接口(ABI)：指令集中用户指令部分和操作系统提供应用程序使用的接口。
	外部存储设备：磁盘、闪存、光盘等。
	
											第二章 指令系统
	机器语言可以类比于人类语言，一条汇编语句对应的机器语言语句就是基本句子，指令就是单词，指令集就是单词表。
	“从形式逻辑中可以推出，可以设计出一种简单的指令集（基础功能集）解决复杂的问题，而它要求的设备也具备原理上的简单性”。
	MIPS指令集：是一种精简指令集，有32位和64位版本，这里介绍32位。
add   a, b, c				指令操作数个数：3	//通常指令都要求指令操作数数量为3个，固定数量的操作数使得硬件复杂性可控
add   $t0, $s1, $s2		    算术运算指令操作数必须直接取自寄存器，这里MIPS提供32个寄存器，寄存器为32位，即字长为32位
lw    $t0, 4($s0)			数据传送指令 $t0目标寄存器 $s0基址寄存器 4偏移量（内存使用字节编址，机器字长为4，所以偏移量必是4的倍数）
sw    $t0, 4($s0)
addi  $s3, $s3, 4			立即数加，将常数放入指令使得执行更快

	MIPS寄存器：$s0~$s7 对应 16~23 号寄存器，$t0~$t7 对应 8~15 号寄存器 $zero 0号寄存器（存储0）
	MIPS指令格式：R型格式（寄存器型） 和 I型格式（立即数型）
R型：	op			rs			rt			rd			shamt			funct
	    6位		    5位			5位			5位			5位				6位
	  操作码   源寄存器1  	 源寄存器2	目标寄存器	   位移量		  函数码（和操作码配合使用）
	  
I型：	op			rs			rt			constant or address
		6位			5位			5位			     16位
	   操作码 	  源寄存器	目标寄存器		  常数或地址偏移量

	硬件设计四原则：
		1、简单源自规整
		2、越少越快
		3、加速执行常用操作
		4、适当折中
	算术运算指令：
		add $s1, $s2, $s3		释义：$s1 = $s2 + $s3			加
		sub $s1, $s2, $s3		释义：$s1 = $s2 1 $s3			减
		addi $s1, $s2, 100		释义：$s1 = $s2 + 100			立即数加
	逻辑运算指令：
		and $s1, $s2, $s3		释义：$s1 = $s2 & $s3			与
		or $s1, $s2, $s3		释义：$s1 = $s2 | $s3			或
		nor $s1, $s2, $s3		释义：$s1 = ~($s2 | $s3)		非或($s3 为 0 时这条指令就是对$s2取反)
		andi $s1, $s2, 100		释义：$s1 = $s2 & 100			立即数与
		ori $s1, $s2, 100		释义：$s1 = $s2 | 100			立即数或
		sll $s1, $s2, 10		释义：$s1 = $s2<<10				左移(不考虑数的正负)
		srl $s1, $s2, 10		释义：$s1 = $s2>>10				右移(不考虑数的正负)
	数据传送：
		lw $s1, 100($s2)		释义：$s1 = Memory[$s2+100]		取数
		sw $s1, 100($s2)		释义：Memory[$s2+100] = $s1		存数
	条件转移指令：
		beq $s1, $s2, L			释义：if($s1==$s2) L			相等测试转移(L是一个内存地址直接量(标号))
		bne $s1, $s2, L			释义：if($s1!=$s2) L			不等测试转移(L是一个内存地址直接量(标号))
		slt $s1, $s2, $s3		释义：if($s2<$s3) $s1=1 else $s1=0	小于则置0
		slti $s1, $s2, 100		释义：if($s2<100) $s1=1 else $s1=0	立即数小于则置0
	无条件跳转：
		j L						释义：goto L					直接跳转到标号(L是一个内存地址直接量(标号))
	过程：根据给定的参数完成特定任务的已存储的子程序。
	跳转链接指令：跳转到某个地址，同时将下一条指令地址保存到寄存器中：jal ProcedureAddress
	MIPS为过程调用分配的寄存器：
		$a0 ~ $a3 参数寄存器（用于保存要传入的参数）
		$v0 ~ $v1 储值寄存器（用于保存过程返回值）
		$ra 返回地址寄存器（用于保存调用者下一条指令地址）
	程序计数器(PC)：保存当前运行指令的地址的寄存器。jal指令将PC+4保存到$ra寄存器中。
	寄存器跳转指令：非条件跳转到寄存器中指定的地址：jr $ra
	过程调用过程：调用者将参数保存到 $a0 ~ $a3，使用 jar X 跳转到过程X，过程X执行，将结果放大 $v0 ~ $v1,使用jr $ra
将控制返回到调用者。
	栈指针寄存器：$sp 保存被调用者可使用的栈的栈顶地址，栈的增长是按照从高到低的地址顺序。
	全局指针寄存器：$gp 用于保存静态数据
	MIPS将18个寄存器分成两组：
		$t0 ~ $t9 10个零时寄存器，过程调用中被调用者不需要保存其中原来的值
		$s0 ~ $s7 8个保留寄存器，过程调用中必须保存原来的值，使用完后必须恢复原状。
	叶过程：没有调用其它过程的过程。对于调用其它过程的非叶过程，调用其它过程前就需要把参数寄存器$a0~$a4、返回地址寄存器
$ra等进行压栈，调用结束后再从栈中恢复这些寄存器的值。
	过程的局部变量如数组等也需要保存到栈中，栈中包含过程的寄存器和局部变量的段称为过程帧或活动记录，MIPS使用帧指针寄存器
$fp存储栈中过程帧的开始地址，$sp指向栈顶，过程执行中$sp可能会改变，但$sp一般不会改变。
	程序内存分配（从低地址到高地址）：保留段-->正文段(初始阶段PC寄存器保存其地址)-->静态数据段(保存程序的静态数据、常量
等，$gp寄存器保存其地址)-->动态数据段(通常称为 堆，C中使用malloc分配其中空间使用)-->栈（从高地址向低地址增长，栈和堆
相向增长）
	上面所说的MIPS寄存器使用和内存分配其实是典型的编译器对寄存器和内存的划分使用，部分其它编译器可能不使用这种规则。
	1号寄存器称为$at，受汇编器保护，26号~27号寄存器称为	$k1~$k1，受操作系统保护
	