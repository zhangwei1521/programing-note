										数据结构与算法
	第一章
	①变量：其实就是一个内存地址
	②数据类型：对变量中存储数据的类型的说明。编程语言使用数据类型来防止对变量进行错误的运算。现代
编程语言基本上都允许开发者自定义数据类型。
	③数据结构：组织并存储数据的一种形式，如数组。数据结构通常还包括一组接口，这些接口用于操作数据
结构内部的数据。典型的数据结构可分为线性结构和非线性结构。
	④抽象数据类型ADT：ADT不强调数据结构存储数据和接口的具体实现，而是强调接口功能的描述。
	⑤算法：实现某个目的(解决某个问题)的步骤或步骤的描述。
	⑥算法的比较和分析：解决同一个问题的算法可以有多个，不同的算法执行的效率不相同，描述算法的效率
的一种典型的方法是用函数表示算法执行的步骤数和输入量之间的关系：f(n)=...(算法效率函数)。算法执行的
步骤数除了和输入量有关，还和数据的分布有关。特定分布状态的数据可能导致算法的执行步骤数出现极小值和
极大值。也就是说在不清楚数据的分布的情况下，同一个算法的执行效率具有三种形式：最坏情况、平均情况和
最好情况。
	⑦增长率：输入量的增长引起的算法的执行步骤数增长的速度，例如在无序数组中找出某个元素使用从头遍
历算法，算法效率函数为f(n)=kn+c，增长率为n型(线性)增长。
	⑧渐进表示：在大多数场景下算法效率的最好和最坏情况都是不实用的，所以通常使用平均情况下的算法效
率函数。渐进表示描述的是在平均情况下算法效率函数的上界和下界。
	⑨大O表示法：如果存在正常数c和n0使得 n>=n0时，f(n)<=c*g(N)，则记为：f(N)=O(g(n))
	对于f(n)=O(g(n))，大O表示法给出了函数f(n)的严格上界，表示的是当n很大时，f(n)的上界是g(n)，实际
上描述的是简化了的算法的增长率(主增长率)。g(n)是f(n)的上界，c*g(n)增长率大于或等于f(n)的增长率，
所以g(n)有无数个，分析算法要求的则是最小的那个，通常这样的g(n)具有和f(n)相同的增长率。使用大O
表示法的目的是简化算法复杂性分析，只关注决定算法效率的最重要的那个部分，而不必陷入细节的过度分析。
	Ω表示法：如果存在正整数c和n0，当n>=n0时，f(n)>=c*g(n0)，则记为：f(N)=Ω(g(n))，Ω表示法给出了f(N)
的下界，算法分析取所有g(n)中最大的那个，通常这样的g(n)也具有和f(n)相同的增长率。
	Θ表示法：存在c1、c2和n0，当n>=n0时，c1*g(n)<=f(n)<=c2*g(n)，则记为：f(n)=Θ(g(n))，这样的g(n)是
一个函数集合，每一个g(n)和f(n)的增长率都相同。
	复杂度分析：使用大O表示法分析算法效率，算法效率函数的大O表示法实际上是算法效率函数的简化，
其增长率大于或等于算法效率函数的(主)增长率，在几何上表现为算法效率函数的渐进线。所以求大O表示法也
叫做渐进分析。
	常见程序结构的算法效率：(给出精确的算法效率函数是很麻烦的，通常也是不必要的，所以使用大O表示法)
		循环：f(n)=c*n=O(n)
		嵌套循环：f(n)=c*n*n=O(n^2)
		顺序执行语句：f(n)=c0+k=O(1)
	
	