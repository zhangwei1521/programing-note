Unicode码指的是字符到数字的映射，0~127与ASCII码相同。
Unicode码没有定义如何存储字符；也没有限定所能映射的字符的数量上限，所以Unicod码可以扩展新增的字符。

UTF-8以及UTF-16是两种常用的根据Unicode码点编码存储的编码方式。
UTF-8的编码规则：
	1.一个字节的编码完全用于ascii码（从0-127）
	2.大于127的码点都用多字节来编码，多字节包含开头字节和后续字节
	3.开头字节以若干个1开头（长度为几就有几个1，因此只要读完开头字节就可以知道本字符共有多少个字节），后接1个0。后续字节都以10开头。
	4.从右到左，后续字节每个字节占用原码点6个位，剩余的放在开头字节。
	5.开头字节和后续字节不共享任何数据，因此utf8是自同步的。举例来说我们看到一个字节以110…开头时，我们就知道这是一个2字节的字符的开头字节。
	
	字符	unicode码点		十六进制表示			二进制表示								UTF-8编码
	$ 		36				U+0024						100100									00100100
	¢		162				U+00A2					  10100010						   11000010 10100010	
	€		8364			U+20AC		       100000 10101100				  11100010 10000010 10101100	
	𤭢		150370			U+24B62		  10 01001011 01100010		 11110000 10100100 10101101 10100010	

UTF-16使用2个或者4个字节来存储字符
unicode码点小于等于65535的字符都采用2个字节存储，其编码就是Unicode码点（0xD800~0xDFFF(十进制 55296~57343共 2048 个码点)没有定义对应字符）；
Unicode码点大于65535的字符需要4个字节存储，编码由高代理码点区（码点范围0xD800~0xDBFF）中的码点编码和低代理码点区（码点范围 0xDC00~0xDFFF）中的
码点编码组合得到，例如字符 '𤭢' 码点为 150370，编码由 D852 和 DF62 组合得到。

低字节序和高字节序是一个关于在内存中存储和读取一段字节（被称作words）的约定。
低字节序也称为小端序(LE)，表示把低位字节(小端字节)存放在内存的低地址，而高位字节(大端字节)存放在内存的高地址，在文档中表现为高位字节排在低位字节的后面；
高字节序也称为大端序(BE)，表示把高位字节(大端字节)存放在内存的低地址，而低位字节(小端字节)存放在内存的高地址，在文档中表现为高位字节排在低位字节的前面。

	字符	unicode码点					  UTF-16 LE		  	 (十六进制)							UTF-16 BE			  (十六进制)
	$ 		36						  00100100 00000000			2400					  00000000 00100100				 0024
	¢		162						  10100010 00000000			A200					  00000000 10100010				 00A2
	€		8364					  10101100 00100000		   	AC20					  00100000 10101100				 20AC
	𤭢		150370	 1010010 11011000 01100010 11011111	   52D8 62DF	11011000 01010010 11011111 01100010			D852 DF62

BOM是一个设计得很巧妙的字符，用来放在文档的开头告诉阅读器该文档的字节序。
在UTF-16中，第一个字节放置FE FF表明采用的是大端序，如果第一个字节是 FF FE 则为小端序。

使用UTF-8编码保存时，可以选择使用带BOM的格式或不带BOM的编码格式，UTF-8 不需要 BOM 来表明字节顺序，但是使用BOM头（在文件开始添加三个字节：
EF BB BF）可以表明编码方式，如果接收者收到以 EF BB BF 开头的字节流，就知道这是 UTF-8 编码。