C循环：
while(save[i] == k)
	i += 1;

MIPS汇编指令格式：
i和k放在 $s3 和 $s5 中，save数组基址在 $s6 中
Loop:
	sll $t1, $s3, 2
	add $t1, $t1, $s6
	lw  $t0, 0($t1)
	bne $t0, $s5, Exit
	addi $s3, $s3, 1
	j    Loop
Exit:
	
=======================================================
C递归过程：
int fact(int n){
	if(n < 1){
		return 1;
	}
	else{
		return n * fact(n-1);
	}
}

MIPS汇编指令格式：
fact:
	addi $sp, $sp, -8
	sw   $ra, 4($sp)
	sw   $a0, 0($sp)
	slti $t0, $a0, 1
	beq  $t0, $zero Ll
	addi $v0, $zero, 1
	addi $sp, $sp, 8
	jr   $ra
	Ll:
		addi $a0, $a0, -1
		jal  fact
		lw   $a0, 0($sp)
		lw   $ra, 4($sp)
		addi $sp, $sp, 8
		mul  $v0, $a0, $v0
		jr   $ra
=========================================================

C过程——复制字符串：
void strcpy(char[] x, char[] y){
	int i;
	i = 0;
	while((x[i] = y[i]) != '\0')
		i += 1;
}

MIPS汇编指令格式：
//x和y的基址放在$a0、$a1中，使用$t0存储局部变量 i，这样就可以不压栈。
strcpy:
	add $t0, $zero, $zero
	L1:
		add $t1, $a1, $t0
		lb  $t2, 0($t0)
		add $t3, $a0, $t0
		sb  $t2, 0($t3)
		beq $t2, $zero, L2
		addi $t0, $t0, 1
		j   L1
	L2:
		jr $ra

============================================================================
C过程——冒泡排序
void sort(int[] v, int n){
	int i,j;
	for(i=0; i<n; i++){
		for(j=i-1; j>=0 && v[j]>v[j+1]; j++){
			swap(v,j);
		}
	}
}

void swap(int[] v, int k){
	int temp=v[k];
	v[k]=v[k+1];
	v[k+1]=temp;
}

MIPS汇编指令格式：
sort:	addi	$sp, $sp, -20
		sw 		$ra, 16($sp)
		sw 		$s3, 12($sp)
		sw 		$s2, 8($sp)
		sw 		$s1, 4($sp)
		sw 		$s0, ($sp)
		
		move	$s2, $a0
		move	$s3, $a1
		
		move 	$s0, $zero
for1:	slt 	$t0, $s0, $s3
		beq 	$t0, $zero, exit1
		
		addi 	$s1, $s0, -1
for2:	slti	$t0, $s1, 0
		bne		$t0, $zero, exit2
		sll 	$t1, $s1, 2
		add 	$t2, $s2, $t1
		lw 		$t3, 0($t2)
		lw 		$t4, 4($t2)
		slt 	$t0, $t4, $t3
		beq		$t0, $zero, exit2
		
		move 	$a0, $s2
		move 	$a1, $s1
		jal 	swap
		
		add		$s1, $s1, -1
		j		for2
exit2:	addi 	$s0, $s0, 1
		j		for1
exit1:	lw		$s0, 0($sp)
		lw		$s1, 4($sp)
		lw		$s2, 8($sp)
		lw		$s3, 12($sp)
		lw		$ra, 16($sp)
		addi	$sp, $sp, 20
		
		jr 		$ra
	
swap:	sll 	$t1, $a1, 2
		add 	$t1, $a0, $t1
		
		lw 		$t0, 0($t1)
		lw 		$t2, 4($t1)
		
		sw		$t2, 0($t1)
		sw		$t0, 4($t1)
		
		jr		$ra










