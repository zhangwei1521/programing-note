										自顶向下的计算机网络
	第一章 基础概念
	描述因特网的两种方式：
	一、因特网具有什么样的硬件和软件结构组件；二、因特网是怎样作为分布式应用的载体和基础设施。核心就是网络运行的原理
是什么。
	网络是一组计算机连接在一起形成的一个统一体。单台计算机更合理的称谓是端系统，连接各个端系统的是通信链路和链路间的
分组交换机。通信链路具有多种物理媒介载体，如铜线和光纤等。端系统之间交换的数据是分段传输的，这样的信息分段被称为分组。
现在使用最广泛的分组交换机主要是路由器和链路层交换机。一个分组所经历的所有通信链路和分组交换机称为它所通过的网络的
路径。
	ISP是因特网服务提供商，是分层的商业机构，高层ISP的网络之间通过高速光纤链路连接。IETF是因特网工程任务组，负责网络
标准的制定，标准文档被称为RFC。因特网使用的两个最重要的协议是TCP和IP。
	另一种独立的网络被称为内联网络，用于公司或政府的内部网络。
	英特网提供一系列的数据传输模式，提供服务给应用程序，应用程序使用端系统（操作系统）提供的网络编程接口进行设计，实现
各自的数据传输需求。
	
	协议是什么？
	通信协议一套规则集合，定义了通信实体之间所交换数据的报文格式、次序，以及数据的发送、传输和接收时进行的处理逻辑。
	
	端系统进一步可以划分为客户机和服务器，更准确的说法是客户机程序和服务器程序，这是一种分布式程序的结构。另一种分布式
方案是对等设计，即P2P，端系统程序既是客户机程序，又是服务器程序，既使用所连接端系统提供的服务，也对外提供服务。
	
	如何连接到边缘路由器？
	传统住宅接入：使用传统电话线作为传输媒介，端系统发送的数据经过调制解调器转换为模拟信号，边缘路由器接收数据前先使用
调制解调器将接收到的模拟信号转换为数字信号再进行处理。
	新型宽带住宅区接入：数字用户线（DSL）和混合光纤同轴电缆（HFC）。DSL使用频分多路复用技术，划分三个频段分别用于下载、
上传和电话信道，但是因为模拟信号容易受到干扰，不能实现长距离传输，所以使用DSL要求端系统和ISP调制解调器间的距离比传统
住宅接入的距离要小一些。HFC使用同轴电缆可以实现长距离的模拟信号传输，同时提供比DSL更大的带宽，但是同轴电缆通常是共享
带宽，所以单个端系统实际下载速率会低于HFC标注的带宽值。使用HFC作为接入媒介，端系统需要使用电缆调制解调器转换数字信
号。HFC使用光缆连接多条同轴电缆。
	公司接入：使用局域网技术，最普遍的是以太网，通过双绞线或同轴电缆连接到边缘路由器，直接传输数字信号，可以划分为传统
的共享式以太网接入技术和交换以太网接入技术。
	无线接入：短距离的基于IEEE802.11协议的接入技术，长距离的基于蜂窝电话信号接入。
	
	网络核心：分组交换机组成的网络
	数据交换的两种方式：电路交换和分组交换
	电路交换需要在通信的端系统之间建立一条连接，通信期间会占用所使用链路带宽的1/n，链路使用频分复用技术或时分复用技术
实现保持连接。时分复用是将连接总时间划分为多个片段，即时间帧，每个帧划分为固定的时间段，每一个时间段被分配给各个连接。
频分复用是将链路带宽划分为多个频段，将各个频段分配给各个连接。
	分组交换使用数据分组作为最小传输单元，以链路最大传输速率传输分组。分组交换机使用存储转发传输机制，即接收到完整的
分组后才继续传输，所以存在存储转发时延。分组交换机为每一条链路提供一个输出缓存（输出队列），以存储待转发的分组，因此
存在排队时延。如果某个链路的输出缓存被占用完了，则新到的需要该链路传输的分组会被丢弃，即所谓的丢包。
	统计多路复用：使用分组交换方式，实现多个端系统共享一条链路。
	路由转发：分组交换机使用分组携带的目的地址查询路由转发表，决定下一站的分组交换机和对应的链路。因特网上的路由器会
自动地设置路由转发表。
	ISP大致可以分为三层，第一层ISP数量较少，它们的网络通过高速链路互相连接，构成了因特网的主干网络。第二层ISP通常覆盖
一个国家或地区，通常只连接到少数第一层ISP，也可以连接到其它第二层ISP；第三层ISP被称为底层ISP，连接到一个或多个第二层
ISP，向下连接端系统。ISP与其他ISP的连接点称为汇集点（POP），是该ISP的一个或一组分组交换机。
	时延、丢包和吞吐量限制
	时延的类型：（节点）处理时延、排队时延、传输时延（存储转发时延）、传播时延。
	链路的传输速率指的是单位时间通过链路一个截面的比特量，链路的传播速率指的是链路携带比特信号的介质（如电或光）的
传播速率。链路的最大吞吐量就是分组交换机转发分组的最大传输速率。
	节点总时延是上述时延之和。
	流量强度：单位时间进入节点某一转发链路的存储队列的比特量和该链路的传输速率之比，La/R;(L:分组比特长度;a:单位时间
进入存储队列的分组数量; R:该链路的传输速率。)
	流量强度不能超过1；接近1时平均排队时延将急剧增加；接近0则排队时延减小接近0。
	由于存储队列的大小是有限的，当到达的分组无法存入该队列就会被丢弃。因此度量节点的性能也需要考虑丢包概率。
	媒体分组化时延：将数字化语音等填充分组的时间。
	端系统之间的吞吐量近似为源和目的地之间的所有链路的最小传输速率，此外还与干扰流量有关（即共享该链路的其他流量）。
现在的因特网对吞吐量的限制主要是接入网的传输速率。
	分层协议和封装：
	应用层报文被转交给运输层，运输层添加自己的首部信息后形成运输层报文段，运输层首部可能包括接收端运输层需要将该
报文段交付给的应用程序的信息、比特差错检测信息等。运输层将报文段转交给网络层，网络层添加源和目的地地址等首部信息构成
网络层数据报后转交给链路层，链路层添加首部信息构成链路层帧。每一层的分组都可以分为首部字段和有效载荷字段，有效载荷
字段通常来自于上层分组。
	
	网络攻击：
	拒绝服务攻击（DoS）：弱点攻击、带宽洪泛（常见：DDoS）、连接洪泛。
	分组嗅探：无线被动接收机（分组嗅探器）可以接收附件的分组。
	IP哄骗：将具有虚假源地址的分组注入因特网。可能是伪造一条修改路由的分组发给路由器，路由器没有能识别该分组的源地址
是伪造的而根据该分组修改了路由表。需要使用端点鉴别机制保证分组源地址不是伪造的。
	中间人攻击：受害的路由器或者端系统低层软件模块嗅探分组甚至修改分组，破坏数据完整性。
	
	计算机网络的历史：1964年提出分组交换的思想，1969年使用接口报文交换机（IMP）构建了四个节点的ARPAnet，1972年节点增加到
15个。1972年实现了第一个主机到主机的协议：网络控制协议NCP，同年开发了第一个电子邮件应用程序。其它网络开始发展，研究人员
认识到应该将这些彼此独立的网络连接起来。70年代末，TCP、IP、UDP协议基本完成。1983年TCP代替了NCP协议。80年代后期实现了
拥塞控制和DNS。90年代万维网出现，1992年开始web服务器和web浏览器开始井喷式出现。

	第二章 应用层
	应用程序总是写在端系统上，而不是网络核心设备中。
	网络体系结构对于应用程序来说是固定的，并且为应用程序提供特定的服务集合。
	现代的两种主流网络应用程序结构：客户机/服务器体系结构、对等（P2P）体系结构
	客户机/服务器体系结构中服务器端通常需要使用主机集群（或称为服务器场），使用这种体系结构的应用服务称为基础设施密集的，
这意味着需要投入巨额资源
	P2P体系结构适用于流量密集型应用，例如用户到用户间的即时通讯。
	P2P的自扩展性：每一个对等方都在产生请求负载的同时，也向其它对等方发送数据，增加了系统的服务能力
	某些应用程序会结合使用者两种体系结构，例如在即时通讯中使用服务器跟踪用户的ip，使用P2P实现用户到用户间的通信
	不同端系统中的应用程序进程通过跨越计算机网络交换报文实现通信。网络应用程序由成对的进程组成。这一对进程总是可以被
标示为客户机和服务器进程
	客户机（进程）：发起通信的进程
	服务器（进程）：等待联系的进程
	进程使用套接字（一个网络软件接口）在网络上发送和接收报文。套接字是同一台主机内应用层与运输层之间的接口，也称为应用
程序和网络之间的应用程序编程接口（API）。应用开发者可以控制套接字在应用层端的东西，而无法控制套接字的运输层端。
	运输层提供给应用层程序的服务分类：
		可靠数据传输：发送进程将数据交给套接字，可以确保应用程序发送端发送的数据能正确地、完整地交付给应用程序接收端。
		吞吐量保证：以某种特定的速率提供确保的可用吞吐量。（带宽敏感的应用 需要使用这种服务）
		定时传输：保证接收端收到数据和发送数据的时间差在指定阈值内。（实时应用 需要使用这种服务）
		安全性保证：运输层对运输层数据进行加密，保证数据安全。
	现代英特网运输层使用TCP和UDP两种运输层协议。
	TCP（服务模型）协议提供面向连接和可靠数据传输服务，面向连接服务是指在两个进程通信时建立全双工的连接。TCP还提供拥塞
控制机制，在网络拥塞时将限制TCP连接
	SSL是在TCP协议基础上实现的一个提供数据加密的套接字层（提供类似TCP套接字接口的安全套接字接口）。SSL还是使用TCP套接字
发送接收数据
	UDP服务模型提供最小服务，不提供可靠传输服务和拥塞控制，但是不限制发送速率，可以最大程度保障应用通信速率
	目前的英特网运输层协议都不提供吞吐量和定时传输的保证，尽管如此，一些良好的设计仍然可以为时间敏感的应用提供满意的服务
	应用层协议定义了运行在不同端系统上的应用程序进程如何传递报文，具体来说包括：
		报文的类型：请求还是响应报文
		报文类型的语法：报文中的字段及字段描述
		字段的语义，
		发送、响应报文的规则
	HTTP协议
	web页面，有对象组成，对象就是文件，这些文件可以通过url寻址。通常一个web页面含有一个基本HTML文件和一些引用对象，如
图片等。URL地址由两部分组成，服务器主机名和对象路径。
	HTTP协议定义了HTTP报文的格式和客户机和服务器怎么交换报文。HTTP使用TCP作为运输层协议。所以HTTP协议不用关心数据丢失
等问题。这也是分层协议设计的好处。HTTP是一个无状态协议，这意味着两次请求同一个资源总会得到服务器的响应。
	HTTP默认使用持久连接，但是也可以设置使用非持久连接。
	非持久连接：客户机接收到服务器的响应后，服务器就关闭连接。
	持久连接：服务器返回响应后不关闭连接，而是在一段时间没有接收到来自原来客户端的请求才关闭连接
	往返时间RTT和三次握手：客户端发起连接请求，服务器响应该请求，客户端确认连接并同时发送报文。RTT包括三次握手的前两次
的时间。从发送请求到获得相应报文总时间包括2个RTT和服务器传输报文的时间。
	每次建立连接，客户端和服务器都需要分配TCP缓冲区和变量，所以使用非持久连接会让服务器负载激增，同时请求每个对象都
会有2个RTT的时延。使用持久连接则可以在后续的访问中使用原来的连接，可以避免非持久连接的上述问题。
	HTTP报文格式：
	HTTP请求报文包括三个部分：请求行、首部行、实体主体
		请求行包括三个字段：方法字段（GET、POST等）、URL字段（资源路径不包括主机名）、HTTP协议版本
		常用的首部行：HOST：主机（域名或IP地址）、Connection：是否使用持久连接（close不使用持久连接）、User-agent：客户
					  端代理、Accept-language：期望语言版本（可选）
		GET方式不使用实体主体，而是要POST提交表单时表单参数就是有实体主体承载。使用GET也可以把表单参数拼接到URL中
		HEAD方法类似于GET，但是服务器不是返回其请求的对象，而是返回某个特定的响应报文，所以这个方法通常用于测试使用
		PUT方法用于向服务器上传对象，DELETE用于删除服务器上的对象。
	HTTP响应报文包括三个部分：状态行、首部行、实体主体
		状态行三个字段：协议版本、状态码和状态描述说明
		常用首部行：Connection：是否已关闭连接。Date：发送响应报文的日期时间。Server：服务器软件名及版本。Last-Modified:
					响应返回对象的创建或最后修改时间。Content-Length：响应对象的字节数。Content-Type：响应对象的类型。
		常用状态码：200 成功	301 对象已永久转移，新URL在响应的首部行Location中
					400	请求不能被服务器理解	404	请求的文档不在服务器上	505 服务器不支持请求的协议版本
	Cookie：服务器使用Cookie识别客户端，这涉及到几个步骤，第一步：服务器响应第一次请求前生成一个特定的标识并保存，在
响应报文中添加该标识为Cookie首部行的值。第二步：浏览器接收到响应后将响应报文首部行中的Cookie的值和服务器地址保存到
本地Cookie文件。第三步：浏览器再次请求时将Cookie文件中对于的cookie值添加到请求的Cookie首部行中。第四步：服务器收到
请求报文取出cookie首部行的值并和保存的cookie值比较，判断是否是同一个客户端
	web缓存器：局域网或区域网内搭建的服务器，用于直接响应客户端的请求（客户端可以配置为使用web缓存器，这样请求会提交
给缓存器而不是目标服务器）。如果缓存器没有所请求的资源就会向实际服务器发送请求并缓存到本地再响应客户端
	条件GET方法：缓存器使用这种方法来验证资源是否已经被修改，首部行If-modified-since。缓存器使用上次响应报文的
Last-modified首部行的值作为If-modified-since的值
	如果资源没有修改，实际web服务器会返回304，同时不会返回实体主体

    ip地址：
    A类网络
        0.x.x.x
        1.x.x.x ~ 126.x.x.x
        127.x.x.x
        注： 0.x.x.x 是一个特殊网络，用于本地网络，0.0.0.0 表示默认ip，比如在初始获取ip时设计请求包的ip，表示当前主机没有ip
            127.x.x.x 用于本机本地进程，127.0.0.1 表示本机环回ip
            10.x.x.x 用于本地私有网络
    B类网络：
        128.0.x.x 
            ~
        128.255.x.x
            ~
            ~
        191.0.x.x
            ~
        191.255.x.x
        注：172.16.x.x ~ 172.31.x.x 用于本地私有网络
    C类网络：
        192.0.0.x
            ~
        192.255.255.x
            ~
            ~
        223.0.0.x
            ~
        223.255.255.x
        注：192.168.x.x 用于本地私有网络
    D类网络：
        224.x.x.x
            ~
        239.x.x.x
    E类网络：
        240.x.x.x
            ~
        254.x.x.x
    255.255.255.255 用于本网络内广播
	
TCP三次握手
	1、client发送SYN到server，将状态修改为SYN_SEND，如果server收到请求，则将状态修改为SYN_RCVD，并把该请求放到syns queue队列中。
	2、server回复SYN+ACK给client，如果client收到请求，则将状态修改为ESTABLISHED，并发送ACK给server。
	3、server收到ACK，将状态修改为ESTABLISHED，并把该请求从syns queue中放到accept queue。
	注：client收到server的SYN+ACK就认为连接已经建立了，可以马上发送数据，如果server没有收到client的ACK或者在收到client的ACK后没有
	把连接放进accept queue（可能accept queue已经满了），则server不能处理client发送的数据，而是继续回复SYN+ACK给client，client收到
	后就继续发送ACK给server，如果一直重复此过程，当server的SYN+ACK重试次数超过系统设置值后，断开连接，发送Rst包给client
	
	
	
	
	
	
	