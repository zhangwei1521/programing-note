												使用Maven
												  第一章
	构建的概念：包括编译、进行单元测试、生成文档、打包和部署的一套流程。这一过程是繁琐的，我们希望能使用某种工具能自动
完成这样的工作。
	Maven抽象了一个完整的构建生命周期模型，我们只需要根据它的模型来配置我们的项目就可以使用它所提供的成熟的插件，这样
可以极大地减少错误，同时也统一了不同项目的构建方式，降低了学习成本。
	Maven还是一个依赖管理工具，以及项目信息管理工具。它使用坐标定义中央仓库中的开源组件，可以精确地定位每一个构件。同时
maven统一管理着项目中很多琐碎的信息，方便了查找这些信息。
	Ant和Maven的区别：Ant是过程式的，需要自己指定每一个目标，以及每个目标中的任务，这意味着对于每一个项目，都需要重新
编写配置文件。Maven是声明式的，构建的各个阶段都由插件完成，大部分插件式Maven提供的，我们只需要声明一些基本元素就可以
执行构建。
	安装Maven
	检查JDK：echo %JAVA_HOME%
			 java -version
	Maven依赖java，所以必须配置JAVA_HOME。
	解压maven包：jar xvf "D:\xxx\apache-maven-3.x bin.zip"
	添加M2_HOME环境变量为上面解压后的文件夹路径。将“%M2_HOME%\bin;”添加到path环境变量中。升级maven时只需要修改M2_HOME就
可以了。
	运行mvn -v查看。
	bin目录下的mvn.cmd脚本对应了执行maven命令时的第一个mvn命令，它其实是执行脚本中的java命令，用来准备java环境和项目数据
	关于MAVEN_OPTS环境变量：java默认内存可能不能满足maven构建需要，使用这个变量更改java内存，典型配置值为：-Xms128m -Xmx512m
													第二章
	maven使用pom.xml文件定义项目的基本信息，声明项目依赖，描述项目如何构建。POM(Project Object Model)
	maven项目结构：源码路径：src/main/java/ 资源文件路径：src/main/resources/
			   测试代码路径：src/test/java/ 测试资源文件：src/test/resources/
	编译输出路径： target/classes/
	指定maven的compiler插件使用的java版本：
		<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
			</plugins>
		</build>
	maven命令：mvn clean compile 编译
			   mvn clean test 测试
			   mvn clean package 打包
			   mvn clean install 安装到本地仓库
	打包时指定主类：配置插件shade:
		<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>1.2.1</version>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <mainClass>com.zhangwei.mavendemo1.HelloWorld</mainClass>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>
	使用archetype快速创建项目结构：mvn archetype:generate 选择7号（默认）quickstart项目结构
													第三章
	依赖的范围：用来表述依赖的jar包和程序编译、测试、运行时的classpath的关系，默认为compile，将在三个阶段的classpath
中都可以引用依赖的jar包，test指明只在测试时可以引用依赖的jar，provided指明编译、测试期间可以引用依赖的jar，runtime表明
可以在测试、运行期间引用依赖的jar。还可以使用system，这种需要使用systemPath元素指明依赖jar包的本地路径，不是从maven
仓库解析依赖，只能在编译和测试期间使用该类依赖。
	传递性依赖：maven解析依赖时，会将依赖包自己所有的依赖递归解析，这样就不用自己去手动维护各个依赖包的依赖了。
	依赖调度：当项目同时依赖多个不同版本的同一依赖时，maven只会选择一个版本的依赖包，调度第一原则是：路径最近者优先。
如果路径长度相同就使用调度第二原则：首先声明者优先。这里的路径意思是：A->B->C(1.0),C的路径为2，A->D->E->C(2.0),这里C
路径为3.
	可选依赖：项目中实现了互斥的功能，不会同时依赖两个外部依赖，比如mysql驱动和oracle驱动，使用<optional>true</optional>
声明，对于当前项目会同时下载两个依赖包，但是对于依赖当前项目的其他项目，这种依赖不会传递，所以不会下载这两个包中任意一个。
实际情况下不推荐使用这种可选依赖。
	排除依赖：有时候希望不使用传递性依赖，而是自己指定那个依赖，使用<exclusion>从直接依赖包中排除该传递性依赖：
		<dependency>
			...
			<exclusions>
				<exclusion>
					<groupId>xxx</groupId>
					<artifactId>yyy</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	使用maven属性统一设置某类依赖的某些信息，如版本：
		<properties>
			<springframework.version>4.0.9</springframework.version>
		</properties>
		///
		<version>${springframework.version}</version>
	使用 mvn dependency:list查看解析的依赖，包括传递性依赖
	使用 mvn dependency:tree查看依赖树，可以查看传递性依赖是由那个直接依赖引入的
	使用 mvn dependency:analyze查看依赖使用情况，可以查看哪些依赖没有使用（这些依赖不一定是真的不需要），
哪些项目中使用了其api但其实是间接引入的依赖
												第四章
	如果一条物理机上部署了多个java项目，每个项目都依赖了许多相同的组件，那么为每个项目都保存自己的依赖文件将会导致大量的
重复存储和磁盘浪费。maven通过坐标定位构件，并且使用仓库（本地仓库）统一存储构件，这样各个项目不再需要保存自己的依赖文件，
而只需要声明自己的依赖就可以在使用时通过maven坐标在仓库中找到依赖。
	在发布或安装构件到仓库中时，maven读取pom文件构造Artifact对象，通过该对象获取构件的信息并决定构件在仓库中的位置：
groupId/...(groupId分级路径)/artifactId/version/artifactId-version-classifier.packaging
	修改本地仓库地址：
		编辑用户settings.xml文件（如果不使用用户文件，直接编辑全局settings.xml文件）：
		<settings>
			...
			<localRepository>D:\softwareData\</localRepository>
		</settings>
	maven默认从中央仓库（地址在超级pom中定义）下载依赖构件，如果依赖不在中央仓库而是在其他公共库中，项目中需要配置这些
库的地址：
		<repositories>
			<repository>
				<id>jboss</id>
				<name>JBoss Repository</name>
				<url>http://repository.jboss.com/maven2/</url>
				<releases>
					<enabled>true</enabled>
				<releases>
				<snapshots>
					<enabled>true/false</enabled>
					<updatePolicy>daily</updatePolicy><!-- 这条和下一条配置都只在前面enabled为true时配置，这条配置表示更新策略 -->
					<checksumPolicy>ignore</checksumPolicy><!-- 检测文件校验和策略-->
				<snapshots>
				<layout>default</layout>
			</repository>
		</repositories>
	配置远程仓库认证(仓库地址使用上面的配置方式在项目pom文件中配置，这里的认证配置在settings.xml中配置)，主要还是用于公司内部搭建的仓库的认证：
		<servers>
			<server>
				<id>my-repo-release</id>
				<username>zhangwei</username>
				<password>12345</password>
			</server>
		</servers>
	部署到远程仓库：
		项目pom文件中配置：
			<distributionManagement>
				<repository>
					<id>my-repo-release</id>
					<name>server for release</name>
					<url>http://192.168.1.101/content/repositories/my-repo-release/</url>
				</repository>
				<snapshotRepository>
					<id>my-repo-snapshot</id>
					<name>server for snapshot</name>
					<url>http://192.168.1.101/content/repositories/my-repo-snapshot/</url>
				</snapshotRepository>
			</distributionManagement>
		认证配置同上
		部署命令：mvn clean deploy
	使用snapshot版本：内部开发通过声明依赖snapshot版本，可以在配置仓库时设置更新策略，如：
		<updatePolicy>daily</updatePolicy>（默认值就是daily）
表示每天都会检查依赖的snapshot的最新版本，也可以在命令中指定检查新版本：mvn clean compile-U
	本地仓库使用maven-metadata-local.xml文件存储构件的元信息，远程仓库使用maven-metadata.xml存储构件元信息。
	国内访问maven中央仓库会受到GFW的影响导致网速太慢，可以配置阿里云提供的镜像仓库：
		<settings>
			...
			<mirrors>
				<mirror>
					<id>nexus-aliyun</id>
					<mirrorOf>central</mirrorOf>
					<name>Nexus aliyun</name>
					<url>http://maven.aliyun.com/nexus/content/groups/public</url>
				</mirror>
			</mirrors>
		</settings>
	<mirrorOf>中可以使用*表示所有仓库都使用配置的仓库作为镜像，也可以用这些:
		<mirrorOf>external:*</mirrorOf> 	--所有远程仓库使用镜像，localhost和file://协议的除外
		<mirrorOf>repo,repo2</mirrorOf>		--repo1、repo2使用镜像
		<mirrorOf>*,!repo1</mirrorOf>		--除了repo1的所有仓库使用镜像
	在中央仓库中搜索组件：
		https://mvnrepository.com/ 提供几乎所有公共仓库搜索服务
		https://repository.sonatype.org/
	
													第五章
	项目构建的生命周期：清理、编译、测试、部署
	maven抽象了上述过程，定义了一系列实用的软件构建生命周期，最后通过插件实现生命周期中定义的目标。
	maven提供三套独立的生命周期：clean、default、site。每套生命周期都由多个阶段组成，如default生命周期包括了从校验
编译、测试到安装部署的各个阶段，maven命令通过组合生命周期中的阶段实现目标。
	maven插件在需要使用的时候才会被下载，每个插件都有自己的一些目标，对应的是一些功能（可以看成是入口方法），如dependency插件目标：
dependency:tree 用于列出依赖树
	maven根据命令选择对应的生命周期阶段组合，调用插件的目标完成任务。maven默认已经将一些生命周期阶段和特定的插件目标
绑定，如clean生命周期的clean阶段绑定了clean插件的clean目标（pre-clean阶段没有绑定插件目标，所以不会有什么行为）。
	手动设置生命周期阶段绑定插件目标：设置default生命周期的verify阶段绑定maven-source-plugin的jar-no-fork目标：
		<build>
			<plugins>        
				<plugin>
				  <groupId>org.apache.maven.plugins</groupId>
				  <artifactId>maven-source-plugin</artifactId>
				  <version>2.1.1</version>
				  <executions>
					<excution>
						<id>xxxx<id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</excution>
				  </excutions>
				</plugin>
			</plugins>
		</build>
	可以为同一个生命周期阶段绑定多个插件目标，这些插件目标将按配置的顺序执行。
	命令行中可以带参数给插件的目标使用，-D参数键=参数值 -D其实是设置java的系统属性（java自带），
		mvn install -Dmaven.test.skip可以跳过test插件的test目标。
	在POM中可以为插件配置全局的参数：
		...
		<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>
		..
	为插件目标配置参数：maven-antrun-plugin插件的run目标可以调用ant的任务：
		<plugin>
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-antrun-plugin</artifactId>
		  <version>1.3</version>
		  <executions>
			<excution>
				<id>xxxx<id>
				<phase>validate</phase>
				<goals>
					<goal>run</goal>
				</goals>
				<configuration>
					<tasks>
						<echo>hello world</echo>
					</tasks>
				</configuration>
			</excution>
		  </executions>
		</plugin>
		使用maven-help-plugin插件查看插件的信息：
		mvn help:describe-Dplugin=groupid:artifactId:version或者：
		mvn help:describe-Dplugin=插件目标名 -Ddetail可以查看详情
	使用目标前缀直接调用插件目标：
		mvn help:describe...	help是maven-help-plugin 的目标前缀
	配置插件仓库：
		<pluginRepositories>
			<pluginRepository>
				...和依赖仓库相同
			</pluginRepository>
		</pluginRepositories>
	配置插件时虽然可以不写版本号，核心插件会使用maven官方设定的版本号，而其他插件会解析插件仓库中最新的release版本，
所以最好还是手动配置需要的版本号
	
												第六章
	聚合项目：为了一次构建一组相互关联的项目，可以使用聚合项目组织项目群结构，聚合项目需要设置打包方式：
<packaging> pom </packaging>
	设置被聚合模块：
		<modules>
			<module>child-project1</module>
			<module>child-project2</module>
		</modules>
	通常被聚合模块和聚合项目以父子目录结构组织，但是maven不要求一定要这样，<module>元素使用的实际是被聚合模块的路径，使用
平行目录结构：<module>../child-project1</module>
	在聚合项目下使用mvn clean install，maven会分析被聚合模块并计算出一个构建顺序，根据这个顺序来依次构建各个模块。
	继承：为了统一设置一组项目的一些信息，可以为这一组项目设置一个共同的父项目，子模块使用<parent>元素实现继承：
<parent>
	<groupId>com.zhangwei.springdemo</groupId>
	<artifactId>bean-demo</artifactId>
	<version>1.0.0.SNAPSHOT</version>
	<relativePath>../parent-project/pom.xml</relativePath>
</parent>
	<relativePath>元素如果不写，默认值就是../pom.xml。
	子模块可以继承的父工程元素包括：groupId、version、properties、url等信息，还有：distributionManagement、dependencies、
dependencyManagement、repositories、build等
	子模块可以继承父工程的repositories，如果公司私服仓库被写在父工程的pom中，但是如果本地仓库没有父工程，那在构建子模块的
时候就会报错：relativePath设置错误，找不到父项目依赖。通常父项目会被安装到公司私服，所以这时就需要在子模块中再写一次
repositories的配置了。
	<dependencyManagement>元素声明的依赖不会被实际引入，通常是用来统一设置依赖的参数信息，比如在父工程中指定各个依赖
的版本号，子模块会继承这些信息，然后子模块使用自己的<dependencies>引入实际的依赖，使用dependencies时就不需要再写版本号了。
	如果当前项目想要使用某个项目的dependencyManagement声明，可以在自己的dependencyManagement中使用import引入：
<dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>xxx</groupId>
			<artifactId>yyy</artifactId>
			<version>???</version>
			<type>pom</type>
			<scope>import</scope>
		</dependency>
	</dependencies>
</dependencyManagement>
	在父POM中统一插件配置：
<build>
	<pluginManagement>
		<plugins>
			<plugin>
				...
				<configuration>
					...
				</configuration>
			</plugin>
		</plugins>
	</pluginManagement>
</build>
	子模块中使用插件只需要写插件的基础信息引入就可以了
	maven的聚合和继承是两个不同的概念，二者的目的是完全不同的，聚合模块知道它包含的被聚合模块，但是被聚合模块并不需要
知道聚合模块，其目的是方便快速构建。
	继承的父POM不知道谁继承了它，而子模块必须指定所继承的父模块，通常用于消除重复配置。
	聚合模块和继承父模块的packaging都必须是pom。
	实际中通常会把继承和聚合融合成一个模块，这样简化了模型结构。
	maven强调约定由于配置，使用默认的约定项目结构可以降低出错的概率和学习的复杂性，当然maven也支持自定义配置，比如修改
源代码路径：
<build>
	<sourceDirectory>src/java</sourceDirectory>
</build>
	超级POM的位置：$MAVEN_HOME/lib/maven-model-builder-x.x.x.jar下的org/apache/maven/model/pom-4.0.0.xml
	超级POM定义了仓库和插件仓库地址为中央仓库，默认关闭了SNAPSHOT的支持；超级POM还定义了源代码目录、资源目录、测试代码
目录、输出目录、构件名结构等；核心插件的版本号也在超级POM中指定。
	构建聚合模块指定的子模块时，maven会先构建子模块依赖的模块，一直找到没有其他依赖模块的模块开始构建。
	裁剪构建模块：
	mvn clean install -pl demo1-module  		-pl只构建列出的模块
	mvn clean install -pl demo1-module -am 		-am也构建列出模块依赖的模块 -amd构建依赖列出模块的模块
	mvn clean install -rf demo1-module 			-rf在完整的构建顺序基础上从指定模块开始构建

nexus下载：https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss	