												rabbitmq记录
	第一部分：安装
	先安装erlang环境，首先安装erlang依赖：
		sudo yum install -y gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf java-1.8.0-openjdk-devel git unixODBC
	下载erlang：
		wget https://github.com/erlang/otp/archive/OTP-19.3.6.12.tar.gz
	编译安装erlang，执行：
		./otp_build autoconf
		./configure --prefix=/usr/local/erlang
		make
		make install
	配置环境变量，编辑 /etc/bashrc，添加：
		ERLANG_HOME=/usr/local/erlang
		#注释原PATH
		PATH=$PATH:$ERLANG_HOME/bin
	下载rabbitmq：
		wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.12/rabbitmq-server-generic-unix-3.6.12.tar.xz
	解压缩后配置环境变量，编辑 /etc/bashrc，添加：
		RABBITMQ_HOME=/usr/local/rabbitmq
		PATH=$PATH:$RABBITMQ_HOME/sbin
		export PATH
	刷新配置文件：
		source /etc/bashrc
	检查erlang：
		erl
	启动rabbitmq：
		rabbitmq-server -detached
	关闭rabbitmq：
		rabbitmqctl stop
		# 若单机有多个实例，则在rabbitmqctlh后加–n 指定名称
		# 使用kill命令关闭 kill -9 5479
	查看rabbitmq状态：
		rabbitmqctl status
	查看插件：
		rabbitmq-plugins list
	启用web gui插件：
		rabbitmq-plugins enable rabbitmq_management
	添加用户：
        标准格式：
            rabbitmqctl add_user Username Password
        添加用户 admin
		    rabbitmqctl add_user admin admin
    删除用户：
        标准格式：
            rabbitmqctl delete_user Username
        删除用户 admin
            rabbitmqctl delete_user admin
    查看当前用户列表:
        rabbitmqctl list_users
    rabbitmq用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他：
        administrator：
            可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。
        monitoring：
            可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息（进程数，内存使用等）。
        policymaker：
            可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息。
        management：
            仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。
        other：
            无法登陆管理控制台，通常就是普通的生产者和消费者。
	设置角色：
        标准格式：
            rabbitmqctl set_user_tags User Tag
        设置用户 admin 为 administrator：
		    rabbitmqctl set_user_tags admin administrator
        可以给同一用户设置多个角色
            rabbitmqctl set_user_tags admin monitoring policymaker
    rabbitmq中，用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读权限、写权限。
        配置权限控制exchange，queue的声明和删除。
        写权限控制向exchange发送消息以及queue和exchange的绑定(bind)操作。
        读权限控制到从queue里取消息。
    设置用户权限：
        标准格式：
            rabbitmqctl set_permissions -p VHostPath User ConfP WriteP ReadP
        为用户 admin 添加所有权限：
            rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
    查看(指定hostpath)所有用户的权限信息：
        rabbitmqctl list_permissions [-p VHostPath]
    查看指定用户的权限信息：
        rabbitmqctl list_user_permissions User
    清除用户的权限信息
        rabbitmqctl clear_permissions [-p VHostPath] User
	访问web控制界面：
		192.168.56.2:15672
    
    第一个java连接rabbitmq实例：
    rabbitmq客户端maven依赖：
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>4.2.1</version>
        </dependency>
    消息生产者：
        import java.io.IOException;
        import java.util.concurrent.TimeoutException;

        import com.rabbitmq.client.Channel;
        import com.rabbitmq.client.Connection;
        import com.rabbitmq.client.ConnectionFactory;
        import com.rabbitmq.client.MessageProperties;

        public class SimpleMessageProducer {

            private static final String EXCHANGE_NAME = "exchange_demo";
            private static final String QUEUE_NAME = "queue_demo";
            private static final String ROUTING_KEY = "routingkey_demo";
            private static final String IP_ADDRESS = "192.168.137.2";
            private static final int PORT = 5672;
            
            public static void main(String[] args) throws IOException, TimeoutException {
                ConnectionFactory factory = new ConnectionFactory();
                factory.setHost(IP_ADDRESS);
                factory.setPort(PORT);
                factory.setUsername("admin");
                factory.setPassword("admin");
                Connection connection = factory.newConnection();
                Channel channel = connection.createChannel();
                channel.exchangeDeclare(EXCHANGE_NAME, "direct",true,false,null);
                channel.queueDeclare(QUEUE_NAME, true, false, false, null);
                channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);
                String message = "hello rabbitmq";
                channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, 
                        MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());
                channel.close();
                connection.close();		
            }
        }
    消息消费者：
        import java.io.IOException;
        import java.util.concurrent.TimeoutException;

        import com.rabbitmq.client.AMQP;
        import com.rabbitmq.client.Address;
        import com.rabbitmq.client.Channel;
        import com.rabbitmq.client.Connection;
        import com.rabbitmq.client.ConnectionFactory;
        import com.rabbitmq.client.Consumer;
        import com.rabbitmq.client.DefaultConsumer;
        import com.rabbitmq.client.Envelope;

        public class SimpleMessageConsumer {

            private static final String QUEUE_NAME = "queue_demo";
            private static final String IP_ADDRESS = "192.168.137.2";
            private static final int PORT = 5672;
            
            public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {
                Address[] addresses = new Address[] {new Address(IP_ADDRESS,PORT)};
                ConnectionFactory factory = new ConnectionFactory();
                factory.setUsername("admin");
                factory.setPassword("admin");
                Connection connection = factory.newConnection(addresses);
                Channel channel = connection.createChannel();
                channel.basicQos(64);
                Consumer consumer = new DefaultConsumer(channel) {
                    @Override
                    public void handleDelivery(String consumerTag,Envelope envelope,
                            AMQP.BasicProperties properties,byte[] body) throws IOException {
                        System.out.println("receive message : "+new String(body));
                        channel.basicAck(envelope.getDeliveryTag(), false);
                    }
                };
                channel.basicConsume(QUEUE_NAME, consumer);
                Thread.sleep(10000);
                channel.close();
                connection.close();
            }
        }
    
    
    第二部分 核心概念
    rabbitmq的工作：接收消息、存储消息、转发消息。
    生产者（Producer）投递的消息一般包含2个部分：标签和消息体，可以类比为http请求的请求头和请求数据。标签用于描述消息，如消息要投递的交换器和
消息的路由键等。
    消费者（Consumer）订阅rabbitmq的消息队列，消费队列中的消息时，消息的标签不会被传输给消费者，传输的只有消息体，所以消费者不知道消息的投递者
是谁，从设计上来看，消费者也不需要知道生产者。
    rabbitmq服务节点称为Broker。
    队列（Queue）是Broker内存储消息的结构，多个消费者可以订阅同一个队列，但是一个队列中的一个消息不会被分发给多个消费者，这些消费者是轮流消费
队列中的消息的。
    交换器（Exchange）是Broker内部接收生产者投递消息的对象，交换器收到消息后再将消息路由到一个或多个队列中，如果路由不到接收队列，就会将消息返
回生产者或丢弃该消息。
    路由键（RoutingKey）是生产者投递消息时设置的消息标签的一部分（某些消息可以不设置）。交换器根据消息的路由键和自身和队列的绑定键决定路由路径。
    绑定（Binding）是交换器和队列的关系描述，通常通过绑定键（BindingKey）来表达。队列A和队列B可以使用同一个绑定键绑定同一个交换机。
    rabbitmq常用的交换器类型有4种：fanout、direct、topic、headers。AMQP协议中提供了另外2种交换器：System和自定义。
    fanout交换器无视消息的路由键，将收到的所有消息路由到所有绑定的队列。
    direct交换器将消息路由到绑定键和消息路由键完全匹配的队列。
    topic交换器匹配消息的路由键和自身的绑定键时，采用模糊匹配规则：
        约定BingdingKey使用.分割的字符串可以使用*和#，*表示一个字符串，#表示0或多个字符串
        例子：
            绑定键：*.key1.* 匹配 a.key1.b
            绑定键：#.key2.* 匹配 a.b.key2.c
    headers交换器不使用路由键匹配路由，而是使用消息的headers属性（一个键值对）来路由，headers交换器的绑定键也使用键值对。headers交换器基本不会使用。
    生产者连接rabbitmq Broker投递消息流程：
    与Broker建立Connection，然后打开Channel，然后声明一个Exchange，然后声明一个Queue，然后绑定Exchange和Queue，然后发送消息（消息携带要投递的交换
器和路由键），投递成功后关闭Channel，然后关闭Connection。
    消费者消费消息流程：
    与Broker建立Connection，然后打开Channel，然后发送消费请求（同时指定回调函数），Broker发送消息给消费者，消费者收到消息后发送确认信息给Broker，然
后Broker从队列中删除已确认收到的消息，然后关闭Channel，然后关闭Connection。
    Connection是一个实际的TCP连接，而Channel是建立在Connection上的虚拟连接，发送给Broker的AMQP指令都是通过Channel完成的。
    使用Channel传递消息比起直接使用Connection，可以减小频繁建立和释放TCP连接的性能开销。当每个Channel内的流量较大时，这样做也会导致新的问题，这时需
要增加Connection数量。
    AMQP协议：
    AMQP协议是Rabbitmq实现的主要协议，也是消息队列系统的规范协议。rabbitmq的核心概念其实都来自AMQP协议。
    AMQP协议分为三层：
        Module Layer主要是定义客户端可以调用的命令，即服务端提供给客户端的功能接口，例如Queue.Declare命令用于声明一个队列；
        Session Layer主要是描述客户端和服务端连接的通信模型，例如通信同步机制和错误处理；
        Transport Layer主要是描述底层二进制数据流的处理，比如信道复用等。
    当客户端执行 factory.newConnection() 时，客户端将发送一个AMQP request给Broker，该请求包括一个Protocal Header 0-9-1请求头，标识建立的连接使用
AMQP 0-9-1协议，Broker将返回一个包含Connection.Start响应头的response。

	第三部分 java客户端API
	RabbitMQ官方提供的java客户端以com.rabbitmq.client为包名，核心类和接口包括Channel、Connection、ConnectionFactory、Consumer等。
	创建连接工厂（可以使用builder模式）：
		public class ConnectionFactoryBuilder {
			private static final String IP_ADDRESS = "192.168.56.2";
			private static final int PORT = 5672;
			private static final String USERNAME = "admin";
			private static final String PASSWORD = "admin";

			public static ConnectionFactory build(){
				ConnectionFactory factory = new ConnectionFactory();
				factory.setHost(IP_ADDRESS);
				factory.setPort(PORT);
				factory.setUsername(USERNAME);
				factory.setPassword(PASSWORD);
				//使用url初始化连接工厂：
				//factory.setUri("amqp://admin:admin@192.168.56.2:5672/");
				return factory;
			}
		}
	使用连接工厂创建连接：
		ConnectionFactory factory = ConnectionFactoryBuilder.build();
		Connection connection = factory.newConnection();
	一个Connection可以创建多个Channel，多个线程间不应该共用一个Channel，它不是线程安全的。
		Channel channel = connection.createChannel();

	Channel核心API：
	交换机相关API：
		Exchange.DeclareOk exchangeDeclare(String exchange, 
											String type, 
											boolean durable, 
											boolean autoDelete,
											boolean internal,
											Map<String, Object> arguments) throws IOException;
		这个方法是常用的声明交换机的方法[如果不存在就创建，如果存在则交换机类型和其他属性要和实际交换机相同，否则关闭channel时将抛出异常]，
	其基本参数说明如下：
			exchange：交换机名称
			type：交换机类型，可以使用字符换和BuiltinExchangeType枚举量
			durable：是否持久化
			autoDelete：为true时，当最后一个绑定到此交换机上的队列(或交换机)删除后，自动删除此交换机
			internal：是否为内部交换机，内部交换机不能给客户端直接使用，默认为false
			arguments：扩展参数
		这个方法还有几个重载版本。
		
		void exchangeDeclareNoWait(...) throws IOException;
		这个方法和 exchangeDeclare 功能相同[参数也类似]，不同在于 exchangeDeclareNoWait 返回类型为void，所以调用这个方法不会等待服务器返回
	（不阻塞客户端），但是调用这个方法后就马上使用声明的交换机，这时可能服务端初始化还没结束，就会抛出异常。
		
		Exchange.DeclareOk exchangeDeclarePassive(String name) throws IOException;
		这个方法主要用来检测相应的交换机是否已存在，如果已存在就正常返回，否则将抛出异常并关闭channel。
		
		Exchange.DeleteOk exchangeDelete(String exchange) throws IOException;
		这个方法用于删除交换机，无论是否绑定到队列或其他交换机都执行删除。

		Exchange.DeleteOk exchangeDelete(String exchange, boolean ifUnused) throws IOException;
		用于删除交换机，ifUnused表示是否绑定到队列或其他交换机。

		void exchangeDeleteNoWait(String exchange, boolean ifUnused) throws IOException;
		也用于删除交换机，不等待服务器返回。

	队列相关API：
		Queue.DeclareOk queueDeclare(String queue, 
									boolean durable, 
									boolean exclusive, 
									boolean autoDelete,
									Map<String, Object> arguments) throws IOException;
		这个方法用于声明队列[如果不存在就创建，如果存在则队列的属性要和实际队列相同，否则关闭channel时将抛出异常]，参数说明如下：
			queue：队列名称
			durable：是否持久化
			exclusive：是否为仅用于此次连接的专用队列（如果为true，即使durable为true，连接断开时这个队列也会被销毁）
			autoDelete：为true时，当所有消费者都解除订阅此队列后就自动删除此队列（必须是已有消费者取消订阅）
			arguments：扩展参数
		这个方法的另一个重载版本是： 
			Queue.DeclareOk queueDeclare() throws IOException;
			这个方法用于创建一个服务器自动命名（称为匿名队列）、此次连接专用、非持久化、自动删除的队列。
		
		void queueDeclareNoWait(...) throws IOException;
		这个方法和 queueDeclare 功能相同[参数也类似]，不同在于它不等待服务器返回，所以不阻塞客户端调用，当然使用这个方法声明队列也存在风险。

		Queue.DeclareOk queueDeclarePassive(String queue) throws IOException;
		这个方法主要用来检测相应的队列是否已存在，如果已存在就正常返回，否则将抛出异常并关闭channel。

		Queue.DeleteOk queueDelete(String queue) throws IOException;
		用于删除队列，无论队列是否还有订阅者、是否保存有消息。

		Queue.DeleteOk queueDelete(String queue, boolean ifUnused, boolean ifEmpty) throws IOException;
		用于删除队列，参数：queue为队列名，ifUnused是否还有订阅者，ifEmpty是否为空

		void queueDeleteNoWait(String queue, boolean ifUnused, boolean ifEmpty) throws IOException;
		上面方法的重载版本，不需要等待服务器返回。

		Queue.PurgeOk queuePurge(String queue) throws IOException;
		用于清空队列中的消息。

	绑定相关API：
		Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;
		用于绑定交换机和队列，参数：queue为队列名，exchange为交换机名，routingKey为绑定键。

		Queue.BindOk queueBind(String queue, String exchange, String routingKey, Map<String, Object> arguments) throws IOException;
		上面方法的重载版本，参数arguments表示其他属性。

		void queueBindNoWait(String queue, String exchange, String routingKey, Map<String, Object> arguments) throws IOException;
		也是用于绑定队列和交换机，不需要等待服务器返回。

		Queue.UnbindOk queueUnbind(String queue, String exchange, String routingKey) throws IOException;
		用于解绑队列和交换机，只是根据解绑routingKey对应的绑定关系（一个交换机和队列之间可以有多个绑定键）。它的另一个重载版本比其多一个参数：
	Map<String, Object> arguments

		Exchange.BindOk exchangeBind(String destination, String source, String routingKey) throws IOException;
		用于绑定交换机到交换机，它的另一个重载版本比其多一个参数：	Map<String, Object> arguments

		void exchangeBindNoWait(String destination, String source, String routingKey, Map<String, Object> arguments) throws IOException;
		也是用于绑定队列到交换机，不需要等待服务器返回。示例：
			channel.exchangeDeclare("myInnerExchange","fanout",true,false,true,null);
            channel.exchangeDeclare("pendingExchange1","direct",true,false,false,null);
            channel.queueDeclare("pendingQueue1",true,false,false,null);
            channel.queueBind("pendingQueue1","myInnerExchange","");
            channel.exchangeBind("myInnerExchange","pendingExchange1","pendingExchange1-myInnerExchange");

		Exchange.UnbindOk exchangeUnbind(String destination, String source, String routingKey) throws IOException;
		用于解绑交换机间的绑定。它的另一个重载版本比其多一个参数：	Map<String, Object> arguments

		void exchangeUnbindNoWait(String destination, String source, String routingKey, Map<String, Object> arguments) throws IOException;
		方法exchangeUnbind的非阻塞版本。

	发送消息API：
		void basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) throws IOException;
		用于发送消息，参数介绍如下：
			exchange：要发送给的交换器
			routingKey：消息的路由键，用于匹配交换器到队列(或交换器)的绑定键
			props：消息的基本属性集
			body：消息内容
		参数中props可以包括14个属性：contentType、contentEncoding、headers、deliveryMode等，例如：
			 channel.basicPublish("pendingExchange1","pendingExchange1-myInnerExchange",
                    new AMQP.BasicProperties().builder()
                            .contentType("text/plain")
                            .deliveryMode(2)
                            .priority(1)
                            .build(),
                    "hello from NewMessageProducer".getBytes());
			指定消息类型（contentType）为普通文本，投递模式（deliveryMode）为2（即把消息持久化到服务器上），优先级（priority）为1

		void basicPublish(String exchange, String routingKey, boolean mandatory, BasicProperties props, byte[] body) throws IOException;
		上面方法的重载版本，新参数：mandatory表示

		void basicPublish(String exchange, String routingKey, boolean mandatory, boolean immediate, BasicProperties props, byte[] body) throws IOException;
		上面方法的重载版本，新参数：immediate表示

	消费消息API：
		void basicQos(int prefetchCount) throws IOException;
		用于通知服务器不要同时给一个消费者推送多于prefetchCount个消息，即一旦有prefetchCount个消息还没有ack，则该consumer将阻塞，直到有消息ack

		String basicConsume(String queue, boolean autoAck, Consumer callback) throws IOException;
		用于消费者订阅队列，这个方法还有一些重载版本：
			String basicConsume(String queue, boolean autoAck, Map<String, Object> arguments, Consumer callback) throws IOException;
			String basicConsume(String queue, boolean autoAck, String consumerTag, Consumer callback) throws IOException;
			String basicConsume(String queue, boolean autoAck, String consumerTag, boolean noLocal, boolean exclusive, 
								Map<String, Object> arguments, Consumer callback) throws IOException;
		参数介绍如下：
			queue：队列名称
			autoAck：是否自动确认
			consumerTag：消费者标签，用于区分消费者（同一个channel可以同时供多个消费者使用）
			callback：消息消费者对象
			noLocal：设为true表示不把同一个Connection中生产者发生的消费传递给这个Connection中的消费者
			exclusive：是否排他
			arguments：扩展参数
	
	消费者接收消息的API主要涉及接口：Consumer和类：DefaultConsumer。DefaultConsumer实现了Consumer接口，通常可以通过继承DefaultConsumer并覆写其部分方法来
接收消息和进行其他操作。示例：
		channel.basicQos(20);
        Consumer consumer = new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope,
                                       AMQP.BasicProperties properties, byte[] body) throws IOException {
                System.out.println("receive message : "+new String(body));
                channel.basicAck(envelope.getDeliveryTag(), false);
            }
        };
        channel.basicConsume("pendingQueue1",false, consumer);
	Consumer接口方法：
		public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig)
		在Connection或Channel关闭时调用

		public void handleConsumeOk(String consumerTag)
		在接收消息后其他方法被调用前被调用

		public void handleCancel(String consumerTag) throws IOException 
		用于取消订阅，Channel接口也提供一个方法用于取消订阅：
		void Channel.basicCancel(String consumerTag) throws IOException;

		public void handleCancelOk(String consumerTag)
		在取消订阅后被调用
	
	Channel接口中的其他与消费消息相关API：
		GetResponse basicGet(String queue, boolean autoAck) throws IOException;
		用于从服务器'拉取'一条消息
		示例：
			GetResponse resp = channel.basicGet("pendingQueue1",false);
			System.out.println("receive message : "+new String(resp.getBody()));
			channel.basicAck(resp.getEnvelope().getDeliveryTag(),false);
		不应该使用循环调用channel.basicGet来获取消息以代替channel.basicConsume，因为basicConsume调用是将channel置为推送模式，其性能要比使用多次
	拉操作好得多。

		void basicAck(long deliveryTag, boolean multiple) throws IOException;
		用于确认消息已被消费，参数deliveryTag表示消息的标识(ID).
		消息确认机制：消费者订阅队列时指定的参数autoAck用于设置是否自动确认，为false表示，只有当服务器收到消费者发送的确认信号后才会从队列中删除发送的消息，
	如果为true就表示服务器发送消息给消费者后就删除消息。
		消息队列中的消息只有两种状态：准备发送和未确认。当一个消息被发送给消费者，而消费者还没有确认，消息就处于未确认状态，如果连接中断，服务器就认为消息消费
	失败，就把消息重置为准备发送状态。如果消费者发回确认信息，服务器就标记该消息并随后删除。需要注意，如果消费者消费消息时出现了异常，没有发回确认信息，并且也
	一直没有关闭channel和connection，那么这条消息就一直处于未确认状态，既不能删除，也不能发送给其他消费者（以及当前消费者）。

		void basicReject(long deliveryTag, boolean requeue) throws IOException;
		用于拒绝消息，参数requeue为true，（未确认）消息将被从新加入消息队列（重新标记为准备发送），然后消息可以被发送给订阅队列的任何消费者，为false时，消息将
	从队列中移除。

		void basicNack(long deliveryTag, boolean multiple, boolean requeue) throws IOException;
		用于批量拒绝消息，参数multiple为false时，这个方法和basicReject功能相同，multiple为true时，表示这条消息编号之前的未确认消息都需要被移除出队列。

		Basic.RecoverOk basicRecover(boolean requeue) throws IOException;
		用于请求从新发送未确认的消息，参数requeue为true时，未确认消息从新进入队列并可以发送给订阅队列的任何消费者，为false时，未确认消息会被发送给原消费者（即未
	发回确认信号的消费者）。

		Basic.RecoverOk basicRecover() throws IOException;
		上面方法的重载版本，相当于basicRecover(true);

	Connection和Channel使用结束后需要关闭，可以直接关闭Connection，那么Connection创建的Channel也会被关闭，也可以手动先关闭Channel，再关闭Connection。
		channel.close();
        connection.close();
	Connection和Channel的生命周期状态：Open、Closing、Closed
	Connection和Channel中的生命周期相关接口：
		void addShutdownListener(ShutdownListener listener)
		这个方法是Connection和Channel继承自ShutdownNotifier接口，用于注册一个监听器，在Connection状态变为closed时，监听器的shutdownCompleted方法被调用，
		该方法签名如下：
			void shutdownCompleted(ShutdownSignalException cause)
			参数cause为导致连接断开（channel关闭）的异常
		
		void removeShutdownListener(ShutdownListener listener);
		用于移除方法addShutdownListener注册的监听器，也来自ShutdownNotifier接口

		ShutdownSignalException getCloseReason();
		用于获取异常信息，也来自ShutdownNotifier接口

		ShutdownSignalException提供以下方法：
		 	public Object getReference()
			返回关闭的channel或connection
			public Method getReason() 
			返回关闭channel或connection的方法
	示例：
		connection.addShutdownListener(new ShutdownListener() {
            @Override
            public void shutdownCompleted(ShutdownSignalException cause) {
                System.out.println(cause.getReason());
                System.out.println(cause.getReference());
            }
        });

		

		


	

	