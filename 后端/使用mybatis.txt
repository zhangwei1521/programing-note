                                    使用mybatis
    第一章 ORM框架的起源，JDBC、mybatis和hibernate的区别及应用场景
	本质上java程序访问操作数据库都是通过JDBC实现的，JDBC包括两个部分：官方的JDBC接口（规范）和数据库厂商对标准接口的
实现（JDBC驱动程序）。JDBC的问题在于每次访问数据库都需要在自己的程序中重复的编写如下语句：加载驱动、建立连接、建立会话、
执行sql、关闭会话、关闭连接，还得处理可能抛出的繁多的异常。ORM框架就是为了解决JDBC的这种问题而开发的，但是ORM框架使用
的仍然是JDBC，只是对JDBC进行了一层或多层封装而已。
	ORM原称：Object Relation Mapping，意为对象关系映射，ORM模型物理上是一个或一组描述程序中的对象（或类）和数据库中的
一条记录（或表）之间的对应关系的文件。通常所说的ORM模型指的是表示程序对象和数据库记录对应关系的方式。
	Hibernate是java编程体系中最为完善的ORM框架，它使用xml文件或注解来定义java实体类（对象）和数据库表（记录）间的对应
关系，映射采用全表映射，这样就不需要再手动的去操作数据库了，所有的操作都在对象上完成，由框架去实现对应的数据库操作。
这种完善的对象关系映射看起来非常方便，但是也存在问题，那就是灵活性和性能问题，把操作数据库完全交给框架时也就失去了精
确控制sql的权利，这样很难对sql进行调优，全表映射对于字段较多的表来说取出不需要的字段是一种网络带宽的浪费。所以Hibernate
很好，但不是万能的解决方案。
	mybatis是一个半自动的ORM框架，需要自己去写sql，有些时候，这显得有些繁琐，有些时候这又意味着操作数据库更加自由。
映射xml文件或注解中的sql都对应一个java接口类中的一个方法，操作数据库就通过调用这个方法实现。
	总体来说，原始的JDBC编程接口使用起来太过繁琐，实际开发中通常很少使用，Hibernate开发效率高，但是对于复杂性高、性能
要求高的系统来说不太适合，通常用于数据关系不太复杂、性能要求不太高的系统。mybatis则不适合用于需要快速开发的低复杂性系
统，适合用在数据关系复杂、需要通过优化sql提供高效操作数据库能力的系统。
	第二章 搭建工程和实例入门
	使用maven搭建mybatis入门工程，引入mybatis依赖：
		<dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
	使用mysql数据库需要引入mysql驱动的依赖（mysql5.5及之后版本直接引入8.0的驱动）：
		<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.15</version>
        </dependency>
	需要注意，引入上面的驱动后，配置驱动名称需要配置为：com.mysql.cj.jdbc.Driver
	为了写代码方便，这里再引入log4j、lombok和junit的依赖。
	工程目录结构：
		mybatis-demo1
			src
				main
					java
						com.zhangwei.mybatisdemo1
							entity
								Employee.java
							mapper
								EmployeeMapper.java
							service
								EmployeeService.java
							util
								SqlSessionFactoryUtil.java
					resources
						mybatis-config.xml
						log4j.properties
						mapper
							EmployeeMapper.xml
				test
					java
						com.zhangwei.mybatisdemo1
							MybatisDemo1Test.java
			pom.xml
	在mybatis-config.xml中配置数据库连接信息和引入mapper映射文件：
		<?xml version="1.0" encoding="utf8" ?>
		<!DOCTYPE configuration
			PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>
			<typeAliases>
				<typeAlias type="com.zhangwei.mybatisdemo1.entity.Employee" alias="emp"/>
			</typeAliases>
			<environments default="dev">
				<environment id="dev">
					<transactionManager type="JDBC"></transactionManager>
					<dataSource type="POOLED">
						<property name="driver" value="com.mysql.cj.jdbc.Driver"/>
						<property name="url" value="jdbc:mysql://localhost:3306/jdbc_test"/>
						<property name="username" value="root"/>
						<property name="password" value="root"/>
					</dataSource>
				</environment>
			</environments>
			<mappers>
				<mapper resource="mapper/EmployeeMapper.xml"/>
			</mappers>
		</configuration>
	在EmployeeMapper.xml文件中配置ORM映射规则：
		<?xml version="1.0" encoding="utf8" ?>
		<!DOCTYPE mapper
			PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		<mapper namespace="com.zhangwei.mybatisdemo1.mapper.EmployeeMapper">
			<select id="getEmpById" parameterType="int" resultType="emp">
			select * from emp where empno=#{empno}
			</select>
		</mapper>
	工具类SqlSessionFactoryUtil用来获取SqlSession对象，这个对象类似于jdbc中的Connection对象。
		public class SqlSessionFactoryUtil {
			private static SqlSessionFactory sqlSessionFactory;

			private SqlSessionFactoryUtil(){}

			public static void initSqlSessionFactory(){
				if(sqlSessionFactory == null){
					synchronized (SqlSessionFactoryUtil.class){
						if(sqlSessionFactory==null){
							String configFileName = "mybatis-config.xml";
							try (InputStream input = Resources.getResourceAsStream(configFileName)){
								sqlSessionFactory = new SqlSessionFactoryBuilder().build(input);
							} catch (IOException e) {
								Logger.getLogger(SqlSessionFactoryUtil.class.getName()).log(Level.SEVERE,null,e);
							}
						}
					}
				}
			}

			public static SqlSession getSqlSession(){
				if(sqlSessionFactory==null){
					initSqlSessionFactory();
				}
				return sqlSessionFactory.openSession();
			}
		}
	SqlSession由SqlSessionFactory实例创建，在系统中，应该只为一个数据库创建一个单例的SqlSessionFactory对象，否则就可能
因为存在过多的SqlSessionFactory对象可能会导致创建出大量的SqlSession对象，造成数据库负担增加。SqlSessionFactory对象是由
SqlSessionFactoryBuilder通过读取配置文件（即mybatis-config.xml）后创建的（实际上SqlSessionFactoryBuilder是通过一个
Configuration对象去读取的配置文件）。SqlSessionFactoryBuilder在创建了SqlSessionFactory实例后就可以卸载了。系统运行期间
SqlSessionFactory始终以单例对象存在，SqlSession对象在开启事务时需要手动提交事务，而且应该在操作数据库结束后关闭连接，这通
常在finally代码块中完成。
	