                                    使用mybatis
    第一章 ORM框架的起源，JDBC、mybatis和hibernate的区别及应用场景
	本质上java程序访问操作数据库都是通过JDBC实现的，JDBC包括两个部分：官方的JDBC接口（规范）和数据库厂商对标准接口的
实现（JDBC驱动程序）。JDBC的问题在于每次访问数据库都需要在自己的程序中重复的编写如下语句：加载驱动、建立连接、建立会话、
执行sql、关闭会话、关闭连接，还得处理可能抛出的繁多的异常。ORM框架就是为了解决JDBC的这种问题而开发的，但是ORM框架使用
的仍然是JDBC，只是对JDBC进行了一层或多层封装而已。
	ORM原称：Object Relation Mapping，意为对象关系映射，ORM模型物理上是一个或一组描述程序中的对象（或类）和数据库中的
一条记录（或表）之间的对应关系的文件。通常所说的ORM模型指的是表示程序对象和数据库记录对应关系的方式。
	Hibernate是java编程体系中最为完善的ORM框架，它使用xml文件或注解来定义java实体类（对象）和数据库表（记录）间的对应
关系，映射采用全表映射，这样就不需要再手动的去操作数据库了，所有的操作都在对象上完成，由框架去实现对应的数据库操作。
这种完善的对象关系映射看起来非常方便，但是也存在问题，那就是灵活性和性能问题，把操作数据库完全交给框架时也就失去了精
确控制sql的权利，这样很难对sql进行调优，全表映射对于字段较多的表来说取出不需要的字段是一种网络带宽的浪费。所以Hibernate
很好，但不是万能的解决方案。
	mybatis是一个半自动的ORM框架，需要自己去写sql，有些时候，这显得有些繁琐，有些时候这又意味着操作数据库更加自由。
映射xml文件或注解中的sql都对应一个java接口类中的一个方法，操作数据库就通过调用这个方法实现。
	总体来说，原始的JDBC编程接口使用起来太过繁琐，实际开发中通常很少使用，Hibernate开发效率高，但是对于复杂性高、性能
要求高的系统来说不太适合，通常用于数据关系不太复杂、性能要求不太高的系统。mybatis则不适合用于需要快速开发的低复杂性系
统，适合用在数据关系复杂、需要通过优化sql提供高效操作数据库能力的系统。
	第二章 搭建工程和实例入门
	使用maven搭建mybatis入门工程，引入mybatis依赖：
		<dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
	使用mysql数据库需要引入mysql驱动的依赖（mysql5.5及之后版本直接引入8.0的驱动）：
		<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.15</version>
        </dependency>
	需要注意，引入上面的驱动后，配置驱动名称需要配置为：com.mysql.cj.jdbc.Driver
	为了写代码方便，这里再引入log4j、lombok和junit的依赖。
	工程目录结构：
		mybatis-demo1
			src
				main
					java
						com.zhangwei.mybatisdemo1
							entity
								Employee.java
							mapper
								EmployeeMapper.java
							service
								EmployeeService.java
							util
								SqlSessionFactoryUtil.java
					resources
						mybatis-config.xml
						log4j.properties
						mapper
							EmployeeMapper.xml
				test
					java
						com.zhangwei.mybatisdemo1
							MybatisDemo1Test.java
			pom.xml
	在mybatis-config.xml中配置数据库连接信息和引入mapper映射文件：
		<?xml version="1.0" encoding="utf8" ?>
		<!DOCTYPE configuration
			PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>
			<typeAliases>
				<typeAlias type="com.zhangwei.mybatisdemo1.entity.Employee" alias="emp"/>
			</typeAliases>
			<environments default="dev">
				<environment id="dev">
					<transactionManager type="JDBC"></transactionManager>
					<dataSource type="POOLED">
						<property name="driver" value="com.mysql.cj.jdbc.Driver"/>
						<property name="url" value="jdbc:mysql://localhost:3306/jdbc_test"/>
						<property name="username" value="root"/>
						<property name="password" value="root"/>
					</dataSource>
				</environment>
			</environments>
			<mappers>
				<mapper resource="mapper/EmployeeMapper.xml"/>
			</mappers>
		</configuration>
	在EmployeeMapper.xml文件中配置ORM映射规则：
		<?xml version="1.0" encoding="utf8" ?>
		<!DOCTYPE mapper
			PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		<mapper namespace="com.zhangwei.mybatisdemo1.mapper.EmployeeMapper">
			<select id="getEmpById" parameterType="int" resultType="emp">
			select * from emp where empno=#{empno}
			</select>
		</mapper>
	工具类SqlSessionFactoryUtil用来获取SqlSession对象，这个对象类似于jdbc中的Connection对象。
		public class SqlSessionFactoryUtil {
			private static SqlSessionFactory sqlSessionFactory;

			private SqlSessionFactoryUtil(){}

			public static void initSqlSessionFactory(){
				if(sqlSessionFactory == null){
					synchronized (SqlSessionFactoryUtil.class){
						if(sqlSessionFactory==null){
							String configFileName = "mybatis-config.xml";
							try (InputStream input = Resources.getResourceAsStream(configFileName)){
								sqlSessionFactory = new SqlSessionFactoryBuilder().build(input);
							} catch (IOException e) {
								Logger.getLogger(SqlSessionFactoryUtil.class.getName()).log(Level.SEVERE,null,e);
							}
						}
					}
				}
			}

			public static SqlSession getSqlSession(){
				if(sqlSessionFactory==null){
					initSqlSessionFactory();
				}
				return sqlSessionFactory.openSession();
			}
		}
	SqlSession由SqlSessionFactory实例创建，在系统中，应该只为一个数据库创建一个单例的SqlSessionFactory对象，否则就可能
因为存在过多的SqlSessionFactory对象可能会导致创建出大量的SqlSession对象，造成数据库负担增加。SqlSessionFactory对象是由
SqlSessionFactoryBuilder通过读取配置文件（即mybatis-config.xml）后创建的（实际上SqlSessionFactoryBuilder是通过一个
Configuration对象去读取的配置文件）。SqlSessionFactoryBuilder在创建了SqlSessionFactory实例后就可以卸载了。系统运行期间
SqlSessionFactory始终以单例对象存在，SqlSession对象在开启事务时需要手动提交事务，而且应该在操作数据库结束后关闭连接，这通
常在finally代码块中完成。
	
	第三章 mybatis配置详解
	mybatis配置文件中可以使用以下元素，但是需要按照下面的顺序排列，否则将会出错。
		<?xml version="1.0" encoding="utf8" ?>
			<!DOCTYPE configuration
				PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
				"http://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>	
			<properties />
			<setting />
			<typeAliases />
			<typeHandlers />
			<objectFactory />
			<plugins />
			<environments>
				<environment>
					<transactionManager/>
					<dataSource/>
				</environment>
			</environments>
			<databaseIdProvider />
			<mappers/>
		</configuration>
	<properties>有两种配置方法，第一种是直接在<properties>元素内部配置<property>元素，第二种是使用resource属性引入外部
properties文件，这两种配置虽然可以混合使用，但是通常不建议这样做。配置了<properties>元素后就可以在后面的配置元素中使用
${...}来引用配置的值：
	定义datasource.properties文件：
		driver=com.mysql.cj.jdbc.Driver
		url=jdbc:mysql://localhost:3306/jdbc_test
		username=admin
		password=admin
	使用<properties>引用该文件：
		<properties resource="datasource.properties"/>
	在<dataSource>元素内引用配置的值：
		<dataSource type="POOLED">
			<property name="driver" value="${driver}"/>
			<property name="url" value="${url}"/>
			<property name="username" value="${username}"/>
			<property name="password" value="${password}"/>
		</dataSource>
	如果配置文件中的数据库用户名和密码是加密的，需要在代码中解密则可以在创建SqlSessionFactory实例时进行：
		public static void initSqlSessionFactory(){
			if(sqlSessionFactory == null){
				synchronized (SqlSessionFactoryUtil.class){
					if(sqlSessionFactory==null){
						String configFileName = "mybatis-config.xml";
						String datasourceFileName = "datasource.properties";
						try (InputStream input = Resources.getResourceAsStream(configFileName);
							Reader cfgReader = new InputStreamReader(input);
							InputStream input2 = Resources.getResourceAsStream(datasourceFileName);
							Reader dsReader = new InputStreamReader(input2);
						){
							Properties datasource = new Properties();
							datasource.load(dsReader);
							datasource.setProperty("username",decode(datasource.getProperty("username")));
							datasource.setProperty("password",decode(datasource.getProperty("password")));
							sqlSessionFactory = new SqlSessionFactoryBuilder().build(cfgReader,datasource);
						} catch (IOException e) {
							Logger.getLogger(SqlSessionFactoryUtil.class.getName()).log(Level.SEVERE,null,e);
						}
					}
				}
			}
		}

		private static String decode(String str){
			return str.replace("admin","root");
		}
	<settings>元素用于配置mybatis的一些行为，尽管mybatis官方提供了很多可以设置的特性，其实实际当中我们很少使用所有的
这些设置，通常都只涉及很少的几个设置项，如：
		<settings>
			<setting name="cacheEnabled" value="true"/><!--缓存全局开关-->
			<setting name="lazyLoadingEnabled" value="true"/><!--关联对象延迟加载全局开关-->
			<setting name="useGeneratedKeys" value="false"/><!--驱动自动生成主键-->
			<setting name="autoMappingBehavior" value="PARTIAL"/><!--如何自动映射属性结果集-->
			...
		</settings>
	<typeAliases>用于配置别名集合，mybatis已经预定义了一批别名，比如int、long、_int、string、map等，使用<typeAlias>
定义工程中的po等可以避免在映射文件中使用类的全路径名。
	在<typeAliases>内部还可以使用<package name="com.zhangwei.mybatisdemo1.entity"/>配置包扫描，在该包下的类上使用注
解@Alias("name")配置类的别名，如果该包下的类没有使用这个注解，mybatis将把类的首字母小写后作为别名。
	mybatis中带有参数的sql语句都是使用PrepareStatement实现的，同时mybatis也允许在设置参数时和映射返回数据时使用注册的
TypeHandler进行处理。
	TypeHandler主要作用是在设置参数时将参数从java类型(javaType)转为JDBC类型(jdbcType)，在映射返回数据时将jdbcType转为
javaType。
	mybatis预定义了一批typeHandler，并进行了注册，如IntegerTypeHandler用于将java类型的Integer和int转为jdbcType的
NUMERIC或INTEGER(和数据库兼容的类型)。
	自定义typeHandler：
		@MappedTypes(Integer.class)
		@MappedJdbcTypes(JdbcType.INTEGER)
		public class MyIntTypeHandler implements TypeHandler<Integer> {

			private Logger logger = Logger.getLogger(MyIntTypeHandler.class);

			@Override
			public void setParameter(PreparedStatement preparedStatement, int i, Integer integer, JdbcType jdbcType) throws SQLException {
				logger.info("MyIntTypeHandler setParameter .....");
				preparedStatement.setInt(i,integer);
			}

			@Override
			public Integer getResult(ResultSet resultSet, String s) throws SQLException {
				logger.info("MyIntTypeHandler getResult by colName .....");
				return resultSet.getInt(s);
			}

			@Override
			public Integer getResult(ResultSet resultSet, int i) throws SQLException {
				logger.info("MyIntTypeHandler getResult by index .....");
				return resultSet.getInt(i);
			}

			@Override
			public Integer getResult(CallableStatement callableStatement, int i) throws SQLException {
				logger.info("MyIntTypeHandler getResult by callableStatement .....");
				return callableStatement.getInt(i);
			}
		}
	应用自定义类型处理器有两种方式：第一种是在配置文件中注册自定义的typeHandler：
		<typeHandlers>
			<typeHandler handler="com.zhangwei.mybatisdemo1.typehandler.MyIntTypeHandler" javaType="int" jdbcType="INTEGER"/>
		</typeHandlers>
		或者使用包扫描：
			<typeHandlers>
				<package name="com.zhangwei.mybatisdemo1.typehandler"/>
			</typeHandlers>
		然后在sql的参数或映射结果集返回值时只需要设置对应的javaType和jdbcType就可以：
			select * from emp where empno=#{empno javaType=int,jdbcType=INTEGER}
	第二种是直接在sql的参数或映射结果集返回值时引用自定义的typeHandler（参数也需要设置javaType和jdbcType，但是映射结果的
resultMap不需要。但是不需要在配置文件中注册自定义的typeHandler）：
		select * from emp where empno=#{empno javaType=int,jdbcType=INTEGER,typeHandler=com.zhangwei.mybatisdemo1.typehandler.MyIntTypeHandler}
	看起来第一种方式要更加优雅一些。
	mybatis提供两个处理枚举类型映射的typeHandler：EnumTypeHandler和EnumOrdinalTypeHandler，EnumTypeHandler使用枚举对象
的名称去设置参数和映射结果，EnumOrdinalTypeHandler使用枚举的下标去进行映射（枚举对象下标从0开始编号）。映射枚举对象应该在
配置文件中去配置typeHandler，如果需要自定义typeHandler处理枚举对象，规则和前面的自定义typeHandler一样。
	mybatis返回一个结果时，使用ObjectFactory接口的一个实例（默认为DefaultObjectFactory实例对象）去创建java对象，然后再设置
各个字段的值。也可以自定义创建对象的工厂类，需要做的是实现ObjectFactory接口，然后在配置文件中注册它：
		<objectFactory type="com.zhangwei.mybatisdemo1.util.MyObjectFactory">
			<property name="name" value="myObjectFactory"/>
		</objectFactory>
	大多数情况下是不需要自己去提供这个工厂类的。
	<environments>元素内部可以定义多个<environment>，这些<environment>通常用于开发、测试和生产环境的配置，<environments>
的default属性引用某个<environment>的id属性值设置默认的环境。
	<environment>内部需要配置<transactionManager>，事务管理器可以选择JDBC、MANAGED和自定义。在<transactionManager>内部
可以使用<property>配置事务管理器的一些属性，例如在JDBC事务管理器内配置：<property name="autoCommit" value="false"/>
	<environment>内部<datasource>,数据源可以选择UNPOOLED、POOLED和JNDI，也可以自定义数据源。UNPOOLED、POOLED和JNDI都是
使用mybatis提供的数据源。自定义数据源需要实现mybatis的DataSourceFactory接口。
	<databaseIdProvider>只有在系统中同时使用多中数据库才有用，在这个元素内部可以配置多个数据库的标识，数据库驱动返回的数据库
如果和配置的数据库标识匹配，就可以在映射mapper文件中的sql添加一个databaseId属性指定由特定的数据库执行。
	在配置文件中使用<mappers>和<mapper>引入ORM映射，可以引入mapper文件：
		<mapper resource="mapper/EmployeeMapper.xml"/>
		<mapper url="file:///code_lab/mybatisdemo1/target/classes/mapper/EmployeeMapper.xml"/>通常不建议这样引用
	如果mapper接口和对应的xml映射文件处在相同的路径下,也可以引入java类或者引入包：（这个工程中不能这样使用）
		<mapper class="com.zhangwei.mybatisdemo1.mapper.EmployeeMapper"/>
		<package name="com.zhangwei.mybatisdemo1.mapper“/>
	
