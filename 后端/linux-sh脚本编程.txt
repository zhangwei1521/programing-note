                                            linux-sh脚本编程
    shell是一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务（主要是启动、管理其他程序）。
    Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。
    shell脚本（shell script），是一种为shell编写的脚本程序，是可以被shell理解执行的文本文件。
    POSIX标准采用sh为其shell标准，在POSIX机器上其路径通常是/bin/sh；GNU Project开发的bash是sh的替代品，其路径通常是/bin/bash；
在CentOS里，/bin/sh是一个指向/bin/bash的符号链接。
    通常，在linux系统中shell、sh、bash会被混用，因为大多数linux发行版采用bash作为shell，并把sh作为bash的符号链接，所以不会导致
理解错误，所以下文中shell脚本指的是bash、sh的脚本。
    
    第一个shell脚本：first.sh
        #!/bin/sh
        cd ~
        mkdir shell_tut
        cd shell_tut

        for ((i=0; i<10; i++)); do
            touch test_$i.txt
        done
    第一行的“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。
    可以给这个文件加上执行权限，然后直接执行：
        chmod u+x first.sh
        ./first.sh
    直接执行实际就是用shell来读取这个文件，然后shell将根据第一行找到对应的解释器来执行后面的脚本内容，由于这里的shell就是解释器sh，所以可以
把第一行 #!/bin/sh 删除。如果是其他脚本，如php脚本则不能删除这一行。
    另一种执行方式是把文件路径作为解释器参数：
        sh first.sh
    这种执行方式下解释器会忽略第一行，所以可以不写。
    使用 sh first.sh执行脚本会新建一个sh进程，脚本执行完成后回到当前shell环境中。
    因为 . 表示当前shell，所以可以使用 . first.sh 来执行shell脚本，也可以使用 source first.sh执行此脚本文件。
    使用source和.不会新建sh进程。
    还可以使用重定向执行脚本文件：sh < first.sh
    虽然可以使用exec 执行脚本，但是执行时也是新建一个sh进程，并会使用新的sh进程替换当前sh进程，即新sh进程PID被设为当前sh进程的PID并结束当前sh进程，
另外exec执行结束后，新sh进程退出，所以原执行环境也就退出了。
    文件名后缀不影响文件执行，但是通常采用.sh作为shell脚本的文件名后缀，便于识别。
    
    变量：
        定义变量：
            val_name="hello"
        使用变量：
            echo $val_name
            echo ${val_name}
        {}用于帮助解释器识别变量的边界，如果解释器可以通过空格等正确识别变量名，则可以省略{}。推荐给所有变量加上花括号，这是个好的编程习惯。
        已定义的变量，可以被重新定义：
            val_name="hello"
            val_name="shell"
        将一个命令执行结果赋值给变量：
            dir=`pwd`
            #或者
            dir=$(pwd)
        注：在 Bash Shell 中，如果不特别指明，每一个变量的值都是字符串，无论给变量赋值时有没有使用引号，值都会以字符串的形式存储。
            echo 2+3        #2+3
            val1=2
            val2=3
            val3=$val1+$val2
            echo $val3      #2+3
        在函数中可以定义临时变量，该变量只在函数范围内有效：
            val1="hi"
            startFunc(){
                local val1="hello"
                echo $val1
            }
            startFunc
            echo $val2
    
    运算：
        算数运算：
            i=0
            i=`expr $i + 1`
            i=`expr $i - 1`
            i=`expr $i \* 4`    #这里*需要转义
            i=`expr $i / 2`
            i=`expr $i % 2`
            i=`expr $i == 0`    #用1表示true，0表示false，通常统一使用 -eq -ne进行数值比较，而用 == 和 != 比较字符串
            i=`expr $i != 1`    #用1表示true，0表示false
        数值比较：
            -lt     litter than
            -gt     greater than
            -eq     equals
            -ne     not equals
            -ge     greater or equals
            -le     litter or equals
        布尔运算：
            !       取反
            -o      or      #和||不同在于，前面的表达式成功了仍然会执行后面的表达式
            -a      and     
        逻辑运算
            ||      or      #前边表达式返回成功的话，就不执行后边的表达式，否则执行后面的表达式
            &&      and     #前边表达式返回成功的话，仍然需要执行后边的表达式，否则不执行后面的表达式
        整数运算除了使用expr外，还可以使用(())、let、$[]、bc，其中(())、let、$[]由shell直接支持，而bc是一个外部程序。
        shell不支持小数运算，需要使用bc来实现。
            #计算赋值
            ((a=10+20))((b=20+30))
            ((a=10+20,b=20+20))
            a=$((10+20))
            c=$((a>10 && b==100))
            echo $c
            let d=a+b e=a-b
            echo $d
            echo $e
            echo $[a+b]
            a=10
            b=3
            f=`echo "scale=9; $a / $b" | bc`    #scale指定精度，但是只在除法中有效
            echo $f
            f=`echo "1.1 * 1.1" | bc`
            echo $f

        

    注释：
        sh里使用#作为注释标记，每个#注释其所在行所在位置后面的内容，sh没有多行注释，只能每一行加一个#号。
        ?想要注释多行内容，也可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到和注释一样的效果。
    
    数组：
        数组可以不显示声明就赋值：
            city[0]=bj
            city[2]=gz
            echo $city          #等价于city[0]
            echo ${city[0]}
            echo ${city[1]}     #返回空串
            echo ${city[2]}
            echo ${city[8]}     #不会报错，返回空串
        也可以显示声明数组：
            declare -a addr
        组合赋值：
            city=(bj gz sh hk)
            echo ${city[0]} ${city[1]}
        返回数组所有元素：
            echo ${city[*]}     #没有赋值的单元将被忽略
        返回数组元素数量：
            echo ${#city[*]}    #不计算没有赋值的单元
        判断数组是否包含某个元素：
            arr=("hello" "world" "helloworld")
            echo ${arr[@]} | grep -wq "hello" && echo "YES" || echo "NO"
            # YES
            arr=("hello1" "world" "helloworld")
            echo ${arr[@]} | grep -wq "hello" && echo "YES" || echo "NO"
            # NO
        数组添加新元素：
            arr=(1 2 3)
            # 添加到结尾
            arr=(${arr[@]} 4)
            # 添加到开头
            arr=(0 ${arr[@]})

    字符串：
        sh的字符串可以使用单引号和双引号。
        单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的，单引号字串中不能出现单引号（对单引号使用转义符后也不行）
        双引号里可以有变量，双引号里可以出现转义字符。
        字符串拼接：
            val1="a"
            val2="b"$val1"c"
            val3="d""e"
            val4="f${val1}"
            echo $val2
            echo $val3
            echo $val4
        获取字符串长度：
            echo ${#PATH}
        提取子字符串:
            echo ${PATH:0:4}    #提取从index为0开始长度为4的子串
        查找子字符串：
            str1="hello shell"
            echo `expr index "$str1" s`
            idx_s=`expr index "$str1" s`
            echo $idx_s
        字符串 split
            spNo="11,22 , 33"
            arr=(${spNo//,/ })
            #echo ${arr[@]}
            for it in ${arr[@]}
            do
                echo '"'$it'"'
            done

    条件判断语句：
        只有if有执行内容，else没有执行内容时不能写else：
            if condition
            then 
                command1
                command2
                ...
                commandN
            fi
        else有执行内容的if...else
            if condition
            then 
                command1
                command2
                ...
                commandN
            else
                command
            fi
        if...else if...[else]   #else没有内容则不能写
            if condition
            then 
                command1
            elif 
                command2
            else
                command3
            fi
        if后的condition如果使用[]，需要注意 [ 是一个程序，和 test命令具有相同的作用：判断结果，所以需要空格分隔： if [ $p1 -eq 0]
        可用参数：
            -z string 测试指定字符是否为空，空着真，非空为假
            -n string 测试指定字符串是否为不空，空为假 非空为真
            string 测试变量是否存在，存在为真
            -e FILE 测试文件是否存在
            -f file 测试文件是否为普通文件
            -d file 测试指定路径是否为目录
            -r file 测试文件对当前用户是否可读
            -w file 测试文件对当前用户是否可写
            -x file 测试文件对当前用户是都可执行

    #eleventh.sh
        #!/bin/sh
        i=10
        j=20
        if [ $i -gt 0 -a $i -lt 100 ]
        then
                echo "100 > $i > 0"
        fi

        if [[ $i -gt 0 && $i -lt 100 ]]
        then
                echo "100 >> $i >> 0"
        fi

        if [ $i -lt $j ]
        then
                echo "$i < $j"
        fi

        if test $i -gt $j
        then
                echo "$i > $j"
        elif test $i -gt `expr $j \* 3 / 4`
        then
                echo `expr $j \* 3 / 4` "< $i < $j "
        else
                echo "$i < " `expr $j \* 3 / 4`
        fi
    字符串比较：
        if [ $name = "john" ]
        then
            echo "hello $name"
        fi 

    循环语句
        for循环：
            for var in item1 item2 ... itemN
            do
                command1
                command2
            done
        可以写在一行内：
            for var in item1 item2 ... itemN; do command1; command2; done

        #eighth.sh
            #!/bim/sh
            file="first.sh second.sh third.sh"
            for i in $file
            do
                pwd
                cp $i $i.old
                echo "$i copied"
            done
            #
            for i in $file ; do cp $i $i.new; echo "$i.new create"; done
        C风格的for循环：
            for ((EXP1; EXP2; EXP3))
            do
                command1
                command2
            done
        while循环
            while condition
            do
                command
            done
            while [ -h "FILE"] 中 -h用于检查FILE是否存在且是否是符号链接

        #ninth.sh
            #!/bin/sh
            i=0
            while [ $i -lt 5 ]
            do
                    echo $i
                    i=`expr $i + 1`
            done
            echo i=$i
        无限循环：
            while :
            do 
                command
            done
            #或者
            while true
            do 
                command
            done
            #或者
            for (( ; ;))
            do
                command
            done
        until循环：
            until condition
            do 
                command
            done 
        #tenth/sh
            #!/bin/sh
            i=1
            #while :
            #while true
            #for ((;;))
            until [ $i -gt 100 ]
            do
                    echo $i
                    i=`expr $i + 1`
            done

    case 语句
        用于匹配一个值或一个模式，如果匹配成功，执行相匹配的命令。
        case 值 in
        模式1)
            command1
            command2
            command3
            ;;
        模式2）
            command1
            command2
            command3
            ;;
        *)
            command1
            command2
            command3
            ;;
        esac
    case后测试值的后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间
所有命令开始执行直至 ;;。 ;; 与其他语言中的 break 类似，意思是跳到整个 case 语句的最后。测试值将检测匹配的每一个模式。
一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。

    传参：
        shell脚本内可以使用外部变量，如 PATH，另外执行脚本时指定的参数在脚本内通过 $1 $2 ...引用：
            $cat > add.sh
            let sum1=$1+$2
            echo $sum1
            let sum2=$x+$y
            #执行：
            $chmod a+x add.sh
            $x=4 y=5 ./add.sh 2 3       #这样创建的变量x和y在脚本执行结束后就不存在了
            5
            9
    执行过程中读取输入：read varN
        echo 'please input a number : '
        read aNum
        echo "Your number is : $aNum"
    其他预定义变量：
        $!  Shell最后运行的后台Process的PID(后台运行的最后一个进程的进程ID号)
        $?	上个命令的退出状态，或函数的返回值。退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。
        $$	当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。
        $#	传递给脚本或函数的参数个数。
        $*	传递给脚本或函数的所有参数。被双引号(" ")包含时，"$*"表示所有参数组成的字符串。
        $@	传递给脚本或函数的所有参数。提取参数数组： args=($@)
        $0  当前脚本名

    使用export
        每次执行shell脚本，都会创建一个新的shell执行环境。
        使用export把一个变量导出，导出的变量可以在子shell中访问，否则不能被子shell访问。
            vim sixth.sh
            #!/bin/sh
            val1='hello'
            val2='linux shell'
            export val1
            bash
        执行这个脚本时，会先创建一个新的shell，然后执行命令，最后一个命令bash将会创建一个子shell，在此子shell中执行：
            echo $val1
            hello
            echo $val2
            //返回为空
            exit
            echo $val1
            //返回为空
        在脚本中使用 . source等执行其他脚本没有创建新的shell环境（进程），而是在同一个shell环境中。
    
    函数
        声明函数有三种语法：
            #!/bin/sh
            show1(){
                echo $1 $2;
            }
            function show2(){
                echo $1 $2;
            }
            function show3 {
                echo $1 $2;
            }
            H="hello "
            W="world "
            show1 $H $W
            show2 $H $W
            show3 $H $W
    
    常量BASH_SOURCE
    shell脚本中使用 $0 表示脚本source的名称，即如果脚本是被其他脚本调用，则其source为调用脚本，如果是直接被sh执行则为脚本自己的名称。
    shell脚本中常用 ${BASH_SOURCE-$0} 来获取当前脚本名称。
    t2.sh
        #!/bin/sh
        echo "\$0 => " $0
        echo "\$BASH_SOURCE => " $BASH_SOURCE
        echo ${BASH_SOURCE-$0}
        source ./t3.sh
    t3.sh
        #!/bin/sh
        echo "\$0 => " $0
        echo "\$BASH_SOURCE => " $BASH_SOURCE
        echo ${BASH_SOURCE-$0}
    BASH_SOURCE 本质是一个数组，它的第一个元素是当前脚本的名称，而且 BASH_SOURCE 等价于 BASH_SOURCE[0]

    常量FUNCNAME
    FUNCNAME 也是一个数组，用在函数中，其第一个元素是当前函数的名称，而且 FUNCNAME 等价于 FUNCNAME[0]
    
    shift命令
    位置参数可以用shift命令左移。比如shift 3表示原来的$4现在变成$1，原来的$5现在变成$2等等，原来的$1、$2、$3丢弃，$0不移动。
不带参数的shift命令相当于shift 1。

    变量替换
        #!/bin/bash

        #例1
        var=1
        echo $var
        #输出 1
        var=2
        echo $var
        #输出 2

        #上述操作就是简单对变量赋值，后面的回覆盖前面的

        #例2
        unset var
        #删除先前定义变量，防止对下面的操作产生影响
        echo $var
        #输出空

        : ${var=1}
        echo $var
        #输出 1
        : ${var=2}
        echo $var
        #输出 1

        #上述操作也是对变量赋值，但与例1有些不同，赋值是放在${}中
        #执行 : ${var=1} 时 变量var不存在，所以赋值成功
        #执行 : ${var=2} 时因为变量var已经存在，所以不执行赋值操作
        #注意：行首的冒号(:)是一个sh内置的命令，表示空命令，相当于true，实际什么也不做
        #但是冒号后的赋值作为命令的参数来解析，而不是执行，如果没有这个符号，那么在脚本中会把赋值后字符作为命令来执行，

        #例3
        unset var
        echo $var
        #输出空
        : ${var:=1}
        echo $var
        #输出 1
        
        : ${var:=2}
        echo $var
        #输出 1

        #本例很例2差不多，得到的结果是一样，区别就是赋值一个用的是"="，
        #另一个用的":="，区别在于"="时，当变量不存在（未声明）才对其赋值，而":="是只在变量不存在或值为空时才对其赋值

        unset var
        echo $var
        var=""
        #赋值为空
        : ${var=1}
        echo $var
        #输出空

        unset var
        echo $var
        var=""
        : ${var:=1}
        echo $var
        #输出1
    
    条件赋值和变量选择：
        : ${VAR1:="VAR1"}
        行首的 : 用于执行这种非活动任务
        := 和 = 都可以用于${...}中做条件赋值，实现当变量未定义时声明变量并赋值，不同在于 := 认为值为空字符串的变量等同于未定义：
            #!/bin/sh
            echo "## :="
            : ${VAR1:="VAR1"}
            echo $VAR1
            VAR2=""
            echo ${VAR2:="VAR2"}
            VAR3=" "
            echo ${VAR3:="VAR3"}    //输出空行

            echo "## ="
            echo ${VAR4="VAR4"}
            VAR5=""
            echo ${VAR5="VAR5"}     //输出空行
            VAR6=" "
            echo ${VAR6="VAR6"}     //输出空行
        :- 和 - 都用于选择变量，第一个变量未定义时选择第二个变量作为参数，:- 认为值为空字符串的变量等同于未定义：
            echo "## :-"
            echo ${VAR7:-"VAR7"}
            VAR8=""
            echo ${VAR8:-"VAR8"}
            VAR9=" "
            echo ${VAR9:-"VAR9"}    //输出空行

            echo "## -"
            echo ${VAR10-"VAR10"}
            VAR11=""
            echo ${VAR11-"VAR11"}   //输出空行
        :? 和 ? 也用于变量选择，当第一个变量未定义时，将会结束脚本执行，:? 认为值为空字符串的变量等同于未定义：
            echo "## :?"
            echo ${VAR12:?"VAR12"}  //退出执行
            VAR13=""
            echo ${VAR13:?"VAR13"}  //退出执行

            echo "## ?"
            echo ${VAR14?"VAR14"}   //退出执行
            VAR15=""
            echo ${VAR15?"VAR15"}   //正常执行，输出空行
        :+ 和 + 用于变量选择时，表示反向选择：当第一个变量已定义时选择第二个变量作为参数，:+ 认为值为空字符串的变量等同于未定义：
            echo "## :+"
            echo ${VAR16:+"VAR16"}  //输出空行
            VAR17=""
            echo ${VAR17:+"VAR17"}  //输出空行
            VAR18=" "
            echo ${VAR18:+"VAR18"}  //输出"VAR18"

            echo "## +"
            echo ${VAR19+"VAR19"}  //输出空行
            VAR20=""
            echo ${VAR20+"VAR20"}  //输出"VAR20"
            VAR21=" "
            echo ${VAR21+"VAR21"}  //输出"VAR21"
    
    $IFS

将命令执行输出保存为变量：
    第一种方法：
        ssh_status=$(service ssh status)
    第二种方法：
        ssh_status=`service ssh status`