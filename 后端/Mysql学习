										Mysql学习
mysql 5.7.23 压缩版安装：
将下的压缩包解压到D:\zhangwei\devtools\下：mysql-5.7.23-winx64
在D:\zhangwei\devtools\mysql-5.7.23-winx64\目录下新建文件：my.ini
	[mysqld]
	#设置3306端
	port = 3306
	# 设置mysql的安装目录
	basedir=D:\zhangwei\devtools\mysql-5.7.23-winx64
	# 设置mysql数据库的数据的存放目录
	datadir=D:\zhangwei\devtools\mysql-5.7.23-winx64\data
	# 允许最大连接数
	max_connections=200
	# 服务端使用的字符集默认为8比特编码的latin1字符集
	character-set-server=utf8
	# 创建新表时将使用的默认存储引擎
	default-storage-engine=INNODB
	sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
	[mysql]
	# 设置mysql客户端默认字符集
	default-character-set=utf8
(踩坑：如果目录是D:\software\mysql-5.7.25-winx64，D:后面的\s会被当成空格，所以需要转义：
D:\\software\mysql-5.7.25-winx64
踩坑：需要在mysql安装目录的bin目录下执行安装命令，其他目录下虽然也可以安装成功，但是会
在以后启动服务时报错。)
配置环境变量：
	MYSQL_HOME		D:\zhangwei\devtools\mysql-5.7.23-winx64\
	path			%MYSQL_HOME%\bin
安装MySQL服务：
	1) 以管理员身份运行cmd，进入mysql根目录E:\Program Files\mysql\mysql-5.7.23-winx64 
	2) 运行mysqld --install，控制台提示Services successfully installed，运行成功。 
		① 如果显示已存在，可以使用mysqld --remove后再次执行 
		② 如果报错，可能是权限不足(没有以管理员身份运行cmd) 
	3) 运行mysqld --initialize，生成data目录 
	4) 运行net start mysql启动服务
可能遇到的问题：
msvcr120.dll文件缺失，无法安装mysql，需要下载：Visual C++ Redistributable Packages for Visual Studio 2013
（直接下载msvcr120.dll好像没起作用）地址：https://www.microsoft.com/zh-CN/download/details.aspx?id=40784

修改密码：
	1) 运行net stop mysql，停止服务 
	2) 运行mysqld --skip-grant-tables，开启无密码模式的MySQL Server 
	3) 开启新终端，运行mysql -u root -p，进入MySQL 
	4) 更新root密码 
		运行update mysql.user set authentication_string=password("root") where user="root"; 
	5) 运行flush privileges，刷新权限 
	6) 运行quit，退出 
	7) 运行mysql -u root -p进入mysql输入密码root 
	8) 更改root密码 
		① SET PASSWORD = PASSWORD('1234') 
		② ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER 
		③ FLUSH PRIVILEGES
		
		

触发器
	准备：
	create table goods(
		gid int,
		name varchar(),
		num int
	);

	create table orders(
		oid int,
		gid int,
		much int	
	);

	insert into goods values 
	(1,'cat',55),
	(2,'dog',45),
	(3,'pig',50);

# tg1 -- insert插入orders表后同步修改goods表库存

delimiter $
create trigger tg1
after
insert 
on 
orders
for each row
begin
update goods set num=num-new.much where gid=new.gid;
end$
delimiter ;

# tg2 -- update修改orders表前修改goods表库存

delimiter $
create trigger tg2 
before 
update 
on 
orders
for each row
begin 
update goods set num=num+old.much-new.much where gid=old.gid;
end$
delimiter ;

# tg3 -- delete删除orders表后修改goods表库存

delimiter $
create trigger tg3
after 
delete 
on orders 
for each row
begin
update goods set num=num+old.much where gid=old.gid;
end$
delimiter ;

# tg4 -- insert插入orders表前判断much是否大于goods表的num值，如果大于就修改much为goods表的num值

delimiter $
create trigger tg4 
before 
insert 
on 
orders 
for each row
begin
declare snum int;
select num into snum from goods where gid=new.gid;
if new.much>snum then
	set new.much=snum;
end if;
update goods set num=num-new.much where gid=new.gid;
end$
delimiter ;

# for each row 说明
表示操作影响每一行都会执行一次触发器中的sql
mysql、oracle都支持
oracle还可以不写这一条语句，表示一条影响多行的语句只会触发一次触发器中的sql语句
mysql5.5及之前的版本都必须要写这一条语句
