										Redis分析与实践
	Redis入门：
	Redis是一个基于内存的轻量级键值数据库，或者说是一个数据结构服务器。Redis在内存中中实现了多种数据
结构的存储，并提供了操作这些数据结构的API。
	安装Redis：
	 1、mkdir -p /mytools/redis
	 2、cd /mytools/redis 
		wget http://download.redis.io/releases/redis-4.0.1.tar.gz
	 3、tar xzvf redis-4.0.1.tar.gz	
		cd redis-4.0.1
	 4、mkdir /mytools/redis/conf
		cp redis.conf /mytools/redis/conf/
	 5、cd deps
		make hiredis lua jemalloc linenoise
		cd ..
	 6、make
	 7、make PREFIX=/mytools/redis install
	Redis的版本号规则：major.minor.patch
	/mytools/redis/bin目录下的可执行文件：
		redis-server:	redis服务端
		redis-cli:		redis命令行工具
		redis-sentinel: redis-server的软链接
		redis-check-rdb:	redis RDB检查工具
		redis-check-aof:	redis AOF检查工具
		redis-benchmark:	redis基准/性能测试工具
	
	使用默认配置启动一个Redis实例：
		cd /mytools/redis
		bin/redis-server
	使用指定配置文件启动一个Redis实例：
		bin/redis-server conf/redis.conf
	以守护进程的方式在后台启动Redis实例：
		vim conf/redis.conf
		修改 daemonize 为 yes
	前台redis实例可以直接停止(Ctrl+C)，后台redis-server守护进程可以使用 kill pid-redis-server 停止
	使用命令行工具停止redis-server实例：
		bin/redis-cli shutdown
	一个redis实例就是一个运行中的redis-server进程，一台机器上可以运行多个redis实例，这些实例采用不
同的配置，比如监听不同的端口。
	通常不建议直接 kill redis-server进程，因为这样可能会导致数据未被持久化而丢失。使用shutdown命令
通常可以保证数据的完整性和一致性。
	事实上使用kill时如果向redis-server进程发送SIGTERM(15)信号也相当于使用shutdown命令。
	另外，启动redis-server实例时可以将参数加在命令中。
	
	使用redis-cli连接到redis:
		bin/redis-cli
		交互界面：127.0.0.1:6379>
	redis-cli默认连接本机的6379端口。使用-h 指定要连接的主机ip/地址，-p指定端口，-a指定密码，-s指定
Unix套接字。
	执行简单命令：set foo value1
	交互界面中可以使用shutdown命令关闭redis-server实例。
	获取redis实例状态信息：redis-cli交互环境中使用INFO命令，查看单项(内存)状态信息：
INFO sec(Memory)	
	直接在shell中获取redis实例状态信息：redis-cli INFO
	
	Redis使用单线程、非阻塞、多路复用的I/O模型。它有一个异步事件支持库，称为ae，这个库封装了各个操
作系统提供的polling支持，即内核对异步调用的支持。
	因为redis是单线程执行，所以在一个命令完成前，不能处理其它命令，这就带来了延迟问题。
	
	Redis通信协议：RESP，redis序列化协议。
	客户端发送给redis-server的命令都需要被转换为RESP格式的字符串数组：
		set foo bar 	->		"*3\r\n\$3\r\nset\r\n\$3\r\nfoo\r\n\$3\r\bbar\r\n"
		* 表示这是一个数组，3表示数组大小，\r\n是分隔符，\$3表示后面的参数的字符数，set是(命令)参数
	
	Redis数据类型：
	字符串：基本命令：
		set zhangsan male
		set "Extreme Pizza" "100 Broadway, New York"
		get zhangsan
		get "Extreme Pizza"
		get lisi 					(key不存在时返回 nil)
		strlen "Extreme Pizza"		(返回value的长度，key不存在时返回0)
		append zhangsan ", 25"		(原字符串末尾追加)
		setrange "Extreme Pizza" 14 "Washington DC"		(替换，14是index，index从0开始)
		setnx zhangsan "female, 24"		(key不存在时才设值，等同于 set key value nx)
		set zhangsan "female, 24" xx	(key存在时才设值，就是覆盖原值)
		mset zhangsan male lisi male "Extreme Pizza" "100 Broadway"
		mget zhangsan lisi "Extreme Pizza"
	Redis内部存储字符串值时使用3种编码方式：
		1、能够使用 64位有符号整数表示的数使用int存储，如12345
		2、长度小于等于44的使用embstr编码（redis4.x）
		3、大于44的使用raw编码（redis4.x）
	使用object命令查看redis值的内部编码：
		object encoding zhangsan
	
	列表：基本命令：
		lpush best-friends zhangsan lisi "John St"	(向左插入，"John St"将在最前面)
		lrange best-friends 0 -1	(列表从左向右index为0~N-1，从右到左index为-1~-N，这里
0 -1就表示整个列表)
		rpush best-friends wangwu   (向右插入)
		linsert best-friends before/after zhangsan liuxiaohua		(在指定值前面/后面插入)
		lindex best-friends 2		(返回指定索引处的值)
		lpushx/rpushx friends zhangsan 	(当key存在时才插入值)
		lpop/rpop best-friends		(从左端/右端弹出(删除)值)
		ltrim best-friends 2 3		(只保留索引位置为2、3的值)
		lset best-friends 1 lisi	(替换指定index处的值)
		blpop/brpop friends 0		(阻塞式弹出，0为超时时间(单位:秒)，0表示永久等待)
适用于：任务执行程序(redis客户端)等待任务调度程序分配任务
	redis内部使用quicklist存储列表对象，quicklist的两个配置选项：
		list-max-ziplist-size : 列表内部节点的最大大小，使用默认值即可
		list-compress-depth : quicklist两端不被压缩的节点的个数，我们在访问一个很长列表时可能
常用的数据在列表两端，这样调节这个参数就可以平衡压缩比和访问效率。
	
	哈希：
		hmset "kyoyo ramen" "address" "801 Mission St" "phone" "555-123-654" "rating" "5"
			  # 插入哈希类型，key为"kyoyo ramen",哈希key为"address"、"phone"、"rating"
		hmget "kyoyo ramen" address	#获取"kyoyo ramen"的"address"
		hmget "kyoyo ramen" address phone #获取"kyoyo ramen"的"address"和"phone"
		hget  "kyoyo ramen" address #获取单个属性值
		hexists "kyoto ramen" address  #判断哈希对象中是否含有某个属性
		hgetall "kyoto ramen"  #获取哈希对象所有的属性(不建议对有很多属性的哈希对象使用这个命令)
		hset "kyoto ramen" rating "6.0"	 #修改或新增一个属性
		hdel "kyoto ramen" rating	#删除哈希对象的某个属性
		对于不存在的哈希key或属性字段，hmget和hget都返回nil，hgetall返回empty list or set
		一个哈希对象最多可以具有2^32 - 1个属性字段，使用hgetall可能会导致阻塞，可以使用
hscan 来进行 增量读取，hscan使用指针游标，使用前应先检查或修改该游标，命令执行后会返回一个元素列表
和新的游标，新游标可用于下次读取。
		hscan "kyoto ramen" 0 match *address*	# 0指定游标，match *address*指定属性字段名包括
address，这个match部分是可选的，最后还可以使用可选的 count n 指定每次读取的数量，但是这个值默认为
10，即如果设置的 n 小于10不会生效。返回的数据分为两个部分，第一部分是下次开始继续读取的游标索引，
如果本次已经查询完所有属性字段列表，就会返回0；第二部分是返回的字段名和字段值。
	redis在内部使用两种编码存储哈希对象：
		ziplist：用于属性数量小于配置变量hash-max-ziplist-entries(默认512)的对象，并且属性字段名和
字段值都小于hash-max-ziplist-value(默认64字节)的配置值。
		hashtable: 用于不适用于ziplist编码的哈希对象。

	对于哈希对象和列表，使用前都不需要预先初始化空的对象和列表，插入数据的操作会自动完成创建工作。
同时当一个列表中的数据和哈希对象的属性被全部删除后，redis会自动删除列表和哈希对象占用的空间。
	
	SET集合：Set集合中不能有重复的元素，且元素间没有顺序
		sadd classmates mimi nana didi #添加集合元素
		sismember classmates mimi	#元素存在于集合中返回1，否则返回0，这里如果classmates实际是list，
会产生一个error，如果classmates根本就不存在，返回0
		srem classmates mimi  #删除元素
		scard classmates  #返回集合中元素的个数
		smembers classmates  #返回所有元素(对于具有很多元素的集合不建议使用这个命令，建议使用sscan)
		sscan classmates 0 match *i*	#用法和hscan相同
		sunion classmates friends 	#返回两个集合classmates和friends的并集
		sunionstore known-mans classmates friends #将求并集结果保存到新的集合known-mans
		sinter classmates friends  #返回交集
		sinterstore new-friends classmates friends  #将交集保存到新集合new-friends
		sdiff classmates friends #返回前一个集合和后一个集合的差集，这里需要注意集合的顺序和返回的
结果是有关的。也可以只带第一个集合，这样的效果和smembers相同。
		sdiffstore not-friends classmates friends	#将差集保存到新的集合not-friends
	当Set集合中元素都被删除后，redis会删除这个集合的键。
	一个Set集合最多可以含有2^32 - 1个元素。
	redis在内部使用两种编码存储Set集合：
		intset: 用于元素为整数，并且元素个数小于set-max-intset-entries(默认512)的集合
		hashtable: 用于不适用于intset编码的集合
	
	有序集合：
	zadd ranking:restaurants 100 "Olive Graden" 23 "PF Chang's" 34 "Outback Steakhouse" 
		45 "Red Lobster" 88 "Longhorn Steakhouse"	# 使用 “权重 值” 添加元素到有序集合
	zrem ranking:restaurants "Olive Graden"  #删除元素
	zincrby ranking:restaurants 10 "PF Chang's"		#增加指定元素权重
	zrevrange ranking:restaurants 0 -1	#返回所有的元素，按权重从大到小排序返回
	zrevrange ranking:restaurants 0 -1 withscores	#返回所有的元素和权重
	zrange ranking:restaurants 0 -1 withscores  	#按权重从小到大排序返回
	zrevrank ranking:restaurants "PF Chang's"	#查询指定元素的索引（位序）
	zscore ranking:restaurants "Olive Graden"	#查询指定元素的权重
	zunionstore totalranking 2 ranking:restaurants ranking2:restaurants weights 1 2 
[aggregate sum|max|min (聚合方式)]
		#求ranking:restaurants和ranking2:restaurants的并集(根据权重合并)并保存到新的集合totalranking
	zadd ranking:restaurants nx 50 "Olive Graden" 	#只有元素不存在时才添加
	zadd ranking:restaurants xx 150 "Olive Graden"  #只在元素存在时更新权重值
	当元素的权重相同时，redis使用字典顺序排序元素
	zinterstore newranking 2 ranking:restaurants ranking2:restaurants aggregate max #求交集(保留较大的元素)
	注意：没有zinter 和 zunion操作
	redis使用两种编码保存有序集合：
		ziplist: 元素个数小于zset-max-ziplist-entries(默认128)且元素大小小于zset-max-ziplist-value
(默认64字节)的有序集合。
		skiplist: 不适用于ziplist的有序集合
	
	HyperLogLog:是一种类似集合的数据结构，但是占用内存相比集合少很多，这个数据结构应该主要是用于计数(
它可以O(1)返回计数)。
	pfadd Counting:Olive  000123 000456  #添加元素
	pfcount Counting:Olive				 #返回元素总数
	pfmerge Counting:Olive-Graden counting:Olive counting:Graden  #求并集（重复元素只保留一个）
	
	Geo(Redis3.2开始引入)：存储数据元素的地理位置（经度、纬度）
	geoadd restaurants:CA -121.896321 37.916750 "Olive Graden" -117.910937 33.804047 "PF Chang's"
		#添加元素及元素的地理坐标
	geopos restaurants:CA "PF Chang's"	#查询元素的地理坐标
	georadius restaurants:CA -121.896310 37.916740 5 km  #返回指定坐标5km距离范围内的元素
	geodist restaurants:CA "Olive Graden" "PF Chang's" km #返回元素之间的距离，单位km
	georadiusbymember restaurants:CA "Olive Graden" 10 km #返回距离指定元素10km范围内的元素(参数必
须是该集合中的元素，返回结果中会包含参数自己)
	georadius/georadiusbymember restaurants:CA "Olive Graden" 10 km store/storedist neibors 
		#返回结果保存到新集合中
	georadius/georadiusbymember restaurants:CA "Olive Graden" 10 km withdist withcoord 
		#返回元素和距离、坐标
	geo集合实际上是一个有序集合，所以可以对geo集合使用有序集合的命令。
	redis使用一个52位的geohash编码保存geo集合元素的坐标。可以实现低于1m的精度，当然不可能完全准确，
所以保存的坐标和使用geopos返回的坐标有极小的差别。
	
	分库：
	redis默认提供0-15共16个库，这些库实际上是没有提供任何隔离机制的，只是作为命名空间使用。进入redis后默认在
0号库操作数据，使用 select n选择切换n号库。
	通常不建议使用多库，因为每次操作都需要select库，需要区分不同的业务数据可以使用不同的Key前缀来实现。

	键管理：
	获取redis中键的个数：dbsize
	返回所有的键：keys * 或 scan 0(遵循scan语法)
	删除键：del key 或 unlink key(Redis4.0引入，用于大key的异步删除)
	判断键是否存在：exists key	
	获取键对应的数据类型：type key	(使用这个命令就可以看出来geo集合就是有序集合)
	重命名键：rename key-old key-new
	使用keys和del都可能导致阻塞，所以对于大数据量的操作建议使用scan和unlink
	以上命令都是针对当前库的操作。
	flushdb: 删除当前所选数据库的所有键。此命令永远不会失败。（使用需谨慎）
	flushall: 删除所有数据库的所有键。此命令永远不会失败。（使用需谨慎）

	位图：
	位图是一种使用一个比特位代表是或否状态，比如某个用户是否点赞：假如系统中有n个用户，现在要为某一作品
记录点赞的用户，使用位图：setbit artA 101 1 表示ID为101的用户为作品artA点了赞。如果系统有1000万用户，
这是使用位图只需要占用1000万个比特位即1220KB空间，如果使用列表记录每个用户的ID则会需要多得多的空间。
	获取指定位置的比特位的值：getbit artA 101
	计算值为1的比特位的数量：bitcount artA 
	操作比特位：
		按位与：bitop and artAB artA artB	(同时为artA、artB点赞)
		按位或: bitop or artA/B artA artB	(为artA或artB点赞)
		按位异或：bitop xor artA|B artA artB	(只为artA或artB之一点赞)
		按位取反：bitop not art_A artA
	设置键的过期时间：expire artAB 60	60秒后artAB将过期
	使用 ttl artAB 检查键距离过期的时间（秒）
	过期后使用exists artAB 将返回0
	过期时间实际被存为一个unix时间戳，所以在redis重启后将继续有效，同时当访问已过期的键时，redis才去执行删除。
实际上redis会定期执行一个概率算法去删除过期的键，因此某个过期的键有可能永远都不会被删除。
	使用persist名取消过期时间设置：persist artAB
	将替换或删除键的值时，键的过期时间将被清除，但是修改键的值不会清除过期时间。
	expireat可以直接指定一个过期时间戳。
	排序：
		sadd scores 88 55 89 92 100
		数字可以直接排序：sort scores	//默认为升序
		sadd users zhangsan lisi wangwu 
		字符串排序：sort users alpha
		倒序：sort scores desc
		限制返回的数量：sort scores desc limit 0 1 返回最高分
		根据外部数据排序：
			sadd user_id 1001 1002 1003
			set user_score_1001 55
			set user_score_1002 43 
			set user_score_1003 78
			sort user_id by user_score_*
		排序后返回关联的外部数据：
			set user_name_1001 zhangsan
			set user_name_1002 lisi
			set user_name_1003 wangwu
			sort user_id by user_score_* get user_name_*
		保存排序后的数据到列表中：
			sort user_id by user_score_* get user_name_* store user_ranking_name
			lrange user_ranking_name 0 -1
	
    redis管道：客户端将多个命令打包在一起，将它们一次性发送，客户端不需要等待单个命令的返回，服务器在执行完打包在一起的命令组后才返回
结果给客户端管道。
        #编辑pipeline命令文件
        #vim pipeline.txt
        set mykey myvalue
        sadd myset value1 value2 value3
        get mykey
        scard myset
        #使用unix2dos命令（需要安装dos2unix）将上面的文件的换行符\n转为\r\n（redis通信协议格式要求）
        unix2dos pipeline.txt
        #redis客户端发送上面的文件给redis服务端
        cat pipeline.txt | redis-cli --pipe

    redis事务
    redis使用 multi 命令开启事务，然后执行一组操作，最后使用 exec 命令提交事务。
    redis事务不同于关系型数据库的事务，redis事务不一定保证一组操作的原子性：
        第一种情况：
            set foo bar
            multi
            set foo bar2
            got foo
            set foo bar3
            exec
            #返回错误：(error) EXECABORT Transaction discarded because of previous errors.
            get foo
            #返回 bar，说明事务中的某个命令错误将导致事务中的所有命令都失效
        第二种情况：
            multi
            set foo bar
            incr foo
            set foo bar2
            get foo
            exec
            #返回 1)OK 2)(error) 3)OK 4)bar2
            #说明命令执行出错，将只影响其自身，事务中的其他不相关命令不受影响
        第三种情况：
            set foo bar
            watch foo
            multi
            set foo bar2
            get foo
            #exec执行前在另一个redis连接中修改foo：set foo bar3
            exec
            #返回 (nil)，查看 get foo 返回 bar3
            #说明使用 watch 监控的key，在事务中提交修改前会检查该key是否已经被修改，如果已经被修改，当前事务中的操作将失败
    
    redis发布订阅
    redis支持客户端订阅一个或多个频道，客户端也可以向这些频道发布消息，订阅频道的客户端就会收到发布的消息：
        #订阅(这些频道如果不存在就会被创建)
        subscribe channel1  channel2
        #发布
        publish channel1 hello,redis
        #订阅的客户端将收到消息：
        1) message
        2) channel1
        3) hello,redis
        #查看当前活跃的频道
        pubsub channels
    redis的发布订阅不支持持久化，频道、消息和发布订阅关系都不会被保存到磁盘上，如果服务器重启就会丢失这些信息。
    如果向一个没有任何订阅的频道发送消息，消息将被丢弃。
    
    使用lua脚本：
        #vim updatejson.lua
        local id = KEYS[1]
        local data = ARGV[1]
        local dataSource = cjson.decode(data)

        local retJson = redis.call('get',id)
        if retJson == false then
            retJson = {}
        else
            retJson = cjson.decode(retJson)
        end

        for k,v in pairs(dataSource) do
            retJson[k] = v
        end
        redis.call('set',id,cjson.encode(retJson))
        return redis.call('get',id)
    使用 redis-cli 执行lua脚本：
        redis-cli --eval updatejson.lua user:1521 , '{"name":"zhangwei","sex":"male","grade":"B"}'
    注册lua脚本到redis服务器：
        redis-cli script load "`cat updatejson.lua`"
        #返回 脚本的序列号：bfad2c674ad8f2e76b4b3961fc80e386423d1f63
    使用脚本序列号执行脚本：
        redis-cli EVALSHA bfad2c674ad8f2e76b4b3961fc80e386423d1f63 1 user:1521 '{"grade":"A"}'
	redis中lua脚本默认执行时长为5s（redis.conf中 lua-time-limit的值），如果超出此时间，可以使用script kill命令停止脚本的
执行，如果脚本中包含写入的操作，就必须不保存地停止服务器：shutdown nosave
    查询脚本是否登记：
        script exists bfad2c674ad8f2e76b4b3961fc80e386423d1f63
    redis服务器重启后需要重新登记脚本，因为登记脚本只是将脚本保存在服务器进程的脚本缓存空间中。
    
	使用jedis连接redis：
	jedis的maven坐标：
		<dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>3.1.0</version>
        </dependency>
	简单使用：
		public class RedisClient {
			public static boolean setStr(String key,String value){
				Jedis jedis = new Jedis("192.168.56.2",6379);
				jedis.set(key,value);
				jedis.close();
				return true;
			}

			public static String getStr(String key){
				Jedis jedis = new Jedis("192.168.56.2",6379);
				String value = jedis.get(key);
				jedis.close();
				return value;
			}
		}
	如果redis没有部署在本机上，需要修改redis配置，因为redis默认开启了保护模式，只允许本机ip访问：
		bind 127.0.0.1
		protected-mode yes
	可以关闭保护模式，也可以添加redis服务器对外ip到bind：
		bind 192.168.56.2
		或
		protected-mode no
	修改配置文件设置日志文件保存位置：
		logfile /usr/local/redis/redis.log
	使用连接池：
		public class RedisClient {
			private JedisPool jedisPool;

			private RedisClient(){}

			private static class RedisClientHolder{
				private static final RedisClient instance = new RedisClient();
			}

			public static RedisClient getInstance(){
				return RedisClientHolder.instance;
			}

			private synchronized void initialize(){
				JedisPoolConfig config = new JedisPoolConfig();
				config.setMaxIdle(10);
				config.setMaxTotal(20);
				jedisPool = new JedisPool(config,"192.168.56.2",6379,2000,null);
			}

			private Jedis getJedis(){
				if(jedisPool==null){
					initialize();
				}
				Jedis jedis = jedisPool.getResource();
				return jedis;
			}

			public boolean setStrVal(String key,String value){
				Jedis jedis = getJedis();
				jedis.set(key,value);
				jedis.close();
				return true;
			}

			public String getStrVal(String key){
				Jedis jedis = getJedis();
				String value = jedis.get(key);
				jedis.close();
				return value;
			}
		}
	
	复制机制
	redis提供一个复制机制，可以将数据从redis主服务器（master，主实例）复制到一个或多个redis从服务器
（slave，从实例）。
	复制可以提高系统的容错能力，也可以用于系统的水平扩展。
	复制机制是redis cluster（集群）的基础，但是cluster具有高可用特性，复制不能提供高可用能力。
	操作：
		复制配置文件：cp redis.conf redis-slave.conf
		创建slave目录：mkdir ./slave
		修改slave配置文件：
			port 6380
			pidfile /var/run/redis_6380.pid
			dir ./slave
			slaveof 127.0.0.1 6379
		启动主实例：redis-server redis.conf
		连接主实例：redis-cli -p 6379
		启动从实例：redis-server redis-slave.conf
		连接从实例：redis-cli -p 6380
		查看主从实例连接信息：info replication
		上面这个命令可以在主实例、从实例中执行，输出中比较重要的两个信息是：
			master_replid:a8123fddd5e44d48b8d5226f66ad8df40e2f0598
			master_repl_offset:1316
		master_replid用于标识主实例，master_repl_offset标识复制流中的一个偏移标记。
	slaveof可以在redis-cli直接使用来动态改变从实例的mater。
	当主从实例成功建立了复制关系后，如果是从实例第一次连接主实例，主实例会将所有数据转储到一个RDB文件，
然后发送该文件给从实例，从实例收到RDB文件后就删除自己内存中的所有数据，然后将RDB文件中的数据导入；
如果不是第一次连接，从实例首先将(master_replid;master_repl_offset)发送给主实例，主实例将根据配置决
定是否接受部分重新同步，如果接受就从收到的(master_replid;master_repl_offset)处开始增量地同步写入命令，
否则就会进行完全重新同步。
	当主实例收到新的写入命令后，它会转发一份该命令给从实例，这样就实现了数据同步。
	主实例上的同步操作时完全异步的，所以不会阻塞客户端写入数据到主实例。
	上面配置的从实例是只读实例，不能直接写数据到从实例中。
	从实例可以提升为主实例，这时其他的从实例需要与新主实例重新同步，redis4.0开始这种同步只需要部分同步。
	当从实例与主实例失去连接时，redis主实例会使用一个缓冲区来保存新的写入命令，这个缓冲区称为replication backlog，
其默认大小是1M。
		#repl-backlog-size 1mb
	在从实例重新连接上主实例时，如果主实例写入的数据量超过了replication backlog的容量，就会触发
一次完全重新同步，否则主实例就只需将replication backlog中保存的命令发送给从实例进行部分重新同步。
	其他参数：
		#所有从实例都与主实例断开连接后，主实例保留replication backlog的时间，其默认值是3600秒。
		# repl-backlog-ttl 3600	
		#是否合并小数据包为大包，默认为否，设为yes可以减小带宽使用，但是可能造成复制延迟
		repl-disable-tcp-nodelay no
		#是否启用无磁盘复制，设为yes就在完全重新同步时不将RDB文件写到磁盘上，直接将内存中的RDB文件发送给从实例。
		repl-diskless-sync no
		#主实例ping从实例的时间间隔（秒），从实例美秒都会像主实例发送RELPCONF ACK{offset}
		# repl-ping-slave-period 10
		# 主实例ping从实例和从实例发送ack请求到主实例、同步复制的超时时间，如果超时就会断开连接。
		# repl-timeout 60