										Redis分析与实践
	Redis入门：
	Redis是一个基于内存的轻量级键值数据库，或者说是一个数据结构服务器。Redis在内存中中实现了多种数据
结构的存储，并提供了操作这些数据结构的API。
	安装Redis：
	 1、mkdir -p /mytools/redis
	 2、cd /mytools/redis 
		wget http://download.redis.io/releases/redis-4.0.1.tar.gz
	 3、tar xzvf redis-4.0.1.tar.gz	
		cd redis-4.0.1
	 4、mkdir /mytools/redis/conf
		cp redis.conf /mytools/redis/conf/
	 5、cd deps
		make hiredis lua jemalloc linenoise
		cd ..
	 6、make
	 7、make prefix=/mytools/redis install
	Redis的版本号规则：major.minor.patch
	/mytools/redis/bin目录下的可执行文件：
		redis-server:	redis服务端
		redis-cli:		redis命令行工具
		redis-sentinel: redis-server的软链接
		redis-check-rdb:	redis RDB检查工具
		redis-check-aof:	redis AOF检查工具
		redis-benchmark:	redis基准/性能测试工具
	
	使用默认配置启动一个Redis实例：
		cd /mytools/redis
		bin/redis-server
	使用指定配置文件启动一个Redis实例：
		bin/redis-server conf/redis.conf
	以守护进程的方式在后台启动Redis实例：
		vim conf/redis.conf
		修改 daemonize 为 yes
	前台redis实例可以直接停止(Ctrl+C)，后台redis-server守护进程可以使用 kill pid-redis-server 停止
	使用命令行工具停止redis-server实例：
		bin/redis-cli shutdown
	一个redis实例就是一个运行中的redis-server进程，一台机器上可以运行多个redis实例，这些实例采用不
同的配置，比如监听不同的端口。
	通常不建议直接 kill redis-server进程，因为这样可能会导致数据未被持久化而丢失。使用shutdown命令
通常可以保证数据的完整性和一致性。
	事实上使用kill时如果向redis-server进程发送SIGTERM(15)信号也相当于使用shutdown命令。
	另外，启动redis-server实例时可以将参数加在命令中。
	
	使用redis-cli连接到redis:
		bin/redis-cli
		交互界面：127.0.0.1:6379>
	redis-cli默认连接本机的6379端口。使用-h 指定要连接的主机ip/地址，-p指定端口，-a指定密码，-s指定
Unix套接字。
	执行简单命令：set foo value1
	交互界面中可以使用shutdown命令关闭redis-server实例。
	获取redis实例状态信息：redis-cli交互环境中使用INFO命令，查看单项(内存)状态信息：
INFO sec(Memory)	
	直接在shell中获取redis实例状态信息：redis-cli INFO
	
	Redis使用单线程、非阻塞、多路复用的I/O模型。它有一个异步事件支持库，称为ae，这个库封装了各个操
作系统提供的polling支持，即内核对异步调用的支持。
	因为redis是单线程执行，所以在一个命令完成前，不能处理其它命令，这就带来了延迟问题。
	
	Redis通信协议：RESP，redis序列化协议。
	客户端发送给redis-server的命令都需要被转换为RESP格式的字符串数组：
		set foo bar 	->		"*3\r\n\$3\r\nset\r\n\$3\r\nfoo\r\n\$3\r\bbar\r\n"
		* 表示这是一个数组，3表示数组大小，\r\n是分隔符，\$3表示后面的参数的字符数，set是(命令)参数
	
	Redis数据类型：
	字符串：基本命令：
		set zhangsan male
		set "Extreme Pizza" "100 Broadway, New York"
		get zhangsan
		get "Extreme Pizza"
		get lisi 					(key不存在时返回 nil)
		strlen "Extreme Pizza"		(返回value的长度，key不存在时返回0)
		append zhangsan ", 25"		(原字符串末尾追加)
		setrange "Extreme Pizza" 14 "Washington DC"		(替换，14是index，index从0开始)
		setnx zhangsan "female, 24"		(key不存在时才设值，等同于 set key value nx)
		set zhangsan "female, 24" xx	(key存在时才设值，就是覆盖原值)
		mset zhangsan male lisi male "Extreme Pizza" "100 Broadway"
		mget zhangsan lisi "Extreme Pizza"
	Redis内部存储字符串值时使用3种编码方式：
		1、能够使用 64位有符号整数表示的数使用int存储，如12345
		2、长度小于等于44的使用embstr编码（redis4.x）
		3、大于44的使用raw编码（redis4.x）
	使用object命令查看redis值的内部编码：
		object encoding zhangsan
	
	列表：基本命令：
		lpush best-friends zhangsan lisi "John St"	(向左插入，"John St"将在最前面)
		lrange best-friends 0 -1	(列表从左向右index为0~N-1，从右到左index为-1~-N，这里
0 -1就表示整个列表)
		rpush best-friends wangwu   (向右插入)
		linsert best-friends before/after zhangsan liuxiaohua		(在指定值前面/后面插入)
		lindex best-friends 2		(返回指定索引处的值)
		lpushx/rpushx friends zhangsan 	(当key存在时才插入值)
		lpop/rpop best-friends		(从左端/右端弹出(删除)值)
		ltrim best-friends 2 3		(只保留索引位置为2、3的值)
		lset best-friends 1 lisi	(替换指定index处的值)
		blpop/brpop friends 0		(阻塞式弹出，0为超时时间(单位:秒)，0表示永久等待)
适用于：任务执行程序(redis客户端)等待任务调度程序分配任务
	redis内部使用quicklist存储列表对象，quicklist的两个配置选项：
		list-max-ziplist-size : 列表内部节点的最大大小，使用默认值即可
		list-compress-depth : quicklist两端不被压缩的节点的个数，我们在访问一个很长列表时可能
常用的数据在列表两端，这样调节这个参数就可以平衡压缩比和访问效率。
	
		
		
		
		
		
	
		