											docker参考文档
								（参考文档：https://docker_practice.gitee.io/）
	虚拟化技术是一种为应用构建独立（隔离）运行环境的技术，传统的虚拟技术是通过虚拟机软件虚拟出一套硬件后，在其上运行一个完整操作系统，
在该系统上再运行所需应用进程。容器技术则是一种操作系统层面的虚拟化技术，容器内的应用进程直接运行于宿主的内核，但是容器进程之间以及容器
进程和宿主机中的进程之间都实现了很好的隔离。
	docker是一个开源容器平台，docker早期是基于 LXC技术实现的，现在的docker则是基于 runC 和 containerd技术实现虚拟化（容器进程隔离）。
具体来说docker是基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离。
	相比传统虚拟机，docker具有以下优点：启动更快，占用硬盘空间更小，性能更接近原生应用，宿主机能容纳更多容器进程。
	
	docker镜像
	docker镜像是一个特殊的(root)文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、
环境变量、用户等）。这个文件系统被操作系统挂载后，就实现了一个独立的用户空间。
	docker设计时，充分利用了 Union FS 的技术，将镜像设计为分层存储的架构，一个镜像由多层文件系统联合组成（一组文件系统）。构建镜像时，先构建内层
镜像（文件系统），再构建外层，内层作为外层的基础。
	分层存储的特征使得镜像的复用、定制变的更为容易，可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。
	
	docker容器
	docker容器是运行的镜像，即镜像是静态的磁盘文件，而容器是执行镜像文件的进程。
	docker容器进程和宿主机上的普通进程不同之处在于，容器进程运行于属于自己的独立的命名空间。容器进程可以拥有自己的 root 文件系统、自己的网络配置、
自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。
	当一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，可以称这个为容器运行时读写而准备的存储层为 容器存储层。容器存储层的生存周期
和容器一样，容器消亡时，容器存储层也随之消亡。
	docker 最佳实践1：容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，
在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。
	数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡

	Docker Registry
	Docker Registry是一种集中存储、分发镜像的服务，一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签
对应一个镜像。最常使用的 Registry 公开服务是官方的 Docker Hub，这也是默认的 Registry，可以配置使用第三方或者自己搭建的Registry服务。

	CentOS 7 安装 docker-ce
	卸载旧版本：
		yum remove docker \
				docker-client \
				docker-client-latest \
				docker-common \
				docker-latest \
				docker-latest-logrotate \
				docker-logrotate \
				docker-selinux \
				docker-engine-selinux \
				docker-engine
	安装依赖包：
		yum install -y yum-utils \
				device-mapper-persistent-data \
           		lvm2
	配置国内安装源（科大镜像）：
	 	yum-config-manager \
    			--add-repo \
    			https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo
	安装docker-ce：
		yum install docker-ce
	安装测试版：
		#先启用测试源
		yum-config-manager --enable docker-ce-test
		#安装
		yum install docker-ce-test
	启动 docker-ce：
		#配置自动启动
		systemctl enable docker
		#手动启动
		systemctl start docker
	创建docker用户组：
		groupadd docker
	添加用户到docker用户组：
		usermod -aG docker zhangwei
	
	配置国内镜像加速器(使用Azure 中国、七牛云镜像)：
		在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在则新建该文件）：
			{
				"registry-mirrors": [
					"https://dockerhub.azk8s.cn",
					"https://reg-mirror.qiniu.com"
				]
			}
		重启服务
		sudo systemctl daemon-reload
		sudo systemctl restart docker
		查看是否添加成功：
			docker info
			输出中包含以下内容则已添加成功
				Registry Mirrors:
					https://dockerhub.azk8s.cn/
					https://reg-mirror.qiniu.com
			如果输出中含有以下内容：
				WARNING: bridge-nf-call-iptables is disabled
				WARNING: bridge-nf-call-ip6tables is disabled
			可以修改配置：
				sudo tee -a /etc/sysctl.conf <<-EOF
				net.bridge.bridge-nf-call-ip6tables = 1
				net.bridge.bridge-nf-call-iptables = 1
				EOF
			然后重新加载sysctl.conf文件：
				sudo sysctl -p
	
	获取镜像：
		docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
		实例：
			docker pull ubuntu:18.04
			#不写出仓库地址，默认地址就是Docker Hub，仓库名称应该是 用户名/仓库名，这里没有给出用户名，就使用默认的library用户。
			#不写标签，则默认使用latest标签
	运行容器：
		docker run -it --rm ubuntu:18.04 bash
		# 参数 -i 表示交互式操作，参数 -t 表示终端。
		# 参数 --rm 表示容器退出后随之将其删除（默认不会在容器退出后删除容器）
		# bash 表示执行（进入）启动的ubuntu容器的bash
		下面是启动的ubuntu1804容器内操作
			root@11392a99f3c4:/#
			root@11392a99f3c4:/# cat /etc/os-release
			root@11392a99f3c4:/# exit
	
	列出已经下载下来的镜像:
		#显示内容包括 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间。
			docker image ls
		#这个命令只会显示顶层镜像，如果需要显示中间层镜像，使用：
			docker image ls -a
		#根据仓库名列出镜像：
			docker image ls ubuntu
		#根据仓库名和标签列出特定的某个镜像
			docker image ls ubuntu:18.04
		#使用--filter或-f过滤镜像
			docker image ls -f since=ubuntu:18.04
		#只列出镜像ID
			docker image ls -q
		#列出镜像ID和仓库名
			docker image ls --format "{{.ID}}: {{.Repository}}"
		#列出镜像摘要
			docker image ls --digests
	查看镜像、容器、数据卷所占用的空间:
		docker system df
	删除虚悬镜像：
		docker image prune
	删除镜像：
		# 可以根据镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要 执行删除
		# docker image rm [选项] <镜像1> [<镜像2> ...]
		docker image rm 775349758637
		docker image rm ubuntu:18.04
		docker image rm ubuntu@sha256:6e9f67fa63b0323e9a1e587fd71c561ba48a034504fb804fd26fd8800039835d
	删除镜像时，首先是删除镜像上的满足删除条件的标签，因为一个镜像可以对应多个标签，所以如果某些标签不在参数范围内，则不会删除这个镜像和这些标签。
只有镜像上的标签都在删除条件内，才会触发镜像删除。
	因为镜像是多层存储结构，所以在删除的时候也是从上层向基础层方向依次进行判断删除，如果某一层被其他镜像依赖，则删除只会到该层的上一层。
	如果某个镜像启动的容器还存在（即使容器没有运行），那么不能删除这个镜像。
	删除命令中使用docker image ls 命令来获取镜像ID：
		docker image rm $(docker image ls -q redis)
	
	搜索可下载的镜像：
		docker search nginx
	使用指定名称启动一个容器和映射端口：
		# -p 80:80前一个80是宿主机端口，后一个是docker容器进程的虚拟端口
		docker run --name webserver -d -p 80:80 nginx
	进入运行中的容器：
		docker exec -it webserver bash
	修改运行中的nginx主页：
		cd /usr/share/nginx/html/
		tee ./index.html << -EOF
			Hello Docker!
			-EOF
	退出容器进程：exit
	查看改动的内容：
		docker diff webserver
		C /root
		A /root/.bash_history
		...
		C /usr/share/nginx/html
		C /usr/share/nginx/html/index.html
		...
	可以看到，这里所做的修改其实要比手动修改的多。
	在一个运行中的不使用卷的容器中所做的修改都会被记录于容器存储层里。
	将容器存储层和原镜像保存为一个新镜像：
		docker commit \
    		--author "zhangwei"
			--message "修改默认网页" \
			webserver \
    		nginx:v2
	保存的新镜像为 nginx:v2，--author和--message是可选部分。
	查看镜像内的历史记录：
		docker history nginx:v2
	运行新镜像：
		docker run --name web2 -d -p 81:80 nginx:v2
	使用 docker commit 生成的镜像也被称为 黑箱镜像，即是说构造镜像的过程难以被记录，导致镜像不能被理解。
	查看容器状态：
		docker ps -a
	过滤指定镜像的容器：
		docker ps -a -f ancestor=alpine
	关闭运行中的容器：
		docker stop 759454521566
	重新启动已关闭的容器：
		docker restart 759454521566
	删除已关闭的容器：
		docker rm 759454521566
	删除指定镜像的容器：
		docker rm $(docker ps -a -q -f ancestor=alpine:v2)

	定制镜像：通过修改一个已有的镜像的文件和配置得到一个新的镜像的过程。通常使用Dockerfile文件来描述定制镜像的操作。
	Dockerfile 是一个文本文件，其内包含了一条条的 指令，每一条指令描述了如何构建镜像的某一层。
	简单的Dockerfile示例：
		FROM nginx
		RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
	FROM 指令指定用于构建新镜像的基础镜像，这条指令应该是Dockerfile文件的第一行。
	官方Registry服务（Docker Hub）提供了一批可以直接作为应用服务使用的镜像，也提供了一些基础的操作系统镜像，可以使用
应用服务镜像定制自己的镜像，也可以从操作系统镜像开始构建自己的应用镜像。
	Docker 中存在一个名为 scratch 的特殊镜像，表示一个空白的镜像，使用这个镜像作为基础镜像，意味着需要自己从头开始构建镜像。
	RUN 指令是用来执行命令行命令，具有两种格式：
		shell 格式：RUN <命令>
		exec 格式：RUN ["可执行文件", "参数1", "参数2"]
	Dockerfile文件中的每一条RUN指令都会创建一层镜像：
		FROM debian:stretch
		#新建一层镜像，该镜像在操作系统镜像基础上更新了软件仓库缓存
		RUN apt-get update
		#新建一层镜像，该镜像在上面创建的镜像基础上安装了编译环境
		RUN apt-get install -y gcc libc6-dev make wget
		...
	在Dockerfile文件中使用多条RUN指令可能会导致创建的镜像过于臃肿，因为很多运行时不需要的中间层镜像被保留了，而且由于Union FS 存在
最大层数限制（AUFS不得超过 127 层），还可能导致构建失败。
	为了构建一个没有中间层镜像的应用服务镜像，可以使用&&连接各条RUN指令：
		FROM debian:stretch
		RUN buildDeps='gcc libc6-dev make wget' \
			&& apt-get update \
			&& apt-get install -y $buildDeps \
			...
			&& apt-get purge -y --auto-remove $buildDeps
	构建镜像命令：
		docker build [选项] <上下文路径/URL/->
		示例：
		docker build -t nginx:v3 .
	Docker 引擎使用REST API提供对外接口，docker 命令实际上是一个客户端工具，它通过Docker 引擎的REST API 与 Docker 引擎交互。那么当
执行docker build 时，docker引擎不能直接知道从哪里开始构建，这就需要传入参数告诉docker引擎构建的开始位置，这个参数就是后面的上下文路径。
通常Dockerfile就保存在这个上下文路径下，所以不需要给出Dockerfile的位置，如果Dockerfile不在这个路径下，就需要使用-f path传入Dockerfile
的路径。
	docker中COPY 指令、ADD 指令等指令涉及到文件操作，指定文件路径时应该基于传入的上下文路径，例如：
		COPY ./package.json /app/
		#这里指的是复制 上下文路径下的 package.json而非执行docker build命令时所在的路径；后面的/app/是镜像中的路径，所以这里是把宿主机的
一个文件复制到了镜像的文件系统中。
	通常的做法是，将 Dockerfile 置于一个空目录下，或者项目根目录下，把涉及到的文件复制一份到这个目录下或其子目录下，对于存在于构建上下文
路径下而不需要参与构建的文件，可以在一个.dockerignore文件中列出，这个文件的语法和.gitignore相同。
	docker build 还支持从 URL 构建，比如可以直接从 Git repo 中构建、用给定的 tar 压缩包构建
	从标准输入中读取 Dockerfile 进行构建：
		docker build - < Dockerfile
	这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 COPY 进镜像之类的事情。
