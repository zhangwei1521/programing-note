							spring cloud 微服务开发手书
第一章 基础知识
	微服务是什么？
	微服务是对单体系统进行分布式改造的一种设计架构模式，通过分布式的多个独立运行的服务进程代替单进程的单体应用，
服务之间使用轻量级的HTTP消息进行通信，每一个服务都只关注一组耦合度较高、业务一致的功能，并且每个服务维护自己的数据
存储、测试以及部署发布。不同的服务可以采用不同的语言进行开发。
	
	单体系统出了问题？
	单体系统随着需求的扩展，变得越来越复杂和臃肿，部署发布也变得耗时麻烦，并且不利于团队协作。
	
	微服务不是万能的：
	多个服务进程的编排会给运维带来新的挑战；服务间调用时接口变动需要保证一致性；分布式系统固有的复杂性：如网络问题、
分布式事务等。
	
	Martin Fowler提出的微服务架构九大特性：
	服务组件化、按业务组织团队、做产品的态度、智能端点和粗粒度的通信、去中心化治理（解耦单一开发平台）、去中心化
管理数据、基础设施自动化（自动化测试、自动化部署）、容错设计、演进式设计。
	
	各种微服务框架都是为了充分利用微服务架构的优点，同时尽可能地解决微服务带来的问题。
	
	为什么是spring cloud？
	spring cloud提供了实施微服务架构的所有框架，spring cloud组合了一批经过充分测试的基础框架（组件），同时提供了
一些新的边缘组件。
	
	spring cloud简介：
	它是一个基于spring boot实现的微服务开发框架工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、
集群状态管理、分布式会话等操作提供了一种简单的开发方式。
	spring cloud包含多个子项目（框架组件）：spring cloud config、 spring cloud netflix等。
	spring cloud的版本：大版本使用伦敦的地铁站名（按字母排序），bug修复版为SRX。例如：Brixton.SR5

	
第二章 spring boot基础
	为什么是spring boot？
	spring cloud 的各个子项目都是使用spring boot进行开发的；同时由于spring boot的快速开发、自动化配置等优秀特性，
在我们自己的项目中，最好也使用它来开发自己的微服务。
	
	spring boot做了什么？
	spring boot提供了大量的自动化配置以代替老式spring工程的样板式配置；spring boot还提供了一系列starter poms
（起步依赖模块）以帮助我们手动维护项目中复杂的依赖关系；spring boot支持嵌入式的web容器，可以很方便的进行容器化部署
发布。
	spring boot工程搭建参考SpringBoot笔记，下面是springboot的配置介绍。
	配置文件存放目录：src/main/resources，默认配置文件是application.properties；除了properties文件外，也可以使用
yml格式文件。yml文件的一个好处是可以在一个yml文件中通过spring.profiles属性来指定多个不同的环境配置。
另外，yml中定义的属性是有顺序的。
	自定义参数：配置文件中添加自定义参数，应用组件Bean可以使用@Value("${att_name}")或者@Value("#{att_name}")
注入该参数。在配置文件中可以使用${att_name}引用配置文件中定义的参数。配置文件中还可以使用${random}生成随机值：
	${random.value} #随机字符串
	${random.int} #随机int
	${random.long} #随机long
	${random.int(10)} #10以内的随机整数
	${random.int[10,20]} #10到20的随机整数
	
	命令行运行jar包添加参数： java -jar xxx.jar --server.port=8088
	多环境配置：创建多个不同环境的配置文件，命名格式：application-{profile}.properties；在主配置文件
application.properties中使用属性：spring.profiles.active={profile}指定使用哪个环境的配置文件。
	springboot加载配置属性顺序问题：
	1.命令行参数->2.操作系统环境变量->3.当前应用jar包外部的application-{profile}文件->4.当前应用jar包内部的
application-{profile}文件->5.当前应用jar包外部的application文件->6.当前应用jar包内部的
application文件->7.@Configuration注解修饰类中@propertySource修饰的属性变量值->8.springboot默认属性值。
（其中有一些不常用的配置方式没有列出）。
	第3项和第5项表明可以使用jar包外部的配置文件来取代jar包内部的配置。
	微服务架构下需要收集微服务应用的各项指标情况，根据这些指标信息制定监控和预警规则。所以每一个微服务应用都需要
有一套提供应用指标信息的接口，而使用springboot构建的微服务应用可以使用spring-boot-starter-actuator实现这一套
接口。
	spring-boot-starter-actuator提供的原生端点可以分为三种类型：
	应用配置类：应用配置、环境变量、自动化配置等信息；
	/autoconfig: 获取应用的自动化配置信息
	/beans:	获取应用上下文创建的所有bean
	/configprops: 获取应用中配置的属性信息（看起来像是配置端点的）
	/env: 获取应用所有可用的环境属性：包括配置文件中配置的属性、环境变量、JVM属性、命令行参数等
	/mapping: 返回springMVC的控制器映射关系信息，包括处理器映射器和实际处理方法等
	/info: 返回配置文件中以info开头的自定义属性
	
	度量指标类：内存信息、线程池信息、http请求统计信息等；
	/metrics: 获取应用的运行时信息，包括内存使用情况、线程信息、处理器信息、http会话信息等，可以使用/metrics/{name}
获取具体某一方面的信息
	/health: 应用的健康指标，主要是磁盘空间占用、数据源是否可用等信息
	/dump: 返回运行中的线程信息
	/trace: 返回跟踪的最近100条http请求和响应信息
	
	操作控制类：关闭应用等操作接口
	操作控制类端点默认是不启用的，需要配置：endpoints.shutdown.enabled=true(原生端点只提供了shutdown端点来关闭应用)

第三章 服务注册发现组件（Eureka）
    服务注册发现组件需要提供的功能：
        1、各个微服务启动时，需要通过某种方式获得依赖的微服务的地址、接口信息，而不是把依赖服务的地址、接口写在当前
服务的文件中；
        2、微服务运行期可以动态地获得其依赖的微服务的其他实例的地址接口信息；
        3、当依赖的某个微服务实例进程或其所在主机突然崩溃或进入某种不正常的情况无法提供服务时，当前微服务应该能知道
这种异常并停止继续调用该微服务实例的接口，并且能够自动地切换到其他可用的同类微服务实例，新启动的微服务也不会获得不可
用微服务的地址接口信息；
        4、微服务运行期，获取依赖的微服务地址的方式变得不可用后，之前正常通信的微服务间通信不能被影响中断。
    
    服务注册发现组件设计：
                  服务注册中心
                /! 服务    \服务注册
               / ! 发现     \
            微服务A -—-—-———-—> 微服务B

        1、服务注册：各个微服务在启动时，将自己的网络地址等信息注册到注册中心，注册中心存储服务的这些信息；
        2、服务发现：服务消费者从注册中心查询依赖的微服务实例的网络地址，并使用该地址调用依赖的微服务提供的接口；
        3、各个微服务将从注册中心获取的依赖微服务的地址消息缓存在本地，并使用一定机制更新缓存信息（例如定时任务更新、
事件推送更新等）；
        4、注册中心和各个微服务之间通过某种机制（例如心跳）通信，注册中心如果长时间无法与某微服务实例通信，就自动注销
（删除）该实例；
        5、当微服务实例的网络地址发生变更（例如实例增减或者IP端口发生变化等）时，会重新注册到注册中心，注册中心更新微
服务的相关信息；

    spring cloud eureka 是 spring 社区基于Netflix Eureka封装的服务注册发现组件，负责spring cloud微服务架构中的服
务治理工作，即微服务实例的自动注册和发现。
    eureka 实现了注册中心组件和客户端服务治理组件。
    eureka 注册中心使用服务注册表记录各个微服务的信息，例如微服务的名称、IP、端口等。服务注册表提供查询API和管理API，
查询API用于查询可用的微服务实例，管理API用于服务的注册和注销；
    eureka 客户端服务治理组件既用于向注册中心登记当前微服务实例，同时也作为服务发现组件，从注册中心获取依赖的微服务的
地址接口信息。
    eureka 客户端以心跳的方式向 eureka 注册中心报告服务实例的状态，注册中心可以据此排除不可用的服务实例，即服务检查。
	使用客户端服务发现可以基于服务名进行，从而和服务提供者的具体位置解耦，还可以使用负载均衡（使用其他组件实现）。

	服务注册中心的搭建：
	新建springboot工程：eureka-server
	pom依赖：
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<!--
                <version>1.3.7.RELEASE</version>
            -->
            <!--springcloud Greenwich版本需要springboot 2.1.x支持-->
            <version>2.1.6.RELEASE</version>
			<relativePath/>
		</parent>
		<dependencies>
            <!--旧版本使用这个依赖-->
            <!--
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-starter-eureka-server</artifactId>
                </dependency>
            -->
            <!--新版本使用这个依赖-->
            <dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
			</dependency>
		</dependencies>
		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<!--
                        <version>Brixton.SR5</version>
                    -->
                    <version>Greenwich.SR2</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>
	启动类上添加注解：
		@EnableEurekaServer
	修改配置文件application.properties:
		server.port=8761
		eureka.instance.hostname=localhost
		#下面两行配置目的是不向自己注册自己
		eureka.client.register-with-eureka=false  
		eureka.client.fetch-registry=false
		#配置注册中心的地址（客户端配置）
		eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
    使用yml格式配置文件：application.yml
        spring:
            application:
                name: eureka-server
        server:
            port: 8761
        eureka:
            client:
                register-with-eureka: false
                fetch-registry: false
                service-url:
                defaultZone: http://localhost:8761/eureka/
            server:
                enable-self-preservation: false
                eviction-interval-timer-in-ms: 5000
	启动 eureka-server 就可以通过 http://localhost:8761/ 查看注册中心了。
    
    eureka 注册中心面板说明：
    第一部分：System Status
        Environment，默认为test；
        Data center，默认为default；
        Current time，当前系统时间
        Uptime，Eureka Server 已启动运行时间；
        Lease expiration enabled，是否启用租约过期，自我保护机制关闭时，该值默认是true， 自我保护机制开启之后为false;
        Renews threshold，每分钟最少续约数（心跳数），Eureka Server 期望每分钟收到客户端实例续约的总数;
        Renews (last min)，最后一分钟的续约数量（不含当前，1分钟更新一次），Eureka Server 最后 1 分钟收到客户端实例续约的总数。
	第二部分：红字提醒，系统在三种情况下会出现红色加粗的字体提示：
        1、在配置文件中关闭了自我保护机制，提示：
            RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.THIS MAY NOT PROTECT 
            INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.
        2、自我保护机制被触发开启后，提示：
            EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER 
            THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
        3、在配置文件中关闭了自我保护机制，但是一分钟内的续约数没有达到85% ， 可能发生了网络分区，提示：
            THE SELF PRESERVATION MODE IS TURNED OFF.THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER
            PROBLEMS.
    第三部分：DS Replicas，这个Eureka Server的相邻节点（包括自己），互为一个集群。
    第四部分：Instances currently registered with Eureka，登记到此Eureka Server的服务实例。
    第五部分：General Info
            total-avail-memory : 总共可用的内存
            environment : 环境名称，默认test
            num-of-cpus : CPU的个数
            current-memory-usage : 当前已经使用内存的百分比
            server-uptime : 服务启动时间
            registered-replicas : 这个Eureka Server的相邻集群复制节点
            unavailable-replicas ：不可用的集群复制节点，通过向集群中的其他节点发送接口查询自身的注册信息，如果查询不到，
            则默认为不可用，所以如果Eureka Server自身不作为客户端注册到注册中心集群，则相邻节点都会显示为不可用。
            available-replicas ：可用的相邻集群复制节点
    第六部分：Instance Info
            ipAddr：eureka服务端IP
            status：eureka服务端状态
    /lastn面板部分：
        Last 1000 cancelled leases：最后1000个取消的租约
        Last 1000 newly registered leases：最后1000个新注册的租约

	服务实例的注册和发现：
	新建springboot工程：hello-sevice
	pom依赖：
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<!--
                <version>1.3.7.RELEASE</version>
            -->
            <!--springcloud Greenwich版本需要springboot 2.1.x支持-->
            <version>2.1.6.RELEASE</version>
			<relativePath/>
		</parent>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
            <!--旧版本使用这个依赖-->
			<!--
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-starter-eureka</artifactId>
                </dependency>
            -->
            <!--新版本使用这个依赖-->
            <dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
			</dependency>
		</dependencies>
		</dependencyManagement>
			<dependencies>
				<!-- 同上-->
			</dependencies>
		</dependencyManagement>
	旧版本（Dalston及更早版本）需要在启动类上添加注解：
		@EnableDiscoveryClient
    从Edgware开始，该注解可省略。
	Controller中注入DiscovertyClient:
		@Autowired
		private DiscoveryClient discoveryClient;
	使用DiscoverryClient：
		@RequestMapping(value="/hello", method=RequestMethod.GET)
		public String hello(){
			List<ServiceInstance> instanceList = discoveryClient.getInstances("ORDER-SERVICE");
            System.out.println("ORDER-SERVICE =======> "+instanceList.get(0).getUri());
			return "hello";
		}		
	修改配置文件application.properties:
		spring.application.name=hello-service
		eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/ 

	高可用注册中心：服务注册中心非常重要，因此需要考虑故障的应对方法，Eureka server的设计考虑到了这一点，提供了服务
注册中心互相注册的机制，通过这种互相注册实现服务清单的互相同步。
	构建一个双节点的服务注册中心集群：
	为前面的服务注册中心工程 eureka-server 添加两个配置文件：application-peer1.properties和application-peer2.properties:
	application-peer1.properties
		spring.application.name=eureka-server
		server.port=1111
		eureka.instance.hostname=peer1
		eureka.client.serviceUrl.defaultZone=http://peer2:1112/eureka/
	application-peer2.properties
		spring.application.name=eureka-server
		server.port=1112
		eureka.instance.hostname=peer2
		eureka.client.serviceUrl.defaultZone=http://peer1:1111/eureka/
	修改host文件：
		127.0.0.1 peer1
		127.0.0.1 peer2
	分别启动两个eureka-server：
		java -jar eureka-server-1.0.0.jar --spring.profiles.active=peer1
		java -jar eureka-server-1.0.0.jar --spring.profiles.active=peer2
	注册hello-service到eureka-server集群上：修改hello-service配置文件：application.properties
		spring.application.name=hello-service
		eureka.client.serviceUrl.defaultZone=http://peer1:1111/eureka/,http://peer2:1112/eureka/
	使用IP地址而不是主机名作为eureka服务注册中心的地址：添加配置项：
		eureka.instance.prefer-ip-address=true  
	
	Eureka服务治理基础架构的三个核心要素：服务注册中心、服务提供者、服务消费者
	服务治理机制：
	服务注册：服务提供者在启动时就会将自己的信息通过请求发送给服务注册中心，服务注册中心使用一个双层Map结构保存
服务实例信息，第一层key值是服务名，第二层key值是服务实例名。如果在启动时不希望注册服务到注册中心，可以使用如下配置：
		eureka.client.register-with-eureka=false  //该值默认为true
	服务同步：在高可用注册中心集群中，当服务提供者发送注册请求到一个注册中心时，该注册中心将会把这个注册请求转发给
集群内与之相连的其他注册中心，从而实现服务注册中心间服务清单的同步。
	服务续约：注册服务后，服务提供者会维护一个心跳向注册中心持续地报告自身状态。注册中心使用两个属性来确定客户端发送
心跳的间隔时间和服务失效时间：
		#Eureka客户端向服务端发送心跳的时间间隔，单位为秒（客户端告诉服务端自己会按照该规则）
		eureka.instance.lease-renewal-interval-in-seconds=30
		#Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己）
		eureka.instance.lease-expiration-duration-in-seconds=90
	服务消费者：服务消费者启动的时候会向注册中心发送一个请求以获取注册中心注册的服务清单，注册中心（Eureka Server）会
维护一份只读的服务清单返回给客户端，并且30秒更新一次该清单。要从注册中心获取服务清单必须确保:
		eureka.client.fetch-registry=true
	客户端使用属性：
		eureka.client.registry-fetch-interval-seconds
	的值（默认为30秒）更新缓存的服务清单。
	服务调用：Eureka使用Region和Zone的概念划分服务分组，一个Region中可以包含多个Zone，每个客户端被注册到一个zone，因此
一个客户端对应一个Zone和一个Region，服务调用时优先访问同一个zone的服务提供者，找不到再访问同一个Region的服务提供者。
	服务下线：当服务实例正常关闭时，会向注册中心发送一个请求告知下线，注册中心将该服务设置为下线，并传播该事件。
    服务下线方式：
        1、通过eureka提供的http端点下线服务，发送delete请求：
            http://localhost:8761/eureka/apps/USER-SERVICE/home-pc:user-service:8000
        这个请求会把服务从eureka服务实例列表中移除，如果服务实例没有停止，那这个服务实例还会继续发送心跳到eureka，
所以又会继续登记到注册中心。
        2、服务实例通过DiscoveryManager.getInstance().shutdownComponent();通知eureka下线本服务实例，这种方式已过期。
	失效剔除：注册中心(Eureka Server)在启动时会创建一个定时任务，每隔一段时间（默认60秒）检测服务清单，将超时（默认90秒）
没有续约的服务剔除。通常是服务实例非正常结束（内存溢出等）导致注册中心进行失效剔除。
    失效剔除配置：
            #eureka server配置：每10秒检查一次服务实例，默认为60秒
            eureka.server.eviction-interval-timer-in-ms=10000
            #服务实例配置：
            #服务实例每5秒发送一次心跳到eureka server
            eureka.instance.lease-renewal-interval-in-seconds=5
            #通知eureka server在15秒后还没有收到此服务实例的心跳就销毁此服务实例
            eureka.instance.lease-expiration-duration-in-seconds=15
	自我保护：eureka server在检测时，发现服务实例是否在lease-expiration-duration-in-seconds没有发送心跳后，那么应该剔除
此服务实例，但是有可能并不是此服务实例已经停止了，而是网络故障导致其发送的心态没有到达eureka server，如果剔除此服务，则网络
恢复后，此服务实例也不会被重新登记，因为服务登记只在服务启动或eureka server启动时进行。为了处理这种问题，eureka server在
剔除服务实例前，会检查过去1分钟内收到的心跳数是否小于等于 Renews threshold（这个值在eureka server启动后每隔15分钟更新一次，
更新算法：expectedNumberOfClientsSendingRenews*(60/30)*0.85，服务下线不会修改这里的expectedNumberOfClientsSendingRenews
（只有少于15%的服务下线才会修改这个值，超过15%就不再修改），每次服务注册，expectedNumberOfClientsSendingRenews+=1），
如果是，就认为出现了网络故障（这是基于不会出现大量(>15%)服务在1分钟内内都停止服务这样的假设），eureka server就保护当前实例，
这样这个服务实例就不会过期被剔除。
    eureka server的自我保护机制，可能会造成客户端拿到的服务实例是不可用的，这需要服务消费者自己去实现容错处理。通常本地调试
容易触发自我保护，实际环境通常是网络不稳定触发自我保护。注册中心关闭自我保护机制配置：
		eureka.server.enable-self-preservation=false

	//设置Region属性：eureka.client.region=? #定义发现哪个region的服务
	//设置zone属性：  eureka.client.availability-zones=?,?  #定义发现哪些zone的服务
	Region默认值为default，Zone默认值为defaultZone
	@EnableDiscoveryClient注解用于开启DiscoveryClient的实例，使用eureka客户端就是创建DiscoveryClient的实现类EurekaDiscoveryClient
的实例对象，该对象使用netflix的DiscoveryClient对象完成服务注册和发现。
	客户端配置：eureka.client作为前缀
	指定注册中心：eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/ #默认值为http://localhost:8761/eureka/
				 eureka.client.serviceUrl.defaultZone = http://<username>:<password>@localhost:8761/eureka/ #添加安全校验
	启用客户端：  eureka.client.enabled = true #默认为true
	启用过滤：	  eureka.client.filterOnlyUpInstances = true  #默认为true
	...
	服务实例配置：eureka.intance作为前缀
	实例名配置：  eureka.intance.instanceId = ${spring.application.name}:${random.int}
	实例所属zone：eureka.intance.metadataMap.zone=guangzhou
	通常微服务实例需要使用spring-boot-starter-actuator提供应用运行状态数据，eureka注册中心默认使用/info端点作为服务实例状态页接口，
当开启了healthCheck后使用/health端点作为作为健康检查接口。如果应用设置了context-path，则actuator端点会添加一个前缀，需要修改/info
端点和/health端点配置：
        management.context-path = /hello
        eureka.instance.statusPageUrlPath = ${management.context-path}/info
        eureka.instance.healthCheckUrlPath = ${management.context-path}/health
	修改端点路径：
        endpoints.info = /appInfo
        eureka.instance.statusPageUrlPath = ${endpoints.info}
        eureka注册中心使用http暴露服务实例的端点，如果实例端点实际使用https暴露端点，需要配置绝对路径：
        eureka.instance.statusPageUrl = https://${eureka.instance.hostname}/info
	开启健康检查：
        eureka.client.healthcheck = true
        eureka.instance.appname = hello #默认使用spring.application.name
	配置随机端口号：server.port = 0 或 server.port = ${random.int[10000,19999]}

第四章 Ribbon
	Spring Cloud Ribbon是一个工具类框架，由于微服务间的调用和网关转发请求几乎都会使用Ribbon，因此Ribbon几乎存在于所有微服务和基础构件中。
	服务端负载均衡：通过硬件或者软件模块根据可用服务清单分发请求，并通过心跳方式更新服务清单。
	客户端负载均衡：客户端从注册中心获取所使用的服务清单，也通过心跳从注册中心更新该清单。Eureka、Consul都整合了Ribbon相关功能，可以和
客户端Ribbon配合提供服务清单。服务提供者不需要关心具体的负载均衡方式，只需要提供可用服务实例，服务消费者只需要引入Ribbon依赖，使用
@LoadBalanced修饰的RestTemplate来调用服务。
	RestTemplate使用：
	GET请求：
		  <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, ...urlVirable)	//ResponseEntity封装了请求响应，如 
HttpStatus 等，其父类是 HttpEntity，T getBody()方法将根据第二个参数T.class返回给定类型数据(对象)。
重载方法：<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> urlVariables)
		  <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)
使用:     ResponseEntity<String> result = restTemplate.getForEntity("http://HELLO-SERVICE/hello2?name={1}",String.class,"hello");
		  String hello = result.getBody();
	
		  <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)   //相当于直接返回getForEntity返回值ResponseEntity 的body部分
重载方法：<T> T getForObject(String url, Class<T> responseType, Map<String, ?> urlVariables)
		  <T> T getForObject(URI url, Class<T> responseType)
	
	POST请求：
		  <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables)
重载方法：<T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)
		  <T> ResponseEntity<T> postForEntity(URI url, Object request, Class<T> responseType)
		  
		  <T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables)
重载方法：<T> T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)
		  <T> T postForObject(URI url, Object request, Class<T> responseType)
		
	PUT请求：
		  void put(String url, Object request, Object... urlVariables)
重载方法：void put(String url, Object request, Map<String, ?> urlVariables)
		  put(URI url, Object request)
		  
	DELETE请求：
		void delete(String url, Object... urlVariables)
		void delete(String url, Map<String, ?> urlVariables)
		void delete(URI url)
	自动化配置：Ribbon使用一系列接口来定义客户端负载均衡的配置，这些接口具有多种不同的实现，但引入Ribbon后可以直接使用
它的自动默认配置。
	IClientConfig接口：客户端配置；IRule接口：负载均衡策略配置；IPing接口：实例检查策略；ILoadBalancer：负载均衡器
	自定义配置的方式：一种方式是配置上面这些接口的实现bean，另一种是Camden版本开始可以使用的在配置文件中指定接口的实现类。
配置bean：
		@SpringBootApplication
		@RibbonClient(name = "my-provider", configuration = MyRibbonConfig.class)
		//MyRibbonConfig类不能放在可被默认包扫描策略扫描到的地方，如果要放在一个被扫描到的位置，需要使用@ComponentScan的
		//excludeFilters 排除：@ExcudeAnnotation是自定义标记空注解
		//@ComponentScan(excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION, value = {ExcludeAnnotation.class})})
		public class HelloSeviceApplication {
			@Bean
			@LoadBalanced
			public RestTemplate restTemplate() {
				return new RestTemplate();
			}
			...
		}
		
		@Configuration
		@ExcludeAnnotation
		public class MyRibbonConfig {
			@Bean
			public IRule ribbonRule() {
				return new RandomRule();
			}
		}
配置文件配置接口实现类：
		#全局配置:
		ribbon.ConnectTimeout=250
		#指定服务名:
		my-provider.ribbon.NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
		#不使用eureka维护ribbon的服务实例：
		ribbon.eureka.enabled=false
		my-provider.ribbon.listOfServers=localhost:8001,localhost:8002
	跨区域容错配置：可以将实际位于A区的服务配置为B区的服务，这是因为Ribbon默认是使用区域亲和策略的，如果B区实际部署的
服务都不可用，仍然可以使用那些不在B区但是配置zone为B区的服务：
		eureka.intance.metadataMap.zone=guangzhou
	服务治理的CAP原理：C——一致性	A——可用性	P——可靠性
	eureka强调AP，而zookeeper强调CP。由于eureka强调AP特性，可能导致ribbon获得的服务实例是不可用的，比如触发eureka对某个
服务的保护机制。spring cloud从Camden版本开始整合了Retry功能，可以配置ribbon的重试特性：
		#开启重试机制
		spring.cloud.loadbalancer.retry.enabled=true
		hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
		#请求连接的超时时间
		my-provider.ribbon.ConnectTimeout=250
		#请求处理的超时时间
		my-provider.ribbon.ReadTimeout=1000
		#对所有请求都进行重试
		my-provider.ribbon.okToRetryAllOperations=true
		#切换实例的次数（不包含当前实例）
		my-provider.ribbon.maxAutoRetriesNextServers=2
		#对当前实例的重试次数（不包含第一次）
		my-provider.ribbon.maxAutoRetries=1
	
	Ribbon依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-ribbon</artifactId>
		</dependency>
	其实 spring-cloud-starter-eureka 已经包含了ribbon依赖，所以不需要再单独引入ribbon
	使用 LoadBalancerClient 获取服务实例：
		loadbalancerClient.choose("virtual-host-name");
	这里的虚拟主机名默认和服务名是一致的，但是可以通过以下配置修改：
		eureka.instance.virtual-host-name 或 eureka.instance.secure-virtual-host-name
	配置了loadbalenced的restTemplate.getForEntity 方法不能和loadbalancerClient.choose
在同一个方法中调用，二者会发生冲突
	
    使用Ribbon进行客户端负载均衡消费服务：
	将hello-service在两个端口启动，向注册中心注册两个hello-service服务：
		java -jar hello-sevice-0.0.1-SNAPSHOT.jar --server.port=8081
		java -jar hello-sevice-0.0.1-SNAPSHOT.jar --server.port=8082
	新建一个服务消费者项目：ribbon-consumer：
	pom依赖：
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.6.RELEASE</version>
			<relativePath/>
		</parent>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-ribbon</artifactId>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
			</dependency>
		</dependencies>
		</dependencyManagement>
			<dependencies>
				<!-- 同上-->
			</dependencies>
		</dependencyManagement>
	启动类上添加注解：@EnableDiscoveryClient
	声明RestTemplate类型的bean,使用@LoadBalanced注解开启客户端负载均衡：
		@Bean
		@LoadBalanced
		RestTemplate restTemplate(){
			return new RestTemplate();
		}
	服务消费，使用hello-service服务：
		String hello = restTemplate.getForEntity("http://HELLO-SERVICE/hello",String.class).getBody();
	修改配置文件application：
		spring.application.name=ribbon-consumer
		server.port=9000
		eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/
	Ribbon使用轮询的方式交替访问可用的服务，实现负载均衡
	
第五章 Hystrix
	高负载的问题：如果服务提供者响应的时间太久，消费者就会一直等待直到响应或超时，每一次
服务调用通常对应着一个线程或进程，也就是占用着一部分系统资源，一直等待使得系统资源得不到
释放，如果有更多的请求到来就会导致资源耗尽，服务变得不可用。这种由于服务提供者故障导致服
务消费者也变得不可用的现象称为“雪崩效应”
	要防止雪崩效应，服务调用就需要具有容错能力，表现为两个方面：一是为网络请求设置超时时间，
二是提供断路支持（断路器）。
	设置超时可以让发送请求占用的资源及时得到释放，断路器可以实现快速失败，从而不再浪费CPU
时间去等待不可用的服务调用。断路器还需要提供自动恢复功能，在调用的服务恢复后关闭断路器。
	断路器的状态转换：
	断路器关闭（依赖服务正常）-->断路器打开（失败率达到阈值）-->半开状态（允许一个请求去调用
依赖服务进行测试，如果成功就关闭断路器，否则打开断路器）==>关闭断路器/打开断路器
	Hystrix提供的功能包括：包裹请求（HystrixCommand命令包裹服务调用逻辑，在独立线程中执行）、
跳闸机制（断路）、资源隔离（每个依赖提供一个线程池，当线程池满后后来的服务调用请求就直接失败）、
监控、回退、自我修复。
	基本用法：
	服务端调用方添加依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix</artifactId>
		</dependency>	
	启动类添加注解：
		@EnableCircuitBreaker
	调用其它服务的方法添加注解：
		@HystrixCommand(fallbackMethod = "callFallBack")
	回调方法：
		public String callFallBack(){
			return "service error";
		}
	@HystrixCommand的配置：
	@HystrixCommand(fallbackMethod = "callFallBack",commandProperties={
		//单次服务调用超时时间
		@HystrixProperty(name="execution.isolation.thread.timeoutInMilliseconds",value="5000"),
		//设置统计的滚动窗口的时间段大小（统计窗口刷新时间间隔）
		@HystrixProperty(name="metric.rollingStats.timeoutInMilliseconds",value="10000"),//
	},threadPoolProperties={
		//线程池大小
		@HystrixProperty(name="coreSize",value="10"),
		//排队等待发起请求的队列大小
		@HystrixProperty(name="maxQueueSize",value="10")
	})
	单次请求失败、超时、被拒绝在断路器打开时也是会调用回退方法的。
	Hystrix默认阈值是50秒20次请求失败。
	结合springboot的actuator可以在health端点查看hystrix的状态。
	Hystrix的隔离策略：THREAD(新开一个线程来使用HystrixCommand进行服务调用，并发量受线程池大小限制)、
SEMAPHORE(信号量，在原服务请求线程上进行服务调用)，默认使用THREAD
	Spring Cloud默认为feign集成了Hystrix，只有Hystrix在项目的classpath下，feign默认就会启用
HystrixCommand.
	为feign客户端添加回退方法：
		@FeignClient(name="hello-service",fallback=FeignClientFallback.class)
		public interface HelloFeignClient {
			@RequestMapping("/hello")
			public String callHello();
		}
		
		@Component
		class FeignClientFallback implements HelloFeignClient{
			public String callHello(){
				return "feign fallback";
			}
		}
	使用@FeignClient的fallbackFactory属性查看回退原因:
	@FeignClient(name="hello-service",fallback=FeignClientFallbackFactory.class)
	
	class FeignClientFallbackFactory implements FallbackFactory<HelloFeignClient>{
		@Override
		public HelloFeignClient create(Throwable cause){
			return new HelloFeignClient(){
				@Override
				public String callHello(){
					System.out.println("reason of fallback: "+cause);
					return cause.toString;
				}
			}
		}
	}
	为feign禁用hystrix:feign配置类配置feignBuilder的bean：
		@Configuration
		public class HelloFeignConfig {
			@Bean
			@Scope("prototype")
			public Feign.Builder feignBuilder(){
				return Feign.builder();
			}
		}
	全局禁用hystrix:
		feign.hystrix.enabled=false
	#开启超时熔断
	hystrix.command.default.execution.timeout.enabled=true
	#配置熔断时间，默认为1000
	hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
	上面的default表示全局配置，可以替换为单个服务名
	
	HystrixCommand在执行时会记录执行结果和运行指标，如每秒请求数、请求成功数等，这些数据可用于分析
系统状态。Hystrix模块hystrix-metrix-event-stream可以以text/event-stream的格式暴露上述信息。通过
actuator的hystrix.stream端点可以获取这些信息。
	使用Hystrix Dashboard显示hystrix统计信息：
	Hystrix Dashboard依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
		</dependency>
	启动类上添加注解：@EnableHystrixDashboard
	指定启动端口：server.port=8030
	访问：localhost:8030/hystrix 就可以看到hystrix dashboard
	在 hystrix-dashboard主页输入服务调用方的hystrix端点路径：localhost:9001/hystrix.stream,设置
title为任意值，点击monitor stream查看端点提供的hystrix信息
	feign已经引入了hystrix，但是要使用hystrix的监控功能，还是需要声明引入hystrix依赖，同时需要在
启动类上添加注解：@EnableCircuitBreaker
	
	使用turbine监控多个微服务：
	turbine工程依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-turbine</artifactId>
		</dependency>
	启动类上添加注解：@EnableTurbine
	配置文件：
		server.port=8031
		eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/
		turbine.appConfig=feign-consumer,ribbon-consumer
		turbine.clusterNameExpression="'default'"
	在hystrix-dashboard主页输入turbine的路径：http://localhost:8031/turbine.stream
	除了这种直接通过配置服务名的方式收集监控信息外，还可以引入消息中间件，让hystrix将收集的信息作为
消息发送给消息中间件，turbine再从消息中间件获取这些信息。
	
		
第六章 Feign
	Feign是netflix开源的HTTP客户端，具有声明式、模板化的特点。使用Feign可以实现方便、优雅地调用服务。
	Spring Cloud 对原生的Feign进行了增强，添加了对Spring MVC注解的支持，同时整合了Eureak和Ribbon。
	Feign依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>
		</dependency>	
	客户端Feign接口：
		@FeignClient(name="hello-service")
		public interface HelloFeignClient {
			@RequestMapping("/hello")
			public String callHello();
		}
	@FeignClient注解的name属性值是一个服务名，用来创建ribbon负载均衡器。还可以再添加一个属性url，直接
指定服务的地址。
	启动类添加注解：@EnableFeignClients
	调用类中注入feign客户端：
		@Autowired
		private HelloFeignClient helloFeignClient;
	feign使用默认配置创建客户端接口的实现，可以通过自定义配置修改feign客户端的行为：
	自定义feign配置类：
		@Configuration
		public class HelloFeignConfig {
			@Bean
			public BasicAuthRequestInterceptor basicAuthRequestInterceptor(){	
				//如果服务调用需要BasicAuth认证，就在这里配置用户名和密码
				return new BasicAuthRequestInterceptor("user","password");
			}
			
			@Bean
			public Contract feignContract(){	
				//配置使用feign原生注解
				return new feign.Contract.Default();
			}
		}
	在feign客户端接口中引入配置类：
		@FeignClient(name="hello-service",configuration = HelloFeignConfig.class)
		public interface HelloFeignClient {
			@RequestMapping("/hello")
			public String callHello();
		}
	这里的feign配置类HelloFeignConfig不能放在@ComponentScan扫描到的地方，否则会被应用到所有的feign客户端
	Feign还支持使用Feign Builder API来手动创建Feign客户端，这种方式可以灵活地控制feign客户端的行为：
	将启动类上的@EnableFeignClients注解去掉，然后去掉feign客户端接口的@FeignClient注解，
	在服务调用者控制器上添加注解：@Import(FeignClientsConfiguration.class)	//引入feign默认配置类
	将服务调用者控制器中的feign客户端接口注入改为构造方法注入：
		@Autowired
		public FeignConsumerController(Decoder decoder, Encoder encoder, Client client, Contract contract){
			this.helloFeignClient = Feign.builder().client(client).encoder(encoder).decoder(decoder).
					contract(contract).requestInterceptor(new BasicAuthRequestInterceptor("user","password")).
					target(HelloFeignClient.class,"http://hello-service/");
		}
	Decoder等是feign包下的API
	Feign使用继承：
	服务提供者定义接口：
		public interface UserService{
			@RequestMapping(value="/user/{id}",Method=RequestMethod.GET)
			User getUser(@PathVariable("id") long id);
		}
	服务提供者实现接口：
		@RestController
		public class UserServiceImpl implements UserService{
			...
		}
	服务调用者的feign客户端继承接口：
		@FeignClient("user-service")
		public interface UserFeignClient extends UserService{}
	这种方式的好处是简化开发，问题在于造成了服务消费者依赖了服务提供者，即代码的耦合。是否使用这种
方式，需要结合具体场景来考虑。
	feign对压缩的支持：
	#压缩请求：
	feign.compression.request.enabled=true
	#指定支持的媒体类型
	feign.compression.request.mime-types=text/xml,application/xml,application/json
	#指定开启请求压缩的最小值
	feign.compression.request.min-request-size=2048
	超时参数：
		连接超时时间：
			ribbon.ConnectTimeout=20000
		请求超时时间：
			ribbon.ReadTimeout=30000
	让feign打印日志：
	在feign配置类：HelloFeignConfig 中新增一个bean：
		@Bean
		Logger.Level feignLoggerLevel(){
			return Logger.Level.FULL;
		}
	配置文件添加日志级别：
		logging.level.com.zhangwei.feignconsumer.service.HelloFeignClient=DEBUG
	这里日志级别可选的值有：NONE(不记录日志)、BASIC(记录请求响应简单说明)、HEADERS(记录请求响应头)、FULL(全记录)
	Feign客户端传递多参数：
	如果是 GET 方法调用，多参数需要都写出来或使用map：
		@RequestMapping(value="/user",method=RequestMethod.GET)
		public User getUser(@RequestParam("name") String name, @RequestParam("age") int age);
		或
		@RequestMapping(value="/user",method=RequestMethod.GET)
		public User getUser(@RequestParam Map<String,Object> param);
	POST请求可以直接使用@RequestBody传递对象
	
第七章 zuul网关
	如果客户端（或代理）要和多个微服务通信，这将面临以下问题：
	第一，请求不同的微服务本身就会增加客户端的复杂性；
	第二，认证变得复杂；
	第三，客户端和服务端高耦合，微服务重构困难
	为了处理这些问题，可以使用微服务网关充当客户端和微服务间的中间人。
	Zuul是netflix开源的网关，通常和Ribbon、Eureka、Hystrix配合使用，它的核心是一系列过滤器，可以实现
身份认证、路由、监控、负载分配等功能。Spring Cloud对Zuul进行了增强，默认使用HttpClient发起请求。
	zuul依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
		</dependency>	
	为了从注册中心获取微服务实例，还需要引入eureka客户端：spring-cloud-starter-eureka
	声明项目为zuul网关，在启动类上添加注解：@EnableZuulProxy（不需要再添加启用服务发现的注解和启用
断路器的注解）
	zuul代理使用Ribbon做负载分配，使用Hystrix做容错处理，默认zuul发出的请求都是在Hystrix命令中执行。
	默认配置下通过zuul访问其它微服务：http://zuul-host:zuul-port/other-service-id/rest-path，zuul就会
转发请求到other-service-id/rest-path。并且默认zuul会代理所有注册在注册中心的微服务。
	spring-cloud-starter-zuul中已经包含了spring-boot-starter-actuator,所以可以直接暴露一些端点，
/routes端点可以通过get方式和put方式访问，返回zuul的路由集合。put方式会刷新路由以返回最新的路由集合。
	zuul路由配置：
		#自定义指定微服务的访问路径：(zuul的/hello/**路径被转发给hello-service的/**路径)
		zuul.routes.hello-service=/hello/**
		#不代理指定微服务：
		zuul.ignored-services=hello-service,consumer-service
		#忽略所有微服务，只代理指定微服务：
		zuul.ignored-services='*'
		zuul.routes.hello-service=/hello/**
		#另一种路由写法:(这里的hello-route只是一个随意的标识符)
		zuul.routes.hello-route.service-id=hello-service
		zuul.routes.hello-route.path=/hello/**
		#直接指定url和path：(这种方式不会使用hystrix和ribbon处理请求)
		zuul.routes.hello-route.url=http://locahost:8081/
		zuul.routes.hello-route.path=/hello/**
		#不使用eureka的服务实例
		zuul.routes.hello-route.service-id=hello-service
		zuul.routes.hello-route.path=/hello/**
		ribbon.eureka.enabled=false
		hello-service.ribbon.listOfServers=locahost:8081,locahost:8082
		#路由前缀1:(访问zuul的/hello/xx将被转发到hello-server的/hello/xx)
		zuul.routes.hello-service.path=/hello/**
		zuul.routes.hello-service.strip-prefix=false
		#路由前缀2：(访问zuul的/api/hello-service/xx将被转发到hello-service的/api/xx)
		zuul.prefix=/api
		zuul.strip-prefix=false
		zuul.routes.hello-service=/hello/**
		#忽略代理微服务中的某些路径：
		zuul.ignorePatterns:/**/admin/**
		zuul.routes.hello-service=/hello/*
	使用bean：PatternServiceRouteMapper可是实现通过正则表达式路由映射：
		new PatternServiceRouteMapper("(?<name>^.+)-(?<version>^.+$))","${version}/${name}");
		//可以将hello-service-v1映射到zuul路径：/v1/hello-service/
	
		#为指定微服务标定敏感Header：
		zuul.routes.hello-service.path=/hello/**
		zuul.routes.hello-service.sensitive-headers=Cookie,Authorization,Set-Cookie
		#设置全局敏感Header:
		zuul.sensitive-headers=Cookie,Authorization,Set-Cookie
		#忽略Header:(被标记的header不会被转发给微服务)
		zuul.ignorerd-headers=Header1,Header2
		#当引入了spring-security,ignored-headers会加入一些相关的值，如果需要转发给微服务，配置如下：
		zuul.ignoreSecurity-Headers=false
	配置上传文件时处理上传文件的微服务接收文件的大小：
		spring.http.multipart.max-file-size=1000Mb
		spring.http.multipart.max-request-size=1200Mb
	如果通过zuul转发上传文件，小文件不需要额外处理，大文件需要为上传路径添加/zuul前缀，如果zuul使用
了ribbon和hystrix，还需要修改超时时间：
		hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
		ribbon.ConnectTimeout=3000
		ribbon.ReadTimeout=60000
	zuul中定义了4种标准过滤器：PRE:路由前调用；ROUTING:构建请求并发送给微服务；POST:路由后调用；
ERROR:发生错误时调用。
	自定义STATIC过滤器，可以用来在需要的路由阶段完成需要的工作。自定义过滤器需继承ZuulFilter类，
重写 filterType方法返回调用的路由阶段(return "pre"路由前调用)，重写filterOrder方法返回调用顺序
(return 1)，重写shouldFilter方法返回是否启用过滤器(return true)，重写run方法实现具体的逻辑
	自定义过滤器需要作为bean注册到容器中才能使用
	spring cloud默认为zuul启用了一些过滤器，如DebugFilter等，可以使用下面的配置禁用这些过滤器：
	zuul.<SimpleClassName>.<filterType>.disable=true
	#zuul.DebugFilter.pre.disable=true
	
	可以为zuul添加回退逻辑，避免返回直接的报错信息给客户端。给zuul添加回退需要实现ZuulFallbackProvider
接口，实现getRoute方法返回需要提供回退的微服务id；实现fallbackResponse方法返回一个ClientHttpResponse
实现。
	zuul的高可用：主要的使用zuul的方式还是从客户端访问，而客户端通常是不会注册到注册中心的，所以zuul
的高可用通常是通过客户端代理(如nginx)配置zuul节点实现的。
	结合sidecar、zuul、eureka实现非JVM微服务的注册和调用：
	sidecar依赖：
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-netflix-sidecar</artifactId>
		</dependency>	
	启动类声明Sidecar:	@EnabelSidecar(已经包含开启断路器、服务发现、zuul网关代理)
	配置：
	#非JVM微服务运行端口（该微服务运行在和此sidecar同一个主机）
	sidecar.port=9000
	#这条配置用于报告非JVM微服务的状态，/health.json接口返回{"status":"UP"}
	sidecar.health-uri=http://localhost:9000/health.json
	由于结合sidecar和zuul，所以非JVM微服务可以通过zuul代理访问其他注册的微服务。由于sidecar配置了
非JVM微服务的运行端口，所以其它微服务对sidecar的调用将被转发给非JVM微服务
	sidecar端点（sidecar模块包含了actuator）：/ 测试页面，包含sidecar常用端点
/hosts/serviceId 返回eureka上指定微服务的实例列表
/ping 返回”OK"
/{serviceId} 转发到指定微服务
	如果非JVM微服务和sidecar没有部署在同一台主机上，sidecar使用如下配置：
	eureka.instance.hostname=非JVM微服务部署主机名
	#另一种配置：spring cloud netflix 1.3.0开始的版本
	sidecar.hostname=非JVM微服务部署主机名
	sidecar.ip-address=非JVM微服务部署主机IP
	
	
	








	