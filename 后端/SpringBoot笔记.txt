spring boot的maven构建文件要点：
	parent元素配置：
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>{springBootVersion}</version>
		<relativePath/>
	</parent>
	插件支持：
	<plugin>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-maven-plugin</artifactId>
	</plugin>
	该插件提供maven构建目标：spring-boot:run支持
----------------------------------------------------------------------------------------------------
参考pom:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.zhangwei</groupId>
  <artifactId>springboot-demo1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <parent>
  	<groupId>org.springframework.boot</groupId>
  	<artifactId>spring-boot-starter-parent</artifactId>
  	<version>1.5.14.RELEASE</version>
  </parent>
  
  <dependencies>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-web</artifactId>
  	</dependency>
	<!-- 开发者模式 -->
  	<dependency>
  		<groupId>org.springframework</groupId>
  		<artifactId>springloaded</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-devtools</artifactId>
  	</dependency>
  </dependencies>
  
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<configuration>
  				<source>1.8</source>
  				<target>1.8</target>
  			</configuration>
  		</plugin>
  	</plugins>
  </build>
</project>
-----------------------------------------------------------------------------------------------

父级工程pom:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.zhangwei</groupId>
  <artifactId>springboot-parent</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  
  <dependencyManagement>
  	<dependencies>
  		<dependency>
  			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-dependencies</artifactId>
			<version>1.5.14.RELEASE</version>
			<type>pom</type>
			<scope>import</scope>
  		</dependency>
  	</dependencies>
  </dependencyManagement>
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<configuration>
  				<source>1.8</source>
  				<target>1.8</target>
  			</configuration>
  		</plugin>
  	</plugins>
  </build>
  <modules>
  	<module>springboot-child1</module>
  	<module>springboot-child2</module>
  </modules>
</project>
-------------------------------------------------------------------------------------
子工程pom:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.zhangwei</groupId>
    <artifactId>springboot-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>springboot-child1</artifactId>
  <dependencies>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-web</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-test</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>junit</groupId>
  		<artifactId>junit</artifactId>
  		<scope>test</scope>
  	</dependency>
  </dependencies>
</project>
------------------------------------------------------------------------------------------------

配置文件：application.properties/application.yml
server.port=8088
server.context-path=/ww
#激活环境
spring.profiles.active=sit
#自定义值
book.author=James Kaite
book.name=SpringBoot Introduce
#多环境配置文件：application-sit.properties等
#logback日志配置
logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.file=springboot.log
logging.patern.console=%d{yyyy/MM/dd-HH:mm:ss}[%thread] %-5level %logger- %msg%n
logging.patern.file=%d{yyyy/MM/dd-HH:mm:ss}[%thread] %-5level %logger- %msg%n

#springmvc前后缀
spring.mvc.view.prefix=
spring.mvc.view.suffix=
#自定义静态资源位置
spring.resources.static-locations=classpath:/static/
#处理response响应中文乱码：
spring.http.encoding.force=true
-------------------------------------------------------------------------------------------
logback配置文件：logback.xml
<?xml version="1.0" encoding="utf-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<contextName>logback</contextName>
	<property name="log.path" value="/logs/info.log"/>
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger- %msg%n</pattern>
		</encoder>
	</appender>
	<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>info.%d{yyyy-MM-dd}.log</fileNamePattern>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger- %msg%n</pattern>
		</encoder>
	</appender>
	<root level="info">
		<appender-ref ref="console"/>
		<appender-ref ref="file"/>
	</root>
	<!-- <logger name="com.zhangwei.springboot.child1.controller.SpringController" level="DEBUG" additivity="false">
		<appender-ref ref="console"/>
	</logger> -->
	
	<springProfile name="test,dev">
		<logger name="com.zhangwei.springboot.child1.controller"/>
	</springProfile>
	<springProfile name="prod">
		<logger name="com.zhangwei.springboot.child1.controller" level="error" additivity="false">
			<appender-ref ref="file"/>
		</logger>
	</springProfile>
</configuration>
--------------------------------------------------------------------------------------------------
日志使用：
private Logger logger = LoggerFactory.getLogger(this.getClass());
logger.debug("debug log.....");
--------------------------------------------------------------------------------------------------
使用log4j替换logback:
	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter</artifactId>
  		<exclusions>
  			<exclusion>
  				<groupId>org.springframework.boot</groupId>
  				<artifactId>spring-boot-starter-logging</artifactId>
  			</exclusion>
  		</exclusions>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-log4j</artifactId>
  		<version>1.3.8.RELEASE</version>
  	</dependency>
-----------------------------------------------------------------------------------------
log4j配置文件：log4j.properties:
#debug->info->warn->error
log4j.rootLogger=info, console, file

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss.SSS} method:%l %m%n

log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=/logs/debug.log
log4j.appender.file.Append=true
#only warn and error log will be write to file
log4j.appender.file.Threshold=warn
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss.SSS} method:%l %m%n

-------------------------------------------------------------------------------------------------

访问静态资源：
将静态文件放在resources下的public/static等文件夹下
使用spring.resources.static-locations=classpath:/static/自定义静态资源位置

--------------------------------------------------------------------------
处理response响应中文乱码：
spring.http.encoding.force=true
--------------------------------------------------------------------------
使用fastjson处理json转换：
<dependency>
  		<groupId>com.alibaba</groupId>
  		<artifactId>fastjson</artifactId>
  		<version>1.2.15</version>
</dependency>

@Bean
public HttpMessageConverters fastJsonConverter() {
	FastJsonHttpMessageConverter jsonConverter = new FastJsonHttpMessageConverter();
	FastJsonConfig config = new FastJsonConfig();
	config.setSerializerFeatures(SerializerFeature.PrettyFormat);
	jsonConverter.setFastJsonConfig(config);
	HttpMessageConverter<?> converter = jsonConverter;
	return new HttpMessageConverters(converter);
}

@JSONField(format="yyyy-MM-dd")
	private Date birthday;


了解微服务
	springboot是一个基于java开发的服务于java应用开发的微框架，特别适合用于微服务的构建。
	微服务是服务化路线的一种最佳实践方向。
	早期的服务化实现和实施是将很多功能打包成一个大的服务单元（部署到一个大的服务单元），而微服务
则是强调服务单元功能单一，实现小型化、微型化
	大服务单元的实践适合复杂度不高的系统，如果系统复杂度提高，就会遇到并行开发难以开展、“火车头”
交付效率低下的问题。
	微服务就是为了应对这类问题而生，即解放并行开发，实现服务独立开发、独立部署、独立交付
	微服务带来的另外两个好处：一是系统可扩展性的提升，二是更好的隔离性。扩展功能对于硬件性能的要
求不会累加。

SpringBoot的本质
	SpringBoot框架出现的目的是为了简化基于spring的应用的开发。
	Spring的IOC，即控制反转，指的是对象的创建和获取方式的反转，由调用者的主动操作转换为调用者被动
接收依赖的对象。这包括两种方式，一种是DI，即依赖注入，另一种是DL，意为依赖发现，是指通过容器手动获
取依赖对象：context.getBean("xxx")。spring的依赖注入包括两个方面：首先是bean的收集，可以通过xml、
java配置或扫描发现的方式完成；然后是分析bean之间的依赖关系并完成注入。
	springboot广泛使用java类来配置spring，一些常用的注解如下：
	@Configuration	//标记将被作为spring配置的类
	@Bean			//标记返回bean的方法，方法名就是bean的id
	@ComponentScan	//配置扫描的包，默认为使用此注解的类所在包及子包下，使用basePackages={...}属性
指定要扫描的包
	@PropertySource	//用于指定properties文件，指定的文件内容将被解析到IOC容器中，可以用来填充占位符
	@PropertySources	//jdk1.8之前使用此注解指定多个资源文件，1.8之后可以同时使用多个@PropertySource
	@Import			//用来在一个java配置类中引入另一个java配置类
	@ImportResource	//用来在java配置类中引入xml配置文件
	
	@SpringBootApplication的真相：
	这个注解实际上是一个复合注解，即@Configuration、@EnableAutoConfiguration和@ComponentScan的组合
	@EnableAutoConfiguration这个注解将被springboot使用来启用SpringFactoryLoader，spring使用SpringFactoryLoader
来从META-INF/spring.factories文件（这是一个标准properties文件）读取java配置类，这些配置类中使用了
条件化配置bean，只有满足条件才会创建bean的实例。
	























































