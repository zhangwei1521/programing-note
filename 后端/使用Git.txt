											使用Git
	版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。
	早期的本地版本控制系统如RCS使用补丁集（补丁是指文件修订前后的变化）保存在硬盘上，
然后通过应用所有的补丁，可以重新计算出各个版本的文件内容。
	集中化的版本控制系统：使用单一的集中管理的服务器，保存所有文件的修订版本。
	分布式版本控制系统：客户端不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来。
每一次的克隆操作，实际上都是一次对代码仓库的完整备份。
	Git和其他版本控制系统的区别：其他版本控制系统通常是保存了原始文件和每次提交的修改片段，
然后通过合并原始文件和修改片段得到当前的文件，Git则是保存每次提交时的所有文件快照，
没有修改的文件不会创建新的文件快照而是使用指针指向原来的文件。
	这也导致一个问题，如果一个文件被修改多次，就会在Git中保存多个文件，如果文件数量很多，
就会导致项目的占用空间比较大，比如一个普通的约6000次提交的项目，项目可能占到40~60MB的磁盘空间。

	在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。
	Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时
更改任何文件内容或目录内容。
	Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符
（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：
24b9da6552252987aa493b52f8696cd6d3b00373
实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。
	Git有三种状态:已提交（committed）、已修改（modified）和已暂存（staged）。
	Git项目的三个工作区域：Git仓库、工作目录以及暂存区域。
	工作目录是从项目的某个版本独立提取出来的内容。
	暂存区域类似于一个中间仓库，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。
	基本的 Git 工作流程如下：
		在工作目录中修改文件。
		暂存文件，将文件的快照放入暂存区域。
		提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。
	
	Git自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在
三个不同的位置：
	① /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system选项的
git config 时，它会从此文件读写配置变量。
	② ~/.gitconfig或 ~/.config/git/config文件：只针对当前用户。可以传递--global选项让Git读写此文件。
	③ 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。
	每一个级别覆盖上一级别的配置。
	安装完 Git 应该做的第一件事就是设置用户名称与邮件地址。因为每一个 Git 的提交都会使用这些信息。
	git config --global user.name "zhangwei1521"
	git config --global user.email 759109612@qq.com
	使用 git config --list 命令来列出所有 Git 当时能找到的配置。
	可能会看到重复的变量名，因为Git会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与
~/.gitconfig）。这种情况下，Git会使用它找到的每一个变量的最后一个配置。
	使用 git config <key>： 来检查 Git 的某一项配置：
		git config user.name	
	三种方法找到 Git 命令的使用手册：
		git help <verb>
		git <verb> --help
		man git-<verb>
	
	Git基础命令
	有两种取得 Git 项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到 Git 中； 
第二种是从一个服务器克隆一个现有的 Git 仓库。
	在项目根目录下使用 
		git init 
	初始化项目为Git项目，将会创建一个名为 .git的子目录，这个子目录含有初始化的 Git仓库中所有的
必须文件，这些文件是 Git 仓库的骨干。
	这个命令仅仅是做了一个初始化的操作，项目里的文件还没有被跟踪。
	使用命令
		git add <fileName(s)>
	跟踪文件，将文件放入暂存区。
	使用命令
		git commit -m "commit message for this commit" 或 git commit 启动编辑器填写提交信息 
	提交跟踪的文件到 Git仓库
	
	使用 git clone project_url 克隆项目。	
	Git 克隆的是远程服务器上的Git项目的几乎所有数据，而不是仅仅复制项目的工作区文件。
	默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。
	使用 git clone project_url myDir 自定义项目本地目录名。
	Git 支持多种数据传输协议。如 https:// 协议、git://协议等。
	
	工作目录下的文件只有两种状态：已跟踪和未跟踪。已跟踪的文件是指那些被纳入了版本控制的文件，
已跟踪的文件可能处于 已提交（committed）、已修改（modified）和已暂存（staged）三种状态。未跟踪的
文件不属于Git管理的对象。
	使用 git status 查看工作目录下（当前分支）的文件状态，git将使用 Untracked files 标记未跟踪文件。
	git add 命令是个多功能命令：可以用它开始跟踪新文件（同时添加到暂存区），或者把已跟踪的文件放到
暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 这个命令可以理解为“添加内容到下一次提交中”。
	使用 git status -s 查看简化输出的文件状态信息：??标记未跟踪文件，_M(_表示空格)标记文件被修改且
未暂存，M_标记文件被修改且已暂存，MM标记文件第一次修改已暂存，第二次修改未暂存，A标记添加到暂存区的
新文件。
	.gitignore 文件，用于列出要忽略的文件模式。.gitignore文件格式：
		*.[oa]	忽略所有结尾为0或a的文件（不限文件路径）
		*~		忽略所有以~结尾的文件（不限文件路径）
		!lib.a	不忽略lib.a文件（虽然上面忽略了*.a文件）
		/TODO	只忽略根目录下的TODO文件
		doc/**/*.pdf	忽略所有的doc目录下的.pdf文件
	查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff
	查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached（Git 1.6.1 及更高版本还允许使用 
git diff --staged，效果是相同的）
	使用 git commit -a 跳过手动暂存文件（自动添加已修改的已跟踪文件到暂存区）。
	使用 git rm <fileName> 删除暂存区和工作目录的指定文件，提交后的版本中就不会有该文件了
	如果已经在工作目录删除了文件，提交前还是需要使用 git rm <fileName> 删除暂存区的文件
	使用 git rm --cached <fileName> 删除暂存区的文件，但是保留工作目录的文件，提交后该文件不会进入仓库。
	使用 git rm \*~ 删除所有以~结尾的文件。
	使用 git mv file_from file_to 重命名文件，实际上是先修改了文件名，然后删除暂存区的原文件，然后
将改名后的文件再添加到暂存区(即mv, git rm, git add 命令的组合)。

	git log 不带参数会按提交时间列出所有的更新，最近的更新排在最上面。
	选项 -p，显示每次提交的内容差异。 
	选项 -n，显示最近n次提交。
	选项 --stat，显示所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了
	选项 --pretty，指定使用不同于默认格式的方式展示提交历史。--pretty=oneline，还有short，full和fuller
	选项 --pretty=format，git log --pretty=format:"%h - %an, %ar : %s"		：
		%H		提交对象（commit）的完整哈希字串
		%h		提交对象的简短哈希字串
		%T		树对象（tree）的完整哈希字串
		%t		树对象的简短哈希字串
		%P		父对象（parent）的完整哈希字串
		%p		父对象的简短哈希字串
		%an		作者（author）的名字
		%ae		作者的电子邮件地址
		%ad		作者修订日期（可以用 --date= 选项定制格式）
		%ar		作者修订日期，按多久以前的方式显示
		%cn		提交者（committer）的名字
		%ce		提交者的电子邮件地址
		%cd		提交日期
		%cr		提交日期，按多久以前的方式显示
		%s		提交说明
	选项 --graph，与--format结合使用，以简单图形方式显示提交历史
	选项 --shortstat，只显示 --stat 中最后的行数修改添加移除统计。
	选项 --since(--before)，git log --since=2.weeks(2008-01-15) 列出所有最近两周内(2008-01-15以后)的提交
	选项 --author，显示指定作者的提交，
	选项 --committer，仅显示指定提交者相关的提交。
	选项 --grep， 搜索提交说明中的关键字。 
	如果要得到同时满足上面两个选项搜索条件的提交，就必须用 --all-match 选项。
	选项 -S "key word" 仅显示添加或移除了某个关键字的提交
	git log -- path/fileName	指定文件路径（名）
	查询指定时间后含有指定关键字的提交：
		git log --grep=报到注册 --since=2018-11-20 -p
	提交历史统计：
		git log --author=yourname --since="2014-07-01" --no-merges | grep -e 'commit [a-zA-Z0-9]*' | wc -l
		
	使用 git commit --amend 追加提交，这个命令会将暂存区中的文件提交。如果自上次提交以来未做任何
修改，这个命令就是进行重新编辑提交信息。
	使用 git reset HEAD <file>... 来取消暂存
	使用 git reset --hard f5ee87fa3a019cbf58f80b47fff5d099d6b15eb6 退回指定提交后的版本
	使用 git checkout -- [file] 撤销修改（工作目录中的该文件将被重置为仓库中正确分支的最新提交版本）
	
	远程仓库是指托管在因特网或其他网络中的项目版本库。一个本地项目可以有好几个远程仓库。管理远程仓
库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。
	git remote 查看远程仓库名
	git remote -v 查看远程仓库名和url
	添加远程仓库：git remote add origin  https://github.com/zhangwei1521/programing-note.git 
	从远程仓库中抓取数据：git fetch [remote-name] 这个命令不会自动合并或修改当前的工作，需要手动处理。
进行合并处理：git merge origin/master
	从远处仓库中拉取数据：git pull [remote-name] 这个命令会自动的抓取然后合并远程分支到当前分支。
	推送到远程仓库：git push [remote-name] [branch-name]
	查看某一个远程仓库的详细信息：git remote show [remote-name] 
	重命名远程仓库的本地名称：git remote rename origin myhub
	移除一个远程仓库：git remote rm myhub
	
	列出所有标签名：git tag
	按模式查找标签：git tag -l 'v1.8.5*'
	Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。
	一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。
	附注标签是存储在 Git 数据库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间
	创建附注标签：git tag -a v1.0 -m "first stage finished" 这里不使用-m就会启动编辑器
	查看标签具体信息和打标签时的提交：git show v1.0
	创建轻量标签：git tag v1.0-lt
	对过去的提交打标签: git tag -a v0.9 0ea308		(0ea308是过去提交的部分校验和，也可以用完整校验和)
	git push 命令并不会传送标签到远程仓库服务器上。需要手动操作：git push origin [tagname]或者：
git push origin --tags 推送所有标签
	在 Git 中并不能真的检出一个标签，将工作目录切换到某个标签版本,需要创建一个该标签处的分支：
git checkout -b [branch-name] [tag-name]
	
	git 配置
	可以通过 git config 文件来轻松地为每一个命令设置一个别名:
		git config --global alias.co checkout
	添加自己的取消暂存别名:
		git config --global alias.unstage 'reset HEAD --'
	在命令前面加入 ! 符号执行外部命令，而不是一个 Git 子命令:
		git config --global alias.visual '!gitk'

	#拒绝提交包含混合换行符的文件
	git config --global core.safecrlf true
	#提交时转换为LF，检出时转换为CRLF
	git config --global core.autocrlf true
	#提交时转换为LF，检出时不转换
	git config --global core.autocrlf input
	#提交检出均不转换
	git config --global core.autocrlf false
	git bash编码配置：修改git安装路径下~/etc/gitbash.bashrc文件，添加：
		export LANG="zh_CN.UTF-8"
		export LC_ALL="zh_CN.UTF-8"
	git status输出乱码：git config --global core.quotepath false
	

	
	Git 分支
	相较于其它版本控制系统，git创建分支要高效得多。
	进行提交操作时，git保存一个提交对象，这个提交对象包含了提交者的信息、提交的说明信息以及一个指向
保存内容的指针，此外还有一个指向它的父对象的指针。对于合并多个分支的提交，其提交对象具有多个父对象指针。
	将修改的文件加入暂存区的时候就计算了每个文件的校验和，提交的时候根据项目的目录结构和每个文件创建
一个树对象，然后创建一个提交对象，提交对象有一个指针指向这个树对象。所以提交后项目仓库里具有这几类对
象：文件快照(由文件的校验和引用)、树对象(保存项目目录结构和所有的文件校验和)、提交对象(保存了提交信息
和指向树对象的指针)。再次提交产生的提交对象会新增一个新的指针，指向上一次提交的提交对象。
	Git 的分支，其实本质上仅仅是指向提交对象的可变指针。
	在当前提交上创建分支：git branch [branch-name]
	git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。
	git使用一个名为 HEAD 的特殊指针指向当前所在的本地分支(可以看成当前分支的别名)。
	查看分支对应的提交校验和(提交对象)：git log --decorate --oneline
	切换到一个已存在的分支: git checkout [branch-name]
	切换分支前需要保存提交当前分支所做的修改。
	拉取本地不存在的远程分支：git pull origin branch1:branch1 
	查看分叉历史:git log --oneline --decorate --graph --all
	创建一个分支只是创建了一个文件，文件内容就是某次提交的校验和加一个换行符
	创建分支后切换到创建的分支：git checkout -b branch-name
	切换分支的时候，Git 会重置工作目录，使其看起来像回到了那个分支上最后一次提交的样子
	合并指定分支到当前分支：git merge 1.0.0-dev
	如果已经修改提交待合并的分支和当前分支没有分叉，那么两个分支就没有分歧，合并操作只是简单地把HEAD
指针移动到已修改提交的分支的提交对象处。这称为fast-forward
	删除分支：git branch -d branch-name
	合并已经分叉的分支时，会创建一个新的提交，称为合并提交，这种合并会把合并的两个分支各自所做的修改
提交按时间顺序整合。
	如果在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。merge
会产生冲突，这时 Git 会暂停下来，git会把没有冲突的文件内容合并，有冲突的文件内容标记冲突部分，可以使用
git status 查看冲突文件，冲突文件看起来像是这样：
		<<<<<<< HEAD:index.html
		<div id="footer">contact : email.support@github.com</div>
		=======
		<div id="footer">
		 please contact us at support@github.com
		</div>
		>>>>>>> iss53:index.html
	<<<<<<<和>>>>>>>之间为冲突部分，=======上面的是当前分支(HEAD指向)的修改内容，下面的是待合并分支
的修改内容。使用编辑器处理冲突内容后，使用commit提交合并操作结果。
	git branch 命令不加任何参数运行它，会得到当前所有分支的一个列表。分支前的 * 字符：它代表现在检出
的那一个分支（也就是说，当前 HEAD 指针所指向的分支
	查看每一个分支的最后一次提交：git branch -v 
	查看哪些分支已经合并到当前分支：git branch --merged  查看未合并到当前分支的分支 --no-merged 
	git branch -D branch-name 强制删除未合并到其他分支的分支
	
	几种分支工作模式：
	长期分支：长期分支模式具有一个或多个稳定分支，以及多个开发分支(前沿分支)，稳定分支的指针总是在
提交历史中落后一大截，而前沿分支的指针往往比较靠前。
	特性分支：一种短期分支，它被用来实现单一特性或其相关工作

	git cherry-pick [<options>] commitid 挑拣 提交
	git cherry-pick用于在当前分支合入其他分支的某一次提交。
	当cherry-pick时，如果没有成功自动提交，说明存在冲突，因此需要解决冲突,解决冲突后需要git commit手动进行提交
	git cherry-pick -n commitid 取消自动提交
	git cherry-pick -e commitid 合入后启动编辑器编辑提交信息
	解决冲突后也可以使用git cherry-pick --continue命令，继续进行cherry-pick操作。
	git cherry-pick --abort 前分支恢复到cherry-pick前的状态
	如果在git cherry-pick后加一个分支名，则表示将该分支顶端提交进cherry-pick
	
	