											使用Git
	版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。
	早期的本地版本控制系统如RCS使用补丁集（补丁是指文件修订前后的变化）保存在硬盘上，
然后通过应用所有的补丁，可以重新计算出各个版本的文件内容。
	集中化的版本控制系统：使用单一的集中管理的服务器，保存所有文件的修订版本。
	分布式版本控制系统：客户端不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来。
每一次的克隆操作，实际上都是一次对代码仓库的完整备份。
	Git和其他版本控制系统的区别：其他版本控制系统通常是保存了原始文件和每次提交的修改片段，
然后通过合并原始文件和修改片段得到当前的文件，Git则是保存每次提交时的所有文件快照，
没有修改的文件不会创建新的文件快照而是使用指针指向原来的文件。
	这也导致一个问题，如果一个文件被修改多次，就会在Git中保存多个文件，如果文件数量很多，
就会导致项目的占用空间比较大，比如一个普通的约6000次提交的项目，项目可能占到40~60G的磁盘空间。

	在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。
	Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时
更改任何文件内容或目录内容。
	Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符
（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：
24b9da6552252987aa493b52f8696cd6d3b00373
实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。
	Git有三种状态:已提交（committed）、已修改（modified）和已暂存（staged）。
	Git项目的三个工作区域：Git仓库、工作目录以及暂存区域。
	工作目录是从项目的某个版本独立提取出来的内容。
	暂存区域类似于一个中间仓库，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。
	基本的 Git 工作流程如下：
		在工作目录中修改文件。
		暂存文件，将文件的快照放入暂存区域。
		提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。
	
	Git自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在
三个不同的位置：
	① /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system选项的
git config 时，它会从此文件读写配置变量。
	② ~/.gitconfig或 ~/.config/git/config文件：只针对当前用户。可以传递--global选项让Git读写此文件。
	③ 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。
	每一个级别覆盖上一级别的配置。
	安装完 Git 应该做的第一件事就是设置用户名称与邮件地址。因为每一个 Git 的提交都会使用这些信息。
	git config --global user.name "zhangwei1521"
	git config --global user.email 759109612@qq.com
	使用 git config --list 命令来列出所有 Git 当时能找到的配置。
	可能会看到重复的变量名，因为Git会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与
~/.gitconfig）。这种情况下，Git会使用它找到的每一个变量的最后一个配置。
	使用 git config <key>： 来检查 Git 的某一项配置：
		git config user.name	
	三种方法找到 Git 命令的使用手册：
		git help <verb>
		git <verb> --help
		man git-<verb>
	
	Git基础命令
	有两种取得 Git 项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到 Git 中； 
第二种是从一个服务器克隆一个现有的 Git 仓库。
	在项目根目录下使用 
		git init 
	初始化项目为Git项目，将会创建一个名为 .git的子目录，这个子目录含有初始化的 Git仓库中所有的
必须文件，这些文件是 Git 仓库的骨干。
	这个命令仅仅是做了一个初始化的操作，项目里的文件还没有被跟踪。
	使用命令
		git add <fileName(s)>
	跟踪文件，将文件放入暂存区。
	使用命令
		git commit -m "commit message for this commit" 或 git commit 启动编辑器填写提交信息 
	提交跟踪的文件到 Git仓库
	
	使用 git clone project_url 克隆项目。	
	Git 克隆的是远程服务器上的Git项目的几乎所有数据，而不是仅仅复制项目的工作区文件。
	默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。
	使用 git clone project_url myDir 自定义项目本地目录名。
	Git 支持多种数据传输协议。如 https:// 协议、git://协议等。
	
	工作目录下的文件只有两种状态：已跟踪和未跟踪。已跟踪的文件是指那些被纳入了版本控制的文件，
已跟踪的文件可能处于 已提交（committed）、已修改（modified）和已暂存（staged）三种状态。未跟踪的
文件不属于Git管理的对象。
	使用 git status 查看工作目录下（当前分支）的文件状态，git将使用 Untracked files 标记未跟踪文件。
	git add 命令是个多功能命令：可以用它开始跟踪新文件（同时添加到暂存区），或者把已跟踪的文件放到
暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 这个命令可以理解为“添加内容到下一次提交中”。
	使用 git status -s 查看简化输出的文件状态信息：??标记未跟踪文件，_M(_表示空格)标记文件被修改且
未暂存，M_标记文件被修改且已暂存，MM标记文件第一次修改已暂存，第二次修改未暂存，A标记添加到暂存区的
新文件。
	.gitignore 文件，用于列出要忽略的文件模式。.gitignore文件格式：
		*.[oa]	忽略所有结尾为0或a的文件（不限文件路径）
		*~		忽略所有以~结尾的文件（不限文件路径）
		!lib.a	不忽略lib.a文件（虽然上面忽略了*.a文件）
		/TODO	只忽略根目录下的TODO文件
		doc/**/*.pdf	忽略所有的doc目录下的.pdf文件
	查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff
	查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached（Git 1.6.1 及更高版本还允许使用 
git diff --staged，效果是相同的）
	使用 git commit -a 跳过手动暂存文件（自动添加已修改的已跟踪文件到暂存区）。
	使用 git rm <fileName> 删除暂存区和工作目录的指定文件，提交后的版本中就不会有该文件了
	如果已经在工作目录删除了文件，提交前还是需要使用 git rm <fileName> 删除暂存区的文件
	使用 git rm --cached <fileName> 删除暂存区的文件，但是保留工作目录的文件，提交后该文件不会进入仓库。
	使用 git rm \*~ 删除所有以~结尾的文件。
	使用 git mv file_from file_to 重命名文件，实际上是先修改了文件名，然后删除暂存区的原文件，然后
将改名后的文件再添加到暂存区(即mv, git rm, git add 命令的组合)。

	git log 不带参数会按提交时间列出所有的更新，最近的更新排在最上面。
	选项 -p，显示每次提交的内容差异。 
	选项 -n，显示最近n次提交。
	选项 --stat，显示所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了
	选项 --pretty，指定使用不同于默认格式的方式展示提交历史。--pretty=oneline，还有short，full和fuller
	选项 --format，git log --pretty=format:"%h - %an, %ar : %s"		：
		%H		提交对象（commit）的完整哈希字串
		%h		提交对象的简短哈希字串
		%T		树对象（tree）的完整哈希字串
		%t		树对象的简短哈希字串
		%P		父对象（parent）的完整哈希字串
		%p		父对象的简短哈希字串
		%an		作者（author）的名字
		%ae		作者的电子邮件地址
		%ad		作者修订日期（可以用 --date= 选项定制格式）
		%ar		作者修订日期，按多久以前的方式显示
		%cn		提交者（committer）的名字
		%ce		提交者的电子邮件地址
		%cd		提交日期
		%cr		提交日期，按多久以前的方式显示
		%s		提交说明
	选项 --graph，与--format结合使用，以简单图形方式显示提交历史
	选项 --shortstat，只显示 --stat 中最后的行数修改添加移除统计。
	选项 --since(--before)，git log --since=2.weeks(2008-01-15) 列出所有最近两周内(2008-01-15以后)的提交
	选项 --author，显示指定作者的提交，
	选项 --committer，仅显示指定提交者相关的提交。
	选项 --grep， 搜索提交说明中的关键字。 
	如果要得到同时满足上面两个选项搜索条件的提交，就必须用 --all-match 选项。
	选项 -S "key word" 仅显示添加或移除了某个关键字的提交
	git log -- path/fileName	指定文件路径（名）
	
	使用 git commit --amend 追加提交，这个命令会将暂存区中的文件提交。如果自上次提交以来未做任何
修改，这个命令就是进行重新编辑提交信息。
	使用 git reset HEAD <file>... 来取消暂存
	使用 git checkout -- [file] 撤销修改（工作目录中的该文件将被重置为仓库中正确分支的最新提交版本）
	