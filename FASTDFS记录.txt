FASTDFS:
概念：FastDFS是一个开源的分布式文件系统，她对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，
解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
	跟踪器（tracker）：主要做调度工作，在访问上起负载均衡的作用。
	存储节点（storage）：存储文件，完成文件管理的所有功能：存储、同步和提供存取接口，FastDFS同时对文件的meta data进行管理。
所谓文件的meta data就是文件的相关属性，以键值对（key value pair）方式表示。文件meta data是文件属性列表，可以包含多个键值对。

存储节点使用分卷（或分组）的组织方式；由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷 的文件容量累加就是整个存储系统中的文件容量。
一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起 到了冗余备份和负载均衡的作用。
在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。

一个典型的FASTDFS具有多个tracker节点和多个storage节点，每个storage节点具有多个卷，storage节点之间、卷与卷之间保存的文件是不同的，卷内部可以具有多台服务器，
这些服务器之间的文件互为备份。

上传文件上传过程：
	客户端先访问tracker节点，tracker服务器返回一个可用的storage节点内卷服务器的地址，然后客户端和storage节点内卷服务器通信上传文件，
	storage节点内卷服务器定期和tracker节点通信，通知tracker节点所存文件的文件标识（卷名和文件名）；同时storage节点完成卷内各个存储服务器间的数据同步。
文件下载过程：
	客户端先访问tracker节点，传递文件标识给tracker节点，tracker服务器返回对应的storage节点内卷服务器地址，client直接和storage内卷服务器通讯完成文件下载。

一次fastdfs排错记录：
之前迁移微服务A模块的文件到生产环境，但是迁移的文件无法下载，检查服务器确定文件确实已经上传成功，且文件路径没有错误。对比正常的另一个可以正常下载的微服务模块B的下载方法，
没有发现问题，直接使用服务B的方法也不能下载服务A迁移的文件，然后检查服务B上传的文件却找不到，怀疑其上传服务器地址不正确，于是更新了服务B的上传地址后重新上传，却发现服务B
上传新文件失败，报错日志显示：storageClient1.upload_file1(bytes, ext, meta_list) 报上传错误，storageClient1.upload_file1方法报unsupportedencodingexception: utf-8 ，
查看fastdfs-client代码找到这一行：masterFilenameBytes = master_filename.getBytes(ClientGlobal.g_charset);这里转回项目查看设置的编码，意外发现配置的编码UTF-8后面多了个空格。
修改后再上传文件就成功了，再次使用服务B的接口下载迁移的文件，可以正常下载，再检查服务A的配置发现A的配置存在明显错误。